
robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00004954  000049e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002da  00800106  00800106  00004a8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004a8e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d0  00000000  00000000  00004abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004f84  00000000  00000000  00004e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001399  00000000  00000000  00009e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016c2  00000000  00000000  0000b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c88  00000000  00000000  0000c870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000130c  00000000  00000000  0000d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018c6  00000000  00000000  0000e804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000300  00000000  00000000  000100ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
       4:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__vector_1>
       8:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <__vector_2>
       c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      1c:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__vector_7>
      20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      34:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__vector_13>
      38:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__vector_14>
      3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      40:	0c 94 46 1e 	jmp	0x3c8c	; 0x3c8c <__vector_16>
      44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      54:	aa 13       	cpse	r26, r26
      56:	c6 13       	cpse	r28, r22
      58:	e5 13       	cpse	r30, r21
      5a:	01 14       	cp	r0, r1
      5c:	22 14       	cp	r2, r2
      5e:	3e 14       	cp	r3, r14
      60:	b6 14       	cp	r11, r6
      62:	d2 14       	cp	r13, r2
      64:	f3 14       	cp	r15, r3
      66:	35 15       	cp	r19, r5
      68:	51 15       	cp	r21, r1
      6a:	70 15       	cp	r23, r0
      6c:	8c 15       	cp	r24, r12
      6e:	ad 15       	cp	r26, r13
      70:	c9 15       	cp	r28, r9
      72:	ea 15       	cp	r30, r10
      74:	06 16       	cp	r0, r22
      76:	27 16       	cp	r2, r23
      78:	43 16       	cp	r4, r19
      7a:	64 16       	cp	r6, r20
      7c:	80 16       	cp	r8, r16
      7e:	a1 16       	cp	r10, r17
      80:	bd 16       	cp	r11, r29
      82:	de 16       	cp	r13, r30
      84:	fa 16       	cp	r15, r26
      86:	1b 17       	cp	r17, r27
      88:	37 17       	cp	r19, r23
      8a:	43 1f       	adc	r20, r19
      8c:	4a 1f       	adc	r20, r26
      8e:	53 1f       	adc	r21, r19
      90:	5c 1f       	adc	r21, r28
      92:	65 1f       	adc	r22, r21
      94:	6c 1f       	adc	r22, r28
      96:	73 1f       	adc	r23, r19
      98:	7a 1f       	adc	r23, r26
      9a:	83 1f       	adc	r24, r19
      9c:	8c 1f       	adc	r24, r28
      9e:	95 1f       	adc	r25, r21
      a0:	9e 1f       	adc	r25, r30
      a2:	a7 1f       	adc	r26, r23
      a4:	b0 1f       	adc	r27, r16
      a6:	b9 1f       	adc	r27, r25
      a8:	c2 1f       	adc	r28, r18
      aa:	cb 1f       	adc	r28, r27
      ac:	d4 1f       	adc	r29, r20
      ae:	dd 1f       	adc	r29, r29
      b0:	e6 1f       	adc	r30, r22

000000b2 <__ctors_end>:
      b2:	11 24       	eor	r1, r1
      b4:	1f be       	out	0x3f, r1	; 63
      b6:	cf e5       	ldi	r28, 0x5F	; 95
      b8:	d8 e0       	ldi	r29, 0x08	; 8
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e6       	ldi	r26, 0x60	; 96
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	e4 e5       	ldi	r30, 0x54	; 84
      c6:	f9 e4       	ldi	r31, 0x49	; 73
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	a6 30       	cpi	r26, 0x06	; 6
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	23 e0       	ldi	r18, 0x03	; 3
      d6:	a6 e0       	ldi	r26, 0x06	; 6
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	a0 3e       	cpi	r26, 0xE0	; 224
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <main>
      e8:	0c 94 a8 24 	jmp	0x4950	; 0x4950 <_exit>

000000ec <__bad_interrupt>:
      ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <adc_measurement_init>:
volatile bool new_data_available_to_transmit;
volatile bool conversionIsInProgress;
volatile bool enabled;
volatile bool first_channel;

void adc_measurement_init() {
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
	
	/** setting as input */
	DDRA&=~(1<<PINA6);
      f8:	8a e3       	ldi	r24, 0x3A	; 58
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	2a e3       	ldi	r18, 0x3A	; 58
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	f9 01       	movw	r30, r18
     102:	20 81       	ld	r18, Z
     104:	2f 7b       	andi	r18, 0xBF	; 191
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
	DDRA&=~(1<<PINA7);
     10a:	8a e3       	ldi	r24, 0x3A	; 58
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	2a e3       	ldi	r18, 0x3A	; 58
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	f9 01       	movw	r30, r18
     114:	20 81       	ld	r18, Z
     116:	2f 77       	andi	r18, 0x7F	; 127
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18

	/** selecting ref voltage to AVCC */
	//ADMUX&=~(1<<REFS1);
	ADMUX|=(1<<REFS0);
     11c:	87 e2       	ldi	r24, 0x27	; 39
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	27 e2       	ldi	r18, 0x27	; 39
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	f9 01       	movw	r30, r18
     126:	20 81       	ld	r18, Z
     128:	20 64       	ori	r18, 0x40	; 64
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
	ADMUX|=(1<<REFS1);
     12e:	87 e2       	ldi	r24, 0x27	; 39
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	27 e2       	ldi	r18, 0x27	; 39
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	f9 01       	movw	r30, r18
     138:	20 81       	ld	r18, Z
     13a:	20 68       	ori	r18, 0x80	; 128
     13c:	fc 01       	movw	r30, r24
     13e:	20 83       	st	Z, r18

	/** enabling ADC */
	ADCSRA|=(1<<ADEN);
     140:	86 e2       	ldi	r24, 0x26	; 38
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	26 e2       	ldi	r18, 0x26	; 38
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	f9 01       	movw	r30, r18
     14a:	20 81       	ld	r18, Z
     14c:	20 68       	ori	r18, 0x80	; 128
     14e:	fc 01       	movw	r30, r24
     150:	20 83       	st	Z, r18
	
	/** enabling interrupt service */
	ADCSRA|=(1<<ADIE);
     152:	86 e2       	ldi	r24, 0x26	; 38
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	26 e2       	ldi	r18, 0x26	; 38
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	f9 01       	movw	r30, r18
     15c:	20 81       	ld	r18, Z
     15e:	28 60       	ori	r18, 0x08	; 8
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18

	/** selecting clock devision, 12  */
	ADCSRA|=(1<<ADPS2);
     164:	86 e2       	ldi	r24, 0x26	; 38
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	26 e2       	ldi	r18, 0x26	; 38
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	24 60       	ori	r18, 0x04	; 4
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
	ADCSRA|=(1<<ADPS1);
     176:	86 e2       	ldi	r24, 0x26	; 38
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	26 e2       	ldi	r18, 0x26	; 38
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	f9 01       	movw	r30, r18
     180:	20 81       	ld	r18, Z
     182:	22 60       	ori	r18, 0x02	; 2
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
	ADCSRA|=(1<<ADPS0);
     188:	86 e2       	ldi	r24, 0x26	; 38
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	26 e2       	ldi	r18, 0x26	; 38
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	f9 01       	movw	r30, r18
     192:	20 81       	ld	r18, Z
     194:	21 60       	ori	r18, 0x01	; 1
     196:	fc 01       	movw	r30, r24
     198:	20 83       	st	Z, r18
	
	conversionIsInProgress = false;
     19a:	10 92 4b 01 	sts	0x014B, r1
}
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <measure>:

// starts the first conversion, the second will be started in the ISR
void measure() {
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
	
		conversionIsInProgress = true;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 4b 01 	sts	0x014B, r24
		ADMUX&= 0xf8;
     1b2:	87 e2       	ldi	r24, 0x27	; 39
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	27 e2       	ldi	r18, 0x27	; 39
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	f9 01       	movw	r30, r18
     1bc:	20 81       	ld	r18, Z
     1be:	28 7f       	andi	r18, 0xF8	; 248
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
		ADMUX|= 0x06;
     1c4:	87 e2       	ldi	r24, 0x27	; 39
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	27 e2       	ldi	r18, 0x27	; 39
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	f9 01       	movw	r30, r18
     1ce:	20 81       	ld	r18, Z
     1d0:	26 60       	ori	r18, 0x06	; 6
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
		first_channel = true;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 4d 01 	sts	0x014D, r24
		ADCSRA |= (1<<ADSC);		
     1dc:	86 e2       	ldi	r24, 0x26	; 38
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	26 e2       	ldi	r18, 0x26	; 38
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	f9 01       	movw	r30, r18
     1e6:	20 81       	ld	r18, Z
     1e8:	20 64       	ori	r18, 0x40	; 64
     1ea:	fc 01       	movw	r30, r24
     1ec:	20 83       	st	Z, r18
	
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <handleMeasurement>:


void handleMeasurement() {
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
	
	 if (enable_features.adc)
     1fc:	80 91 47 01 	lds	r24, 0x0147
     200:	88 23       	and	r24, r24
     202:	51 f0       	breq	.+20     	; 0x218 <handleMeasurement+0x24>
	{

		if (conversionIsInProgress==false)
     204:	90 91 4b 01 	lds	r25, 0x014B
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	89 27       	eor	r24, r25
     20c:	88 23       	and	r24, r24
     20e:	19 f0       	breq	.+6      	; 0x216 <handleMeasurement+0x22>
		{
			measure();
     210:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <measure>
     214:	01 c0       	rjmp	.+2      	; 0x218 <handleMeasurement+0x24>
			} else {
			return;
     216:	00 00       	nop
		}
	}
	
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <send_adc_value_to_pc>:

 
void send_adc_value_to_pc() {	
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	29 97       	sbiw	r28, 0x09	; 9
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
	if (new_data_available_to_transmit)
     232:	80 91 5b 01 	lds	r24, 0x015B
     236:	88 23       	and	r24, r24
     238:	21 f1       	breq	.+72     	; 0x282 <send_adc_value_to_pc+0x64>
	{
		new_data_available_to_transmit = false;
     23a:	10 92 5b 01 	sts	0x015B, r1
		task_t adc_value_task;
		adc_value_task.data.command = ADC1;
     23e:	8c e3       	ldi	r24, 0x3C	; 60
     240:	89 83       	std	Y+1, r24	; 0x01
		adc_value_task.data.timestamp = 0;
     242:	1a 82       	std	Y+2, r1	; 0x02
     244:	1b 82       	std	Y+3, r1	; 0x03
     246:	1c 82       	std	Y+4, r1	; 0x04
     248:	1d 82       	std	Y+5, r1	; 0x05
		adc_value_task.data.u8[0] = result0 & 0xff;
     24a:	80 91 50 01 	lds	r24, 0x0150
     24e:	90 91 51 01 	lds	r25, 0x0151
     252:	8e 83       	std	Y+6, r24	; 0x06
		adc_value_task.data.u8[1] = result0 >>8; 
     254:	80 91 50 01 	lds	r24, 0x0150
     258:	90 91 51 01 	lds	r25, 0x0151
     25c:	89 2f       	mov	r24, r25
     25e:	99 27       	eor	r25, r25
     260:	8f 83       	std	Y+7, r24	; 0x07
		adc_value_task.data.u8[2] = result1 & 0xff;
     262:	80 91 4e 01 	lds	r24, 0x014E
     266:	90 91 4f 01 	lds	r25, 0x014F
     26a:	88 87       	std	Y+8, r24	; 0x08
		adc_value_task.data.u8[3] = result1 >>8;
     26c:	80 91 4e 01 	lds	r24, 0x014E
     270:	90 91 4f 01 	lds	r25, 0x014F
     274:	89 2f       	mov	r24, r25
     276:	99 27       	eor	r25, r25
     278:	89 87       	std	Y+9, r24	; 0x09
		add_task(&adc_value_task);	
     27a:	ce 01       	movw	r24, r28
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
	}
}
     282:	29 96       	adiw	r28, 0x09	; 9
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <communication_init>:
* \param
*
* \return void
*/
void communication_init(task_t *task)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	2b 97       	sbiw	r28, 0x0b	; 11
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	9b 87       	std	Y+11, r25	; 0x0b
     2aa:	8a 87       	std	Y+10, r24	; 0x0a
	if (task->data.value == 0)
     2ac:	8a 85       	ldd	r24, Y+10	; 0x0a
     2ae:	9b 85       	ldd	r25, Y+11	; 0x0b
     2b0:	fc 01       	movw	r30, r24
     2b2:	85 81       	ldd	r24, Z+5	; 0x05
     2b4:	96 81       	ldd	r25, Z+6	; 0x06
     2b6:	a7 81       	ldd	r26, Z+7	; 0x07
     2b8:	b0 85       	ldd	r27, Z+8	; 0x08
     2ba:	00 97       	sbiw	r24, 0x00	; 0
     2bc:	a1 05       	cpc	r26, r1
     2be:	b1 05       	cpc	r27, r1
     2c0:	01 f5       	brne	.+64     	; 0x302 <communication_init+0x6e>
	{
		task_t comm_init = {.data.command = ACK_INIT_CONN, .data.value = get_task_number()};
     2c2:	29 e0       	ldi	r18, 0x09	; 9
     2c4:	ce 01       	movw	r24, r28
     2c6:	01 96       	adiw	r24, 0x01	; 1
     2c8:	fc 01       	movw	r30, r24
     2ca:	32 2f       	mov	r19, r18
     2cc:	11 92       	st	Z+, r1
     2ce:	3a 95       	dec	r19
     2d0:	e9 f7       	brne	.-6      	; 0x2cc <communication_init+0x38>
     2d2:	82 e0       	ldi	r24, 0x02	; 2
     2d4:	89 83       	std	Y+1, r24	; 0x01
     2d6:	0e 94 87 20 	call	0x410e	; 0x410e <get_task_number>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	8e 83       	std	Y+6, r24	; 0x06
     2e0:	9f 83       	std	Y+7, r25	; 0x07
     2e2:	a8 87       	std	Y+8, r26	; 0x08
     2e4:	b9 87       	std	Y+9, r27	; 0x09
		status.system.connected = true;
     2e6:	80 91 be 01 	lds	r24, 0x01BE
     2ea:	81 60       	ori	r24, 0x01	; 1
     2ec:	80 93 be 01 	sts	0x01BE, r24
		clear_task_fifo();
     2f0:	00 00       	nop
     2f2:	0e 94 03 21 	call	0x4206	; 0x4206 <delete_task>
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <communication_init+0x5e>
		add_task(&comm_init);
     2fa:	ce 01       	movw	r24, r28
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
	}
}
     302:	2b 96       	adiw	r28, 0x0b	; 11
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	de bf       	out	0x3e, r29	; 62
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <stop>:
* \param task Used to specify a pointer to a specific received task.
*
* \return void
*/
void stop(task_t *task)
{
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	00 d0       	rcall	.+0      	; 0x31a <stop+0x6>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	9a 83       	std	Y+2, r25	; 0x02
     320:	89 83       	std	Y+1, r24	; 0x01
	if (task->data.value == 0)
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	9a 81       	ldd	r25, Y+2	; 0x02
     326:	fc 01       	movw	r30, r24
     328:	85 81       	ldd	r24, Z+5	; 0x05
     32a:	96 81       	ldd	r25, Z+6	; 0x06
     32c:	a7 81       	ldd	r26, Z+7	; 0x07
     32e:	b0 85       	ldd	r27, Z+8	; 0x08
     330:	00 97       	sbiw	r24, 0x00	; 0
     332:	a1 05       	cpc	r26, r1
     334:	b1 05       	cpc	r27, r1
     336:	29 f4       	brne	.+10     	; 0x342 <stop+0x2e>
	{
		status.system.connected = false;
     338:	80 91 be 01 	lds	r24, 0x01BE
     33c:	8e 7f       	andi	r24, 0xFE	; 254
     33e:	80 93 be 01 	sts	0x01BE, r24
	}
}
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <ping>:
* \param task Used to specify a pointer to a specific received task.
*
* \return void
*/
void ping(void)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
     354:	29 97       	sbiw	r28, 0x09	; 9
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
	
	read_switches();
     360:	89 e3       	ldi	r24, 0x39	; 57
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	fc 01       	movw	r30, r24
     366:	80 81       	ld	r24, Z
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	8f 73       	andi	r24, 0x3F	; 63
     36e:	99 27       	eor	r25, r25
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	28 2f       	mov	r18, r24
     376:	86 e3       	ldi	r24, 0x36	; 54
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	fc 01       	movw	r30, r24
     37c:	80 81       	ld	r24, Z
     37e:	81 70       	andi	r24, 0x01	; 1
     380:	82 2b       	or	r24, r18
     382:	80 93 87 01 	sts	0x0187, r24
	task_t ping = {.data.command = PING, .data.value = led.array/*get_task_number()*/};	
     386:	29 e0       	ldi	r18, 0x09	; 9
     388:	ce 01       	movw	r24, r28
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	fc 01       	movw	r30, r24
     38e:	32 2f       	mov	r19, r18
     390:	11 92       	st	Z+, r1
     392:	3a 95       	dec	r19
     394:	e9 f7       	brne	.-6      	; 0x390 <ping+0x44>
     396:	83 e0       	ldi	r24, 0x03	; 3
     398:	89 83       	std	Y+1, r24	; 0x01
     39a:	80 91 87 01 	lds	r24, 0x0187
     39e:	88 2f       	mov	r24, r24
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	a0 e0       	ldi	r26, 0x00	; 0
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	8e 83       	std	Y+6, r24	; 0x06
     3a8:	9f 83       	std	Y+7, r25	; 0x07
     3aa:	a8 87       	std	Y+8, r26	; 0x08
     3ac:	b9 87       	std	Y+9, r27	; 0x09
	add_task(&ping);
     3ae:	ce 01       	movw	r24, r28
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
     3b6:	29 96       	adiw	r28, 0x09	; 9
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	f8 94       	cli
     3bc:	de bf       	out	0x3e, r29	; 62
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	cd bf       	out	0x3d, r28	; 61
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <com_prot_task>:
* \param
*
* \return void
*/
void com_prot_task(void)
{
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
	static task_t *tx_task;
	static timer_t ping_tmr;
	
	if (status.system.connected==true)
     3d0:	80 91 be 01 	lds	r24, 0x01BE
     3d4:	81 70       	andi	r24, 0x01	; 1
     3d6:	88 23       	and	r24, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <com_prot_task+0x14>
     3da:	42 c0       	rjmp	.+132    	; 0x460 <com_prot_task+0x98>
	{
		if (tmr_exp(&ping_tmr)) //send ping message every sec
     3dc:	86 e0       	ldi	r24, 0x06	; 6
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
     3e4:	88 23       	and	r24, r24
     3e6:	99 f0       	breq	.+38     	; 0x40e <com_prot_task+0x46>
		{
			tmr_start(&ping_tmr,SEC1);
     3e8:	48 ee       	ldi	r20, 0xE8	; 232
     3ea:	53 e0       	ldi	r21, 0x03	; 3
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	86 e0       	ldi	r24, 0x06	; 6
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
			ping();
     3f8:	0e 94 a6 01 	call	0x34c	; 0x34c <ping>
			led_off();
     3fc:	88 e3       	ldi	r24, 0x38	; 56
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	28 e3       	ldi	r18, 0x38	; 56
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	24 60       	ori	r18, 0x04	; 4
     40a:	fc 01       	movw	r30, r24
     40c:	20 83       	st	Z, r18
		}
		if (status.system.sending_task == false) //check if a transmission is in progress
     40e:	80 91 be 01 	lds	r24, 0x01BE
     412:	82 70       	andi	r24, 0x02	; 2
     414:	88 23       	and	r24, r24
     416:	21 f5       	brne	.+72     	; 0x460 <com_prot_task+0x98>
		{
			tx_task = delete_task();
     418:	0e 94 03 21 	call	0x4206	; 0x4206 <delete_task>
     41c:	90 93 10 01 	sts	0x0110, r25
     420:	80 93 0f 01 	sts	0x010F, r24
			
			if (tx_task != NULL) // manipulation on a null pointer results in memory damage
     424:	80 91 0f 01 	lds	r24, 0x010F
     428:	90 91 10 01 	lds	r25, 0x0110
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	c1 f0       	breq	.+48     	; 0x460 <com_prot_task+0x98>
			{
				if (tx_task->data.command == STRING)
     430:	80 91 0f 01 	lds	r24, 0x010F
     434:	90 91 10 01 	lds	r25, 0x0110
     438:	fc 01       	movw	r30, r24
     43a:	80 81       	ld	r24, Z
     43c:	88 23       	and	r24, r24
     43e:	51 f4       	brne	.+20     	; 0x454 <com_prot_task+0x8c>
				{
					USART_transmit_string(tx_task->data.str);
     440:	80 91 0f 01 	lds	r24, 0x010F
     444:	90 91 10 01 	lds	r25, 0x0110
     448:	fc 01       	movw	r30, r24
     44a:	85 81       	ldd	r24, Z+5	; 0x05
     44c:	96 81       	ldd	r25, Z+6	; 0x06
     44e:	0e 94 0f 23 	call	0x461e	; 0x461e <USART_transmit_string>
     452:	06 c0       	rjmp	.+12     	; 0x460 <com_prot_task+0x98>
				}
				else
				{
					USART_transmit_command(tx_task);
     454:	80 91 0f 01 	lds	r24, 0x010F
     458:	90 91 10 01 	lds	r25, 0x0110
     45c:	0e 94 b4 22 	call	0x4568	; 0x4568 <USART_transmit_command>
				}
			}
		}
	}
	if (status.system.task_received==true)
     460:	80 91 be 01 	lds	r24, 0x01BE
     464:	84 70       	andi	r24, 0x04	; 4
     466:	88 23       	and	r24, r24
     468:	a1 f0       	breq	.+40     	; 0x492 <com_prot_task+0xca>
	{
		status.system.task_received=false;
     46a:	80 91 be 01 	lds	r24, 0x01BE
     46e:	8b 7f       	andi	r24, 0xFB	; 251
     470:	80 93 be 01 	sts	0x01BE, r24
		do_task[usart_rx_task.data.command](&usart_rx_task);
     474:	80 91 ca 03 	lds	r24, 0x03CA
     478:	88 2f       	mov	r24, r24
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	8e 53       	subi	r24, 0x3E	; 62
     482:	9e 4f       	sbci	r25, 0xFE	; 254
     484:	fc 01       	movw	r30, r24
     486:	20 81       	ld	r18, Z
     488:	31 81       	ldd	r19, Z+1	; 0x01
     48a:	8a ec       	ldi	r24, 0xCA	; 202
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	f9 01       	movw	r30, r18
     490:	09 95       	icall
	}
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <state_idle_control_logic>:
bool state_changed = false;


volatile void (*control)();

void state_idle_control_logic() {
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
	// left bank intentionally 
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <state_find_track_control_logic>:

void state_find_track_control_logic() {			
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	2a 97       	sbiw	r28, 0x0a	; 10
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
	if (state_find_track_data.not_first_run == false){
     4ba:	90 91 81 01 	lds	r25, 0x0181
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	88 23       	and	r24, r24
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <state_find_track_control_logic+0x22>
     4c6:	5c c0       	rjmp	.+184    	; 0x580 <state_find_track_control_logic+0xda>
		status.system.start_line=false;
     4c8:	80 91 be 01 	lds	r24, 0x01BE
     4cc:	8f 7e       	andi	r24, 0xEF	; 239
     4ce:	80 93 be 01 	sts	0x01BE, r24
		state_find_track_data.not_first_run = true;
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 81 01 	sts	0x0181, r24
		task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_IDLE};
     4d8:	84 e5       	ldi	r24, 0x54	; 84
     4da:	8a 83       	std	Y+2, r24	; 0x02
     4dc:	1b 82       	std	Y+3, r1	; 0x03
     4de:	1c 82       	std	Y+4, r1	; 0x04
     4e0:	1d 82       	std	Y+5, r1	; 0x05
     4e2:	1e 82       	std	Y+6, r1	; 0x06
     4e4:	1f 82       	std	Y+7, r1	; 0x07
     4e6:	18 86       	std	Y+8, r1	; 0x08
     4e8:	19 86       	std	Y+9, r1	; 0x09
     4ea:	1a 86       	std	Y+10, r1	; 0x0a
		add_task(&system_state);
     4ec:	ce 01       	movw	r24, r28
     4ee:	02 96       	adiw	r24, 0x02	; 2
     4f0:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
		set_m_forward();
     4f4:	82 e3       	ldi	r24, 0x32	; 50
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	22 e3       	ldi	r18, 0x32	; 50
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	f9 01       	movw	r30, r18
     4fe:	20 81       	ld	r18, Z
     500:	20 61       	ori	r18, 0x10	; 16
     502:	fc 01       	movw	r30, r24
     504:	20 83       	st	Z, r18
     506:	85 e3       	ldi	r24, 0x35	; 53
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	25 e3       	ldi	r18, 0x35	; 53
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	f9 01       	movw	r30, r18
     510:	20 81       	ld	r18, Z
     512:	2e 7f       	andi	r18, 0xFE	; 254
     514:	fc 01       	movw	r30, r24
     516:	20 83       	st	Z, r18
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	80 93 94 01 	sts	0x0194, r24
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 93 01 	sts	0x0193, r24
     524:	82 e3       	ldi	r24, 0x32	; 50
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	22 e3       	ldi	r18, 0x32	; 50
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	f9 01       	movw	r30, r18
     52e:	20 81       	ld	r18, Z
     530:	20 62       	ori	r18, 0x20	; 32
     532:	fc 01       	movw	r30, r24
     534:	20 83       	st	Z, r18
     536:	82 e3       	ldi	r24, 0x32	; 50
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	22 e3       	ldi	r18, 0x32	; 50
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	f9 01       	movw	r30, r18
     540:	20 81       	ld	r18, Z
     542:	2f 7b       	andi	r18, 0xBF	; 191
     544:	fc 01       	movw	r30, r24
     546:	20 83       	st	Z, r18
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	80 93 a5 01 	sts	0x01A5, r24
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	80 93 a4 01 	sts	0x01A4, r24
		l_motor.rpm = 100;
     554:	84 e6       	ldi	r24, 0x64	; 100
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	90 93 96 01 	sts	0x0196, r25
     55c:	80 93 95 01 	sts	0x0195, r24
		r_motor.rpm = 100;
     560:	84 e6       	ldi	r24, 0x64	; 100
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	90 93 a7 01 	sts	0x01A7, r25
     568:	80 93 a6 01 	sts	0x01A6, r24
		state_find_track_data.exp = false;
     56c:	10 92 82 01 	sts	0x0182, r1
		tmr_start(&state_timer,STATE_FIND_TRACK_SENSOR_BLACKOUT_INTERVAL); 
     570:	40 ed       	ldi	r20, 0xD0	; 208
     572:	57 e0       	ldi	r21, 0x07	; 7
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	8a e6       	ldi	r24, 0x6A	; 106
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
	}
	
	if (state_find_track_data.exp == true || tmr_exp(&state_timer)){
     580:	80 91 82 01 	lds	r24, 0x0182
     584:	88 23       	and	r24, r24
     586:	31 f4       	brne	.+12     	; 0x594 <state_find_track_control_logic+0xee>
     588:	8a e6       	ldi	r24, 0x6A	; 106
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
     590:	88 23       	and	r24, r24
     592:	79 f1       	breq	.+94     	; 0x5f2 <state_find_track_control_logic+0x14c>
		state_find_track_data.exp = true;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	80 93 82 01 	sts	0x0182, r24
		read_switches();
     59a:	89 e3       	ldi	r24, 0x39	; 57
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	fc 01       	movw	r30, r24
     5a0:	80 81       	ld	r24, Z
     5a2:	88 2f       	mov	r24, r24
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	8f 73       	andi	r24, 0x3F	; 63
     5a8:	99 27       	eor	r25, r25
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	28 2f       	mov	r18, r24
     5b0:	86 e3       	ldi	r24, 0x36	; 54
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	80 81       	ld	r24, Z
     5b8:	81 70       	andi	r24, 0x01	; 1
     5ba:	82 2b       	or	r24, r18
     5bc:	80 93 87 01 	sts	0x0187, r24
		uint8_t sensor_value = led.array;
     5c0:	80 91 87 01 	lds	r24, 0x0187
     5c4:	89 83       	std	Y+1, r24	; 0x01
		if ((sensor_value & 0x3f)!= 0x3f)
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	8f 73       	andi	r24, 0x3F	; 63
     5ce:	99 27       	eor	r25, r25
     5d0:	8f 33       	cpi	r24, 0x3F	; 63
     5d2:	91 05       	cpc	r25, r1
     5d4:	69 f0       	breq	.+26     	; 0x5f0 <state_find_track_control_logic+0x14a>
		{
			state_find_track_data.exp=false;
     5d6:	10 92 82 01 	sts	0x0182, r1
			state_find_track_go_a_bit_more_control_data.not_first_run=false;
     5da:	10 92 85 01 	sts	0x0185, r1
			set_state(state_find_track_go_a_bit_more_control_logic);
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 11 01 	sts	0x0111, r24
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	93 e0       	ldi	r25, 0x03	; 3
     5e8:	90 93 5f 01 	sts	0x015F, r25
     5ec:	80 93 5e 01 	sts	0x015E, r24
		}
		return;	
     5f0:	00 00       	nop
	}
}
     5f2:	2a 96       	adiw	r28, 0x0a	; 10
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <state_find_track_go_a_bit_more_control_logic>:

void state_find_track_go_a_bit_more_control_logic() {
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	29 97       	sbiw	r28, 0x09	; 9
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
		if (state_find_track_go_a_bit_more_control_data.not_first_run == false){
     618:	90 91 85 01 	lds	r25, 0x0185
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	89 27       	eor	r24, r25
     620:	88 23       	and	r24, r24
     622:	09 f4       	brne	.+2      	; 0x626 <state_find_track_go_a_bit_more_control_logic+0x22>
     624:	50 c0       	rjmp	.+160    	; 0x6c6 <state_find_track_go_a_bit_more_control_logic+0xc2>
				state_find_track_go_a_bit_more_control_data.not_first_run = true;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	80 93 85 01 	sts	0x0185, r24
				task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_FIND_GO_A_BIT_MORE};
     62c:	29 e0       	ldi	r18, 0x09	; 9
     62e:	e6 e7       	ldi	r30, 0x76	; 118
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	dc 01       	movw	r26, r24
     638:	01 90       	ld	r0, Z+
     63a:	0d 92       	st	X+, r0
     63c:	2a 95       	dec	r18
     63e:	e1 f7       	brne	.-8      	; 0x638 <state_find_track_go_a_bit_more_control_logic+0x34>
				add_task(&system_state);
     640:	ce 01       	movw	r24, r28
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
				set_m_forward();
     648:	82 e3       	ldi	r24, 0x32	; 50
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	22 e3       	ldi	r18, 0x32	; 50
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	f9 01       	movw	r30, r18
     652:	20 81       	ld	r18, Z
     654:	20 61       	ori	r18, 0x10	; 16
     656:	fc 01       	movw	r30, r24
     658:	20 83       	st	Z, r18
     65a:	85 e3       	ldi	r24, 0x35	; 53
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	25 e3       	ldi	r18, 0x35	; 53
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	f9 01       	movw	r30, r18
     664:	20 81       	ld	r18, Z
     666:	2e 7f       	andi	r18, 0xFE	; 254
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 93 94 01 	sts	0x0194, r24
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 93 01 	sts	0x0193, r24
     678:	82 e3       	ldi	r24, 0x32	; 50
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	22 e3       	ldi	r18, 0x32	; 50
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	f9 01       	movw	r30, r18
     682:	20 81       	ld	r18, Z
     684:	20 62       	ori	r18, 0x20	; 32
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
     68a:	82 e3       	ldi	r24, 0x32	; 50
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	22 e3       	ldi	r18, 0x32	; 50
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	f9 01       	movw	r30, r18
     694:	20 81       	ld	r18, Z
     696:	2f 7b       	andi	r18, 0xBF	; 191
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 a5 01 	sts	0x01A5, r24
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 a4 01 	sts	0x01A4, r24
				l_motor.rpm = 0;
     6a8:	10 92 96 01 	sts	0x0196, r1
     6ac:	10 92 95 01 	sts	0x0195, r1
				r_motor.rpm = 0;
     6b0:	10 92 a7 01 	sts	0x01A7, r1
     6b4:	10 92 a6 01 	sts	0x01A6, r1
				//set_movement(0x32,C_FIND_BIT_MORE,BACKWARD);
				set_movement(0x32,C90,LEFT);
     6b8:	42 e0       	ldi	r20, 0x02	; 2
     6ba:	60 ee       	ldi	r22, 0xE0	; 224
     6bc:	71 e0       	ldi	r23, 0x01	; 1
     6be:	82 e3       	ldi	r24, 0x32	; 50
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
		}
		if (l_motor.corner==C0 && r_motor.corner==C0)
     6c6:	80 91 8b 01 	lds	r24, 0x018B
     6ca:	90 91 8c 01 	lds	r25, 0x018C
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	89 f4       	brne	.+34     	; 0x6f4 <state_find_track_go_a_bit_more_control_logic+0xf0>
     6d2:	80 91 9c 01 	lds	r24, 0x019C
     6d6:	90 91 9d 01 	lds	r25, 0x019D
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	59 f4       	brne	.+22     	; 0x6f4 <state_find_track_go_a_bit_more_control_logic+0xf0>
		{
			state_find_track_turn_left_control_data.not_first_run=false;
     6de:	10 92 83 01 	sts	0x0183, r1
			set_state(state_find_track_turn_left_control_logic);
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 11 01 	sts	0x0111, r24
     6e8:	83 e8       	ldi	r24, 0x83	; 131
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	90 93 5f 01 	sts	0x015F, r25
     6f0:	80 93 5e 01 	sts	0x015E, r24
		}
	
}
     6f4:	29 96       	adiw	r28, 0x09	; 9
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <state_find_track_turn_left_control_logic>:

void state_find_track_turn_left_control_logic() {
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	29 97       	sbiw	r28, 0x09	; 9
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
			if (state_find_track_go_a_bit_more_control_data.not_first_run == false){
     71a:	90 91 85 01 	lds	r25, 0x0185
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	89 27       	eor	r24, r25
     722:	88 23       	and	r24, r24
     724:	09 f4       	brne	.+2      	; 0x728 <state_find_track_turn_left_control_logic+0x22>
     726:	4d c0       	rjmp	.+154    	; 0x7c2 <state_find_track_turn_left_control_logic+0xbc>
				state_find_track_go_a_bit_more_control_data.not_first_run = true;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 85 01 	sts	0x0185, r24
				task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_FIND_LEFT_TURN};
     72e:	29 e0       	ldi	r18, 0x09	; 9
     730:	ef e7       	ldi	r30, 0x7F	; 127
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	ce 01       	movw	r24, r28
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	dc 01       	movw	r26, r24
     73a:	01 90       	ld	r0, Z+
     73c:	0d 92       	st	X+, r0
     73e:	2a 95       	dec	r18
     740:	e1 f7       	brne	.-8      	; 0x73a <state_find_track_turn_left_control_logic+0x34>
				add_task(&system_state);
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
				set_m_forward();
     74a:	82 e3       	ldi	r24, 0x32	; 50
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	22 e3       	ldi	r18, 0x32	; 50
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	f9 01       	movw	r30, r18
     754:	20 81       	ld	r18, Z
     756:	20 61       	ori	r18, 0x10	; 16
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
     75c:	85 e3       	ldi	r24, 0x35	; 53
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	25 e3       	ldi	r18, 0x35	; 53
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	f9 01       	movw	r30, r18
     766:	20 81       	ld	r18, Z
     768:	2e 7f       	andi	r18, 0xFE	; 254
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 93 94 01 	sts	0x0194, r24
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 93 01 	sts	0x0193, r24
     77a:	82 e3       	ldi	r24, 0x32	; 50
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	22 e3       	ldi	r18, 0x32	; 50
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	20 62       	ori	r18, 0x20	; 32
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
     78c:	82 e3       	ldi	r24, 0x32	; 50
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	22 e3       	ldi	r18, 0x32	; 50
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	2f 7b       	andi	r18, 0xBF	; 191
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	80 93 a5 01 	sts	0x01A5, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 a4 01 	sts	0x01A4, r24
				l_motor.rpm = 20;
     7aa:	84 e1       	ldi	r24, 0x14	; 20
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	90 93 96 01 	sts	0x0196, r25
     7b2:	80 93 95 01 	sts	0x0195, r24
				r_motor.rpm = 20;
     7b6:	84 e1       	ldi	r24, 0x14	; 20
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	90 93 a7 01 	sts	0x01A7, r25
     7be:	80 93 a6 01 	sts	0x01A6, r24
		}
}
     7c2:	29 96       	adiw	r28, 0x09	; 9
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <state_follow_track_1_control_logic>:


void state_follow_track_1_control_logic() { //TODO: does it need to be called more than once
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	29 97       	sbiw	r28, 0x09	; 9
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
		task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=2};
     7e8:	29 e0       	ldi	r18, 0x09	; 9
     7ea:	e6 e7       	ldi	r30, 0x76	; 118
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	dc 01       	movw	r26, r24
     7f4:	01 90       	ld	r0, Z+
     7f6:	0d 92       	st	X+, r0
     7f8:	2a 95       	dec	r18
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <state_follow_track_1_control_logic+0x20>
		add_task(&system_state);
     7fc:	ce 01       	movw	r24, r28
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
		set_m_backward();
     804:	85 e3       	ldi	r24, 0x35	; 53
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	25 e3       	ldi	r18, 0x35	; 53
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	21 60       	ori	r18, 0x01	; 1
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
     816:	82 e3       	ldi	r24, 0x32	; 50
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	22 e3       	ldi	r18, 0x32	; 50
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	f9 01       	movw	r30, r18
     820:	20 81       	ld	r18, Z
     822:	2f 7e       	andi	r18, 0xEF	; 239
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	80 93 94 01 	sts	0x0194, r24
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	80 93 93 01 	sts	0x0193, r24
     834:	82 e3       	ldi	r24, 0x32	; 50
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	22 e3       	ldi	r18, 0x32	; 50
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	f9 01       	movw	r30, r18
     83e:	20 81       	ld	r18, Z
     840:	20 64       	ori	r18, 0x40	; 64
     842:	fc 01       	movw	r30, r24
     844:	20 83       	st	Z, r18
     846:	82 e3       	ldi	r24, 0x32	; 50
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	22 e3       	ldi	r18, 0x32	; 50
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	f9 01       	movw	r30, r18
     850:	20 81       	ld	r18, Z
     852:	2f 7d       	andi	r18, 0xDF	; 223
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	80 93 a5 01 	sts	0x01A5, r24
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	80 93 a4 01 	sts	0x01A4, r24
		l_motor.rpm = 0;
     864:	10 92 96 01 	sts	0x0196, r1
     868:	10 92 95 01 	sts	0x0195, r1
		r_motor.rpm = 0;
     86c:	10 92 a7 01 	sts	0x01A7, r1
     870:	10 92 a6 01 	sts	0x01A6, r1
}
     874:	29 96       	adiw	r28, 0x09	; 9
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <state_y_intersection_control_logic>:

void state_y_intersection_control_logic() {
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
	
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <state_follow_track_2_control_logic>:

void state_follow_track_2_control_logic() {
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
	
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <state_wait_before_corner_logic>:

void state_wait_before_corner_logic() {
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	29 97       	sbiw	r28, 0x09	; 9
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
	if (state_wait_before_corner_data.not_first_run == false){
     8b6:	90 91 73 01 	lds	r25, 0x0173
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	89 27       	eor	r24, r25
     8be:	88 23       	and	r24, r24
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <state_wait_before_corner_logic+0x22>
     8c2:	53 c0       	rjmp	.+166    	; 0x96a <state_wait_before_corner_logic+0xc8>
		state_wait_before_corner_data.not_first_run = true;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 73 01 	sts	0x0173, r24
		task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_WAIT_BEFORE_CORNER};
     8ca:	29 e0       	ldi	r18, 0x09	; 9
     8cc:	e8 e8       	ldi	r30, 0x88	; 136
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	dc 01       	movw	r26, r24
     8d6:	01 90       	ld	r0, Z+
     8d8:	0d 92       	st	X+, r0
     8da:	2a 95       	dec	r18
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <state_wait_before_corner_logic+0x34>
		add_task(&system_state);
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
		set_m_backward()
     8e6:	85 e3       	ldi	r24, 0x35	; 53
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	25 e3       	ldi	r18, 0x35	; 53
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	f9 01       	movw	r30, r18
     8f0:	20 81       	ld	r18, Z
     8f2:	21 60       	ori	r18, 0x01	; 1
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 83       	st	Z, r18
     8f8:	82 e3       	ldi	r24, 0x32	; 50
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	22 e3       	ldi	r18, 0x32	; 50
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	f9 01       	movw	r30, r18
     902:	20 81       	ld	r18, Z
     904:	2f 7e       	andi	r18, 0xEF	; 239
     906:	fc 01       	movw	r30, r24
     908:	20 83       	st	Z, r18
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	80 93 94 01 	sts	0x0194, r24
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	80 93 93 01 	sts	0x0193, r24
     916:	82 e3       	ldi	r24, 0x32	; 50
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	22 e3       	ldi	r18, 0x32	; 50
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	f9 01       	movw	r30, r18
     920:	20 81       	ld	r18, Z
     922:	20 64       	ori	r18, 0x40	; 64
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
     928:	82 e3       	ldi	r24, 0x32	; 50
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	22 e3       	ldi	r18, 0x32	; 50
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	2f 7d       	andi	r18, 0xDF	; 223
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	80 93 a5 01 	sts	0x01A5, r24
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	80 93 a4 01 	sts	0x01A4, r24
		l_motor.rpm = 0;
     946:	10 92 96 01 	sts	0x0196, r1
     94a:	10 92 95 01 	sts	0x0195, r1
		r_motor.rpm = 0;
     94e:	10 92 a7 01 	sts	0x01A7, r1
     952:	10 92 a6 01 	sts	0x01A6, r1
		tmr_start(&state_timer,STATE_WAIT_BEFORE_CORNER_INTERVAL);
     956:	48 eb       	ldi	r20, 0xB8	; 184
     958:	5b e0       	ldi	r21, 0x0B	; 11
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	8a e6       	ldi	r24, 0x6A	; 106
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
		return;
     966:	00 00       	nop
     968:	12 c0       	rjmp	.+36     	; 0x98e <state_wait_before_corner_logic+0xec>
	}
	
	if (tmr_exp(&state_timer)){
     96a:	8a e6       	ldi	r24, 0x6A	; 106
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
     972:	88 23       	and	r24, r24
     974:	61 f0       	breq	.+24     	; 0x98e <state_wait_before_corner_logic+0xec>
		set_state(state_approach_corner_logic);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 11 01 	sts	0x0111, r24
     97c:	80 ed       	ldi	r24, 0xD0	; 208
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	90 93 5f 01 	sts	0x015F, r25
     984:	80 93 5e 01 	sts	0x015E, r24
		state_approach_corner_data.not_first_run = false;
     988:	10 92 79 01 	sts	0x0179, r1
		return;
     98c:	00 00       	nop
	}	
}
     98e:	29 96       	adiw	r28, 0x09	; 9
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <state_approach_corner_logic>:

void state_approach_corner_logic() {
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	29 97       	sbiw	r28, 0x09	; 9
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
		if (state_approach_corner_data.not_first_run == false){
     9b4:	90 91 79 01 	lds	r25, 0x0179
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	89 27       	eor	r24, r25
     9bc:	88 23       	and	r24, r24
     9be:	09 f4       	brne	.+2      	; 0x9c2 <state_approach_corner_logic+0x22>
     9c0:	52 c0       	rjmp	.+164    	; 0xa66 <state_approach_corner_logic+0xc6>
		state_approach_corner_data.not_first_run = true;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 79 01 	sts	0x0179, r24
		enable_features.adc = true;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 47 01 	sts	0x0147, r24
		task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_APPROACH_CORNER};
     9ce:	29 e0       	ldi	r18, 0x09	; 9
     9d0:	e1 e9       	ldi	r30, 0x91	; 145
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	dc 01       	movw	r26, r24
     9da:	01 90       	ld	r0, Z+
     9dc:	0d 92       	st	X+, r0
     9de:	2a 95       	dec	r18
     9e0:	e1 f7       	brne	.-8      	; 0x9da <state_approach_corner_logic+0x3a>
		add_task(&system_state);
     9e2:	ce 01       	movw	r24, r28
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
		set_m_forward()
     9ea:	82 e3       	ldi	r24, 0x32	; 50
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	22 e3       	ldi	r18, 0x32	; 50
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	20 61       	ori	r18, 0x10	; 16
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
     9fc:	85 e3       	ldi	r24, 0x35	; 53
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	25 e3       	ldi	r18, 0x35	; 53
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	f9 01       	movw	r30, r18
     a06:	20 81       	ld	r18, Z
     a08:	2e 7f       	andi	r18, 0xFE	; 254
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 94 01 	sts	0x0194, r24
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 93 01 	sts	0x0193, r24
     a1a:	82 e3       	ldi	r24, 0x32	; 50
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	22 e3       	ldi	r18, 0x32	; 50
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	f9 01       	movw	r30, r18
     a24:	20 81       	ld	r18, Z
     a26:	20 62       	ori	r18, 0x20	; 32
     a28:	fc 01       	movw	r30, r24
     a2a:	20 83       	st	Z, r18
     a2c:	82 e3       	ldi	r24, 0x32	; 50
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	22 e3       	ldi	r18, 0x32	; 50
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	f9 01       	movw	r30, r18
     a36:	20 81       	ld	r18, Z
     a38:	2f 7b       	andi	r18, 0xBF	; 191
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 a5 01 	sts	0x01A5, r24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 a4 01 	sts	0x01A4, r24
		l_motor.rpm = 100;
     a4a:	84 e6       	ldi	r24, 0x64	; 100
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 96 01 	sts	0x0196, r25
     a52:	80 93 95 01 	sts	0x0195, r24
		r_motor.rpm = 100;
     a56:	84 e6       	ldi	r24, 0x64	; 100
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	90 93 a7 01 	sts	0x01A7, r25
     a5e:	80 93 a6 01 	sts	0x01A6, r24
		return;
     a62:	00 00       	nop
     a64:	5d c0       	rjmp	.+186    	; 0xb20 <state_approach_corner_logic+0x180>
	}
	
	if (new_data_available){
     a66:	80 91 4c 01 	lds	r24, 0x014C
     a6a:	88 23       	and	r24, r24
     a6c:	09 f4       	brne	.+2      	; 0xa70 <state_approach_corner_logic+0xd0>
     a6e:	58 c0       	rjmp	.+176    	; 0xb20 <state_approach_corner_logic+0x180>
		new_data_available = false;
     a70:	10 92 4c 01 	sts	0x014C, r1
		if (result0 > STATE_APPROACH_CORNER_MINIMAL_VOLTAGE-1 && result0 < STATE_APPROACH_CORNER_MAXIMAL_VOLTAGE+1)
     a74:	80 91 50 01 	lds	r24, 0x0150
     a78:	90 91 51 01 	lds	r25, 0x0151
     a7c:	80 39       	cpi	r24, 0x90	; 144
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	9f 07       	cpc	r25, r31
     a82:	08 f4       	brcc	.+2      	; 0xa86 <state_approach_corner_logic+0xe6>
     a84:	4d c0       	rjmp	.+154    	; 0xb20 <state_approach_corner_logic+0x180>
     a86:	80 91 50 01 	lds	r24, 0x0150
     a8a:	90 91 51 01 	lds	r25, 0x0151
     a8e:	89 3e       	cpi	r24, 0xE9	; 233
     a90:	23 e0       	ldi	r18, 0x03	; 3
     a92:	92 07       	cpc	r25, r18
     a94:	08 f0       	brcs	.+2      	; 0xa98 <state_approach_corner_logic+0xf8>
     a96:	44 c0       	rjmp	.+136    	; 0xb20 <state_approach_corner_logic+0x180>
		{
			set_m_backward()
     a98:	85 e3       	ldi	r24, 0x35	; 53
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	25 e3       	ldi	r18, 0x35	; 53
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	f9 01       	movw	r30, r18
     aa2:	20 81       	ld	r18, Z
     aa4:	21 60       	ori	r18, 0x01	; 1
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
     aaa:	82 e3       	ldi	r24, 0x32	; 50
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	22 e3       	ldi	r18, 0x32	; 50
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	2f 7e       	andi	r18, 0xEF	; 239
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	80 93 94 01 	sts	0x0194, r24
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	80 93 93 01 	sts	0x0193, r24
     ac8:	82 e3       	ldi	r24, 0x32	; 50
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	22 e3       	ldi	r18, 0x32	; 50
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	f9 01       	movw	r30, r18
     ad2:	20 81       	ld	r18, Z
     ad4:	20 64       	ori	r18, 0x40	; 64
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
     ada:	82 e3       	ldi	r24, 0x32	; 50
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	22 e3       	ldi	r18, 0x32	; 50
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	f9 01       	movw	r30, r18
     ae4:	20 81       	ld	r18, Z
     ae6:	2f 7d       	andi	r18, 0xDF	; 223
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	80 93 a5 01 	sts	0x01A5, r24
     af2:	8f ef       	ldi	r24, 0xFF	; 255
     af4:	80 93 a4 01 	sts	0x01A4, r24
			l_motor.rpm = 0;
     af8:	10 92 96 01 	sts	0x0196, r1
     afc:	10 92 95 01 	sts	0x0195, r1
			r_motor.rpm = 0;
     b00:	10 92 a7 01 	sts	0x01A7, r1
     b04:	10 92 a6 01 	sts	0x01A6, r1
			set_state(state_turn_after_found_corner_logic);
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 11 01 	sts	0x0111, r24
     b0e:	89 e9       	ldi	r24, 0x99	; 153
     b10:	95 e0       	ldi	r25, 0x05	; 5
     b12:	90 93 5f 01 	sts	0x015F, r25
     b16:	80 93 5e 01 	sts	0x015E, r24
			state_turn_after_found_corner_data.not_first_run = false;
     b1a:	10 92 5c 01 	sts	0x015C, r1
			return;
     b1e:	00 00       	nop
		}
	}
}
     b20:	29 96       	adiw	r28, 0x09	; 9
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <state_turn_after_found_corner_logic>:

void state_turn_after_found_corner_logic() {
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	cd b7       	in	r28, 0x3d	; 61
     b38:	de b7       	in	r29, 0x3e	; 62
     b3a:	29 97       	sbiw	r28, 0x09	; 9
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
		if (state_turn_after_found_corner_data.not_first_run == false){
     b46:	90 91 5c 01 	lds	r25, 0x015C
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	89 27       	eor	r24, r25
     b4e:	88 23       	and	r24, r24
     b50:	09 f4       	brne	.+2      	; 0xb54 <state_turn_after_found_corner_logic+0x22>
     b52:	55 c0       	rjmp	.+170    	; 0xbfe <state_turn_after_found_corner_logic+0xcc>
		state_turn_after_found_corner_data.not_first_run = true;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 5c 01 	sts	0x015C, r24
		task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_TURN_AFTER_FOUND_CORNER};
     b5a:	29 e0       	ldi	r18, 0x09	; 9
     b5c:	ea e9       	ldi	r30, 0x9A	; 154
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	ce 01       	movw	r24, r28
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	dc 01       	movw	r26, r24
     b66:	01 90       	ld	r0, Z+
     b68:	0d 92       	st	X+, r0
     b6a:	2a 95       	dec	r18
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <state_turn_after_found_corner_logic+0x34>
		add_task(&system_state);
     b6e:	ce 01       	movw	r24, r28
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
		tmr_start(&state_timer,STATE_TURN_AFTER_FOUND_CORNER_TURNING_INTERVAL);
     b76:	48 ee       	ldi	r20, 0xE8	; 232
     b78:	53 e0       	ldi	r21, 0x03	; 3
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	8a e6       	ldi	r24, 0x6A	; 106
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
		set_m_forward()
     b86:	82 e3       	ldi	r24, 0x32	; 50
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	22 e3       	ldi	r18, 0x32	; 50
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	f9 01       	movw	r30, r18
     b90:	20 81       	ld	r18, Z
     b92:	20 61       	ori	r18, 0x10	; 16
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18
     b98:	85 e3       	ldi	r24, 0x35	; 53
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	25 e3       	ldi	r18, 0x35	; 53
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	f9 01       	movw	r30, r18
     ba2:	20 81       	ld	r18, Z
     ba4:	2e 7f       	andi	r18, 0xFE	; 254
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	80 93 94 01 	sts	0x0194, r24
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 93 01 	sts	0x0193, r24
     bb6:	82 e3       	ldi	r24, 0x32	; 50
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	22 e3       	ldi	r18, 0x32	; 50
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	f9 01       	movw	r30, r18
     bc0:	20 81       	ld	r18, Z
     bc2:	20 62       	ori	r18, 0x20	; 32
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
     bc8:	82 e3       	ldi	r24, 0x32	; 50
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	22 e3       	ldi	r18, 0x32	; 50
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	f9 01       	movw	r30, r18
     bd2:	20 81       	ld	r18, Z
     bd4:	2f 7b       	andi	r18, 0xBF	; 191
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 83       	st	Z, r18
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 a5 01 	sts	0x01A5, r24
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 a4 01 	sts	0x01A4, r24
		l_motor.rpm = 100;
     be6:	84 e6       	ldi	r24, 0x64	; 100
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	90 93 96 01 	sts	0x0196, r25
     bee:	80 93 95 01 	sts	0x0195, r24
		r_motor.rpm = 0;
     bf2:	10 92 a7 01 	sts	0x01A7, r1
     bf6:	10 92 a6 01 	sts	0x01A6, r1
		return;
     bfa:	00 00       	nop
     bfc:	4b c0       	rjmp	.+150    	; 0xc94 <state_turn_after_found_corner_logic+0x162>
	}
	
	if (tmr_exp(&state_timer)){
     bfe:	8a e6       	ldi	r24, 0x6A	; 106
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
     c06:	88 23       	and	r24, r24
     c08:	09 f4       	brne	.+2      	; 0xc0c <state_turn_after_found_corner_logic+0xda>
     c0a:	44 c0       	rjmp	.+136    	; 0xc94 <state_turn_after_found_corner_logic+0x162>
		set_m_backward()
     c0c:	85 e3       	ldi	r24, 0x35	; 53
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	25 e3       	ldi	r18, 0x35	; 53
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	f9 01       	movw	r30, r18
     c16:	20 81       	ld	r18, Z
     c18:	21 60       	ori	r18, 0x01	; 1
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
     c1e:	82 e3       	ldi	r24, 0x32	; 50
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	22 e3       	ldi	r18, 0x32	; 50
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	f9 01       	movw	r30, r18
     c28:	20 81       	ld	r18, Z
     c2a:	2f 7e       	andi	r18, 0xEF	; 239
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 83       	st	Z, r18
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	80 93 94 01 	sts	0x0194, r24
     c36:	8f ef       	ldi	r24, 0xFF	; 255
     c38:	80 93 93 01 	sts	0x0193, r24
     c3c:	82 e3       	ldi	r24, 0x32	; 50
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	22 e3       	ldi	r18, 0x32	; 50
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	f9 01       	movw	r30, r18
     c46:	20 81       	ld	r18, Z
     c48:	20 64       	ori	r18, 0x40	; 64
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 83       	st	Z, r18
     c4e:	82 e3       	ldi	r24, 0x32	; 50
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	22 e3       	ldi	r18, 0x32	; 50
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	f9 01       	movw	r30, r18
     c58:	20 81       	ld	r18, Z
     c5a:	2f 7d       	andi	r18, 0xDF	; 223
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 83       	st	Z, r18
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	80 93 a5 01 	sts	0x01A5, r24
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	80 93 a4 01 	sts	0x01A4, r24
		r_motor.rpm = 0;
     c6c:	10 92 a7 01 	sts	0x01A7, r1
     c70:	10 92 a6 01 	sts	0x01A6, r1
		l_motor.rpm = 0;
     c74:	10 92 96 01 	sts	0x0196, r1
     c78:	10 92 95 01 	sts	0x0195, r1
		set_state(state_go_ahead_after_turn_logic);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 11 01 	sts	0x0111, r24
     c82:	83 e5       	ldi	r24, 0x53	; 83
     c84:	96 e0       	ldi	r25, 0x06	; 6
     c86:	90 93 5f 01 	sts	0x015F, r25
     c8a:	80 93 5e 01 	sts	0x015E, r24
		state_go_ahead_after_turn_data.not_first_run = false;
     c8e:	10 92 62 01 	sts	0x0162, r1
		return;
     c92:	00 00       	nop
	}	
}
     c94:	29 96       	adiw	r28, 0x09	; 9
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <state_go_ahead_after_turn_logic>:

void state_go_ahead_after_turn_logic() {
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	29 97       	sbiw	r28, 0x09	; 9
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
		if (state_go_ahead_after_turn_data.not_first_run == false){
     cba:	90 91 62 01 	lds	r25, 0x0162
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 27       	eor	r24, r25
     cc2:	88 23       	and	r24, r24
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <state_go_ahead_after_turn_logic+0x22>
     cc6:	52 c0       	rjmp	.+164    	; 0xd6c <state_go_ahead_after_turn_logic+0xc6>
			enable_features.adc = true;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 47 01 	sts	0x0147, r24
			state_go_ahead_after_turn_data.not_first_run = true;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	80 93 62 01 	sts	0x0162, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_GO_AHEAD_AFTER_TURN};
     cd4:	29 e0       	ldi	r18, 0x09	; 9
     cd6:	e3 ea       	ldi	r30, 0xA3	; 163
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	ce 01       	movw	r24, r28
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	dc 01       	movw	r26, r24
     ce0:	01 90       	ld	r0, Z+
     ce2:	0d 92       	st	X+, r0
     ce4:	2a 95       	dec	r18
     ce6:	e1 f7       	brne	.-8      	; 0xce0 <state_go_ahead_after_turn_logic+0x3a>
			add_task(&system_state);
     ce8:	ce 01       	movw	r24, r28
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			set_m_forward()
     cf0:	82 e3       	ldi	r24, 0x32	; 50
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	22 e3       	ldi	r18, 0x32	; 50
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	f9 01       	movw	r30, r18
     cfa:	20 81       	ld	r18, Z
     cfc:	20 61       	ori	r18, 0x10	; 16
     cfe:	fc 01       	movw	r30, r24
     d00:	20 83       	st	Z, r18
     d02:	85 e3       	ldi	r24, 0x35	; 53
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	25 e3       	ldi	r18, 0x35	; 53
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	f9 01       	movw	r30, r18
     d0c:	20 81       	ld	r18, Z
     d0e:	2e 7f       	andi	r18, 0xFE	; 254
     d10:	fc 01       	movw	r30, r24
     d12:	20 83       	st	Z, r18
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 94 01 	sts	0x0194, r24
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 93 01 	sts	0x0193, r24
     d20:	82 e3       	ldi	r24, 0x32	; 50
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	22 e3       	ldi	r18, 0x32	; 50
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	f9 01       	movw	r30, r18
     d2a:	20 81       	ld	r18, Z
     d2c:	20 62       	ori	r18, 0x20	; 32
     d2e:	fc 01       	movw	r30, r24
     d30:	20 83       	st	Z, r18
     d32:	82 e3       	ldi	r24, 0x32	; 50
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	22 e3       	ldi	r18, 0x32	; 50
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	f9 01       	movw	r30, r18
     d3c:	20 81       	ld	r18, Z
     d3e:	2f 7b       	andi	r18, 0xBF	; 191
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	80 93 a5 01 	sts	0x01A5, r24
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 100;
     d50:	84 e6       	ldi	r24, 0x64	; 100
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	90 93 a7 01 	sts	0x01A7, r25
     d58:	80 93 a6 01 	sts	0x01A6, r24
			l_motor.rpm = 100;
     d5c:	84 e6       	ldi	r24, 0x64	; 100
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	90 93 96 01 	sts	0x0196, r25
     d64:	80 93 95 01 	sts	0x0195, r24
			return;
     d68:	00 00       	nop
     d6a:	54 c0       	rjmp	.+168    	; 0xe14 <state_go_ahead_after_turn_logic+0x16e>
		}
		
	if (new_data_available){
     d6c:	80 91 4c 01 	lds	r24, 0x014C
     d70:	88 23       	and	r24, r24
     d72:	09 f4       	brne	.+2      	; 0xd76 <state_go_ahead_after_turn_logic+0xd0>
     d74:	4f c0       	rjmp	.+158    	; 0xe14 <state_go_ahead_after_turn_logic+0x16e>
		new_data_available = false;
     d76:	10 92 4c 01 	sts	0x014C, r1
		if (result1 < STATE_GO_AHEAD_AFTER_TURN_VOLTAGE-1)
     d7a:	80 91 4e 01 	lds	r24, 0x014E
     d7e:	90 91 4f 01 	lds	r25, 0x014F
     d82:	8f 38       	cpi	r24, 0x8F	; 143
     d84:	f1 e0       	ldi	r31, 0x01	; 1
     d86:	9f 07       	cpc	r25, r31
     d88:	08 f0       	brcs	.+2      	; 0xd8c <state_go_ahead_after_turn_logic+0xe6>
     d8a:	44 c0       	rjmp	.+136    	; 0xe14 <state_go_ahead_after_turn_logic+0x16e>
		{
			set_m_backward()
     d8c:	85 e3       	ldi	r24, 0x35	; 53
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	25 e3       	ldi	r18, 0x35	; 53
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	f9 01       	movw	r30, r18
     d96:	20 81       	ld	r18, Z
     d98:	21 60       	ori	r18, 0x01	; 1
     d9a:	fc 01       	movw	r30, r24
     d9c:	20 83       	st	Z, r18
     d9e:	82 e3       	ldi	r24, 0x32	; 50
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	22 e3       	ldi	r18, 0x32	; 50
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	f9 01       	movw	r30, r18
     da8:	20 81       	ld	r18, Z
     daa:	2f 7e       	andi	r18, 0xEF	; 239
     dac:	fc 01       	movw	r30, r24
     dae:	20 83       	st	Z, r18
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	80 93 94 01 	sts	0x0194, r24
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	80 93 93 01 	sts	0x0193, r24
     dbc:	82 e3       	ldi	r24, 0x32	; 50
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	22 e3       	ldi	r18, 0x32	; 50
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	f9 01       	movw	r30, r18
     dc6:	20 81       	ld	r18, Z
     dc8:	20 64       	ori	r18, 0x40	; 64
     dca:	fc 01       	movw	r30, r24
     dcc:	20 83       	st	Z, r18
     dce:	82 e3       	ldi	r24, 0x32	; 50
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	22 e3       	ldi	r18, 0x32	; 50
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	f9 01       	movw	r30, r18
     dd8:	20 81       	ld	r18, Z
     dda:	2f 7d       	andi	r18, 0xDF	; 223
     ddc:	fc 01       	movw	r30, r24
     dde:	20 83       	st	Z, r18
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	80 93 a5 01 	sts	0x01A5, r24
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	80 93 a4 01 	sts	0x01A4, r24
			l_motor.rpm = 0;
     dec:	10 92 96 01 	sts	0x0196, r1
     df0:	10 92 95 01 	sts	0x0195, r1
			r_motor.rpm = 0;
     df4:	10 92 a7 01 	sts	0x01A7, r1
     df8:	10 92 a6 01 	sts	0x01A6, r1
			set_state(state_go_a_bit_more_logic);
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	80 93 11 01 	sts	0x0111, r24
     e02:	83 e1       	ldi	r24, 0x13	; 19
     e04:	97 e0       	ldi	r25, 0x07	; 7
     e06:	90 93 5f 01 	sts	0x015F, r25
     e0a:	80 93 5e 01 	sts	0x015E, r24
			state_go_a_bit_more_data.not_first_run = false;
     e0e:	10 92 7f 01 	sts	0x017F, r1
			return;
     e12:	00 00       	nop
		}
	}
}
     e14:	29 96       	adiw	r28, 0x09	; 9
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <state_go_a_bit_more_logic>:

void state_go_a_bit_more_logic() {
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	29 97       	sbiw	r28, 0x09	; 9
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
		if (state_go_a_bit_more_data.not_first_run == false){
     e3a:	90 91 7f 01 	lds	r25, 0x017F
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	89 27       	eor	r24, r25
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <state_go_a_bit_more_logic+0x22>
     e46:	57 c0       	rjmp	.+174    	; 0xef6 <state_go_a_bit_more_logic+0xd0>
			state_go_a_bit_more_data.not_first_run = true;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	80 93 7f 01 	sts	0x017F, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_GO_A_BIT_MORE};
     e4e:	29 e0       	ldi	r18, 0x09	; 9
     e50:	ec ea       	ldi	r30, 0xAC	; 172
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ce 01       	movw	r24, r28
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	dc 01       	movw	r26, r24
     e5a:	01 90       	ld	r0, Z+
     e5c:	0d 92       	st	X+, r0
     e5e:	2a 95       	dec	r18
     e60:	e1 f7       	brne	.-8      	; 0xe5a <state_go_a_bit_more_logic+0x34>
			add_task(&system_state);
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			tmr_start(&state_timer,STATE_GO_A_BIT_MORE_INTERVAL);
     e6a:	44 ef       	ldi	r20, 0xF4	; 244
     e6c:	51 e0       	ldi	r21, 0x01	; 1
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	8a e6       	ldi	r24, 0x6A	; 106
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
			set_m_forward()
     e7a:	82 e3       	ldi	r24, 0x32	; 50
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	22 e3       	ldi	r18, 0x32	; 50
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	f9 01       	movw	r30, r18
     e84:	20 81       	ld	r18, Z
     e86:	20 61       	ori	r18, 0x10	; 16
     e88:	fc 01       	movw	r30, r24
     e8a:	20 83       	st	Z, r18
     e8c:	85 e3       	ldi	r24, 0x35	; 53
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	25 e3       	ldi	r18, 0x35	; 53
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	f9 01       	movw	r30, r18
     e96:	20 81       	ld	r18, Z
     e98:	2e 7f       	andi	r18, 0xFE	; 254
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 83       	st	Z, r18
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	80 93 94 01 	sts	0x0194, r24
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 93 01 	sts	0x0193, r24
     eaa:	82 e3       	ldi	r24, 0x32	; 50
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	22 e3       	ldi	r18, 0x32	; 50
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	f9 01       	movw	r30, r18
     eb4:	20 81       	ld	r18, Z
     eb6:	20 62       	ori	r18, 0x20	; 32
     eb8:	fc 01       	movw	r30, r24
     eba:	20 83       	st	Z, r18
     ebc:	82 e3       	ldi	r24, 0x32	; 50
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	22 e3       	ldi	r18, 0x32	; 50
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	f9 01       	movw	r30, r18
     ec6:	20 81       	ld	r18, Z
     ec8:	2f 7b       	andi	r18, 0xBF	; 191
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	80 93 a5 01 	sts	0x01A5, r24
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 100;
     eda:	84 e6       	ldi	r24, 0x64	; 100
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	90 93 a7 01 	sts	0x01A7, r25
     ee2:	80 93 a6 01 	sts	0x01A6, r24
			l_motor.rpm = 100;
     ee6:	84 e6       	ldi	r24, 0x64	; 100
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	90 93 96 01 	sts	0x0196, r25
     eee:	80 93 95 01 	sts	0x0195, r24
			return;
     ef2:	00 00       	nop
     ef4:	4b c0       	rjmp	.+150    	; 0xf8c <state_go_a_bit_more_logic+0x166>
		}
		
		if (tmr_exp(&state_timer)){
     ef6:	8a e6       	ldi	r24, 0x6A	; 106
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
     efe:	88 23       	and	r24, r24
     f00:	09 f4       	brne	.+2      	; 0xf04 <state_go_a_bit_more_logic+0xde>
     f02:	44 c0       	rjmp	.+136    	; 0xf8c <state_go_a_bit_more_logic+0x166>
			set_m_backward()
     f04:	85 e3       	ldi	r24, 0x35	; 53
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	25 e3       	ldi	r18, 0x35	; 53
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	f9 01       	movw	r30, r18
     f0e:	20 81       	ld	r18, Z
     f10:	21 60       	ori	r18, 0x01	; 1
     f12:	fc 01       	movw	r30, r24
     f14:	20 83       	st	Z, r18
     f16:	82 e3       	ldi	r24, 0x32	; 50
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	22 e3       	ldi	r18, 0x32	; 50
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	f9 01       	movw	r30, r18
     f20:	20 81       	ld	r18, Z
     f22:	2f 7e       	andi	r18, 0xEF	; 239
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	80 93 94 01 	sts	0x0194, r24
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	80 93 93 01 	sts	0x0193, r24
     f34:	82 e3       	ldi	r24, 0x32	; 50
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	22 e3       	ldi	r18, 0x32	; 50
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	f9 01       	movw	r30, r18
     f3e:	20 81       	ld	r18, Z
     f40:	20 64       	ori	r18, 0x40	; 64
     f42:	fc 01       	movw	r30, r24
     f44:	20 83       	st	Z, r18
     f46:	82 e3       	ldi	r24, 0x32	; 50
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	22 e3       	ldi	r18, 0x32	; 50
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	f9 01       	movw	r30, r18
     f50:	20 81       	ld	r18, Z
     f52:	2f 7d       	andi	r18, 0xDF	; 223
     f54:	fc 01       	movw	r30, r24
     f56:	20 83       	st	Z, r18
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	80 93 a5 01 	sts	0x01A5, r24
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 0;
     f64:	10 92 a7 01 	sts	0x01A7, r1
     f68:	10 92 a6 01 	sts	0x01A6, r1
			l_motor.rpm = 0;
     f6c:	10 92 96 01 	sts	0x0196, r1
     f70:	10 92 95 01 	sts	0x0195, r1
			set_state(state_second_left_turn_logic);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 11 01 	sts	0x0111, r24
     f7a:	8f ec       	ldi	r24, 0xCF	; 207
     f7c:	97 e0       	ldi	r25, 0x07	; 7
     f7e:	90 93 5f 01 	sts	0x015F, r25
     f82:	80 93 5e 01 	sts	0x015E, r24
			state_second_left_turn_data.not_first_run = false;
     f86:	10 92 7d 01 	sts	0x017D, r1
			return;
     f8a:	00 00       	nop
		}
}
     f8c:	29 96       	adiw	r28, 0x09	; 9
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <state_second_left_turn_logic>:

void state_second_left_turn_logic() {
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	29 97       	sbiw	r28, 0x09	; 9
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
		if (state_second_left_turn_data.not_first_run == false){
     fb2:	90 91 7d 01 	lds	r25, 0x017D
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	89 27       	eor	r24, r25
     fba:	88 23       	and	r24, r24
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <state_second_left_turn_logic+0x22>
     fbe:	55 c0       	rjmp	.+170    	; 0x106a <state_second_left_turn_logic+0xcc>
			state_second_left_turn_data.not_first_run = true;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	80 93 7d 01 	sts	0x017D, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_SECOND_LEFT_TURN};
     fc6:	29 e0       	ldi	r18, 0x09	; 9
     fc8:	e5 eb       	ldi	r30, 0xB5	; 181
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	ce 01       	movw	r24, r28
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	dc 01       	movw	r26, r24
     fd2:	01 90       	ld	r0, Z+
     fd4:	0d 92       	st	X+, r0
     fd6:	2a 95       	dec	r18
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <state_second_left_turn_logic+0x34>
			add_task(&system_state);
     fda:	ce 01       	movw	r24, r28
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			tmr_start(&state_timer,STATE_SECOND_LEFT_TURN_INTERVAL);
     fe2:	48 ee       	ldi	r20, 0xE8	; 232
     fe4:	53 e0       	ldi	r21, 0x03	; 3
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	8a e6       	ldi	r24, 0x6A	; 106
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
			set_m_forward()
     ff2:	82 e3       	ldi	r24, 0x32	; 50
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	22 e3       	ldi	r18, 0x32	; 50
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	f9 01       	movw	r30, r18
     ffc:	20 81       	ld	r18, Z
     ffe:	20 61       	ori	r18, 0x10	; 16
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
    1004:	85 e3       	ldi	r24, 0x35	; 53
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	25 e3       	ldi	r18, 0x35	; 53
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	f9 01       	movw	r30, r18
    100e:	20 81       	ld	r18, Z
    1010:	2e 7f       	andi	r18, 0xFE	; 254
    1012:	fc 01       	movw	r30, r24
    1014:	20 83       	st	Z, r18
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 94 01 	sts	0x0194, r24
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 93 01 	sts	0x0193, r24
    1022:	82 e3       	ldi	r24, 0x32	; 50
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	22 e3       	ldi	r18, 0x32	; 50
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	20 81       	ld	r18, Z
    102e:	20 62       	ori	r18, 0x20	; 32
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
    1034:	82 e3       	ldi	r24, 0x32	; 50
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	22 e3       	ldi	r18, 0x32	; 50
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	2f 7b       	andi	r18, 0xBF	; 191
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	80 93 a5 01 	sts	0x01A5, r24
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 100;
    1052:	84 e6       	ldi	r24, 0x64	; 100
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	90 93 a7 01 	sts	0x01A7, r25
    105a:	80 93 a6 01 	sts	0x01A6, r24
			l_motor.rpm = 0;
    105e:	10 92 96 01 	sts	0x0196, r1
    1062:	10 92 95 01 	sts	0x0195, r1
			return;
    1066:	00 00       	nop
    1068:	4b c0       	rjmp	.+150    	; 0x1100 <state_second_left_turn_logic+0x162>
		}
		
		if (tmr_exp(&state_timer)){
    106a:	8a e6       	ldi	r24, 0x6A	; 106
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    1072:	88 23       	and	r24, r24
    1074:	09 f4       	brne	.+2      	; 0x1078 <state_second_left_turn_logic+0xda>
    1076:	44 c0       	rjmp	.+136    	; 0x1100 <state_second_left_turn_logic+0x162>
			set_m_backward()
    1078:	85 e3       	ldi	r24, 0x35	; 53
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	25 e3       	ldi	r18, 0x35	; 53
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	f9 01       	movw	r30, r18
    1082:	20 81       	ld	r18, Z
    1084:	21 60       	ori	r18, 0x01	; 1
    1086:	fc 01       	movw	r30, r24
    1088:	20 83       	st	Z, r18
    108a:	82 e3       	ldi	r24, 0x32	; 50
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	22 e3       	ldi	r18, 0x32	; 50
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	f9 01       	movw	r30, r18
    1094:	20 81       	ld	r18, Z
    1096:	2f 7e       	andi	r18, 0xEF	; 239
    1098:	fc 01       	movw	r30, r24
    109a:	20 83       	st	Z, r18
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	80 93 94 01 	sts	0x0194, r24
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	80 93 93 01 	sts	0x0193, r24
    10a8:	82 e3       	ldi	r24, 0x32	; 50
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	22 e3       	ldi	r18, 0x32	; 50
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	f9 01       	movw	r30, r18
    10b2:	20 81       	ld	r18, Z
    10b4:	20 64       	ori	r18, 0x40	; 64
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18
    10ba:	82 e3       	ldi	r24, 0x32	; 50
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	22 e3       	ldi	r18, 0x32	; 50
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	f9 01       	movw	r30, r18
    10c4:	20 81       	ld	r18, Z
    10c6:	2f 7d       	andi	r18, 0xDF	; 223
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	80 93 a5 01 	sts	0x01A5, r24
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 0;
    10d8:	10 92 a7 01 	sts	0x01A7, r1
    10dc:	10 92 a6 01 	sts	0x01A6, r1
			l_motor.rpm = 0;
    10e0:	10 92 96 01 	sts	0x0196, r1
    10e4:	10 92 95 01 	sts	0x0195, r1
			set_state(state_second_go_ahead_logic);
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	80 93 11 01 	sts	0x0111, r24
    10ee:	89 e8       	ldi	r24, 0x89	; 137
    10f0:	98 e0       	ldi	r25, 0x08	; 8
    10f2:	90 93 5f 01 	sts	0x015F, r25
    10f6:	80 93 5e 01 	sts	0x015E, r24
			state_second_go_ahead_data.not_first_run = false;
    10fa:	10 92 7b 01 	sts	0x017B, r1
			return;
    10fe:	00 00       	nop
		}	
}
    1100:	29 96       	adiw	r28, 0x09	; 9
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <state_second_go_ahead_logic>:

void state_second_go_ahead_logic() {
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	29 97       	sbiw	r28, 0x09	; 9
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
		if (state_second_go_ahead_data.not_first_run == false){
    1126:	90 91 7b 01 	lds	r25, 0x017B
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	89 27       	eor	r24, r25
    112e:	88 23       	and	r24, r24
    1130:	09 f4       	brne	.+2      	; 0x1134 <state_second_go_ahead_logic+0x22>
    1132:	57 c0       	rjmp	.+174    	; 0x11e2 <state_second_go_ahead_logic+0xd0>
			state_second_go_ahead_data.not_first_run = true;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 7b 01 	sts	0x017B, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_SECOND_GO_AHEAD};
    113a:	29 e0       	ldi	r18, 0x09	; 9
    113c:	ee eb       	ldi	r30, 0xBE	; 190
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	ce 01       	movw	r24, r28
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	dc 01       	movw	r26, r24
    1146:	01 90       	ld	r0, Z+
    1148:	0d 92       	st	X+, r0
    114a:	2a 95       	dec	r18
    114c:	e1 f7       	brne	.-8      	; 0x1146 <state_second_go_ahead_logic+0x34>
			tmr_start(&state_timer,STATE_SECOND_GO_AHEAD_INTERVAL);
    114e:	48 ee       	ldi	r20, 0xE8	; 232
    1150:	53 e0       	ldi	r21, 0x03	; 3
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	8a e6       	ldi	r24, 0x6A	; 106
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
			add_task(&system_state);
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			set_m_forward()
    1166:	82 e3       	ldi	r24, 0x32	; 50
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	22 e3       	ldi	r18, 0x32	; 50
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	f9 01       	movw	r30, r18
    1170:	20 81       	ld	r18, Z
    1172:	20 61       	ori	r18, 0x10	; 16
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
    1178:	85 e3       	ldi	r24, 0x35	; 53
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	25 e3       	ldi	r18, 0x35	; 53
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	f9 01       	movw	r30, r18
    1182:	20 81       	ld	r18, Z
    1184:	2e 7f       	andi	r18, 0xFE	; 254
    1186:	fc 01       	movw	r30, r24
    1188:	20 83       	st	Z, r18
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 94 01 	sts	0x0194, r24
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 93 93 01 	sts	0x0193, r24
    1196:	82 e3       	ldi	r24, 0x32	; 50
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	22 e3       	ldi	r18, 0x32	; 50
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	f9 01       	movw	r30, r18
    11a0:	20 81       	ld	r18, Z
    11a2:	20 62       	ori	r18, 0x20	; 32
    11a4:	fc 01       	movw	r30, r24
    11a6:	20 83       	st	Z, r18
    11a8:	82 e3       	ldi	r24, 0x32	; 50
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	22 e3       	ldi	r18, 0x32	; 50
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	f9 01       	movw	r30, r18
    11b2:	20 81       	ld	r18, Z
    11b4:	2f 7b       	andi	r18, 0xBF	; 191
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 a5 01 	sts	0x01A5, r24
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 100;
    11c6:	84 e6       	ldi	r24, 0x64	; 100
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	90 93 a7 01 	sts	0x01A7, r25
    11ce:	80 93 a6 01 	sts	0x01A6, r24
			l_motor.rpm = 100;
    11d2:	84 e6       	ldi	r24, 0x64	; 100
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	90 93 96 01 	sts	0x0196, r25
    11da:	80 93 95 01 	sts	0x0195, r24
			return;
    11de:	00 00       	nop
    11e0:	4b c0       	rjmp	.+150    	; 0x1278 <state_second_go_ahead_logic+0x166>
		}
		
	if (tmr_exp(&state_timer)){
    11e2:	8a e6       	ldi	r24, 0x6A	; 106
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    11ea:	88 23       	and	r24, r24
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <state_second_go_ahead_logic+0xde>
    11ee:	44 c0       	rjmp	.+136    	; 0x1278 <state_second_go_ahead_logic+0x166>
			set_m_backward()
    11f0:	85 e3       	ldi	r24, 0x35	; 53
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	25 e3       	ldi	r18, 0x35	; 53
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	f9 01       	movw	r30, r18
    11fa:	20 81       	ld	r18, Z
    11fc:	21 60       	ori	r18, 0x01	; 1
    11fe:	fc 01       	movw	r30, r24
    1200:	20 83       	st	Z, r18
    1202:	82 e3       	ldi	r24, 0x32	; 50
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	22 e3       	ldi	r18, 0x32	; 50
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	f9 01       	movw	r30, r18
    120c:	20 81       	ld	r18, Z
    120e:	2f 7e       	andi	r18, 0xEF	; 239
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	80 93 94 01 	sts	0x0194, r24
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	80 93 93 01 	sts	0x0193, r24
    1220:	82 e3       	ldi	r24, 0x32	; 50
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	22 e3       	ldi	r18, 0x32	; 50
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	f9 01       	movw	r30, r18
    122a:	20 81       	ld	r18, Z
    122c:	20 64       	ori	r18, 0x40	; 64
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
    1232:	82 e3       	ldi	r24, 0x32	; 50
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	22 e3       	ldi	r18, 0x32	; 50
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	f9 01       	movw	r30, r18
    123c:	20 81       	ld	r18, Z
    123e:	2f 7d       	andi	r18, 0xDF	; 223
    1240:	fc 01       	movw	r30, r24
    1242:	20 83       	st	Z, r18
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	80 93 a5 01 	sts	0x01A5, r24
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 0;
    1250:	10 92 a7 01 	sts	0x01A7, r1
    1254:	10 92 a6 01 	sts	0x01A6, r1
			l_motor.rpm = 0;
    1258:	10 92 96 01 	sts	0x0196, r1
    125c:	10 92 95 01 	sts	0x0195, r1
			set_state(state_second_go_a_bit_more_logic);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	80 93 11 01 	sts	0x0111, r24
    1266:	85 e4       	ldi	r24, 0x45	; 69
    1268:	99 e0       	ldi	r25, 0x09	; 9
    126a:	90 93 5f 01 	sts	0x015F, r25
    126e:	80 93 5e 01 	sts	0x015E, r24
			state_second_go_a_bit_more_data.not_first_run = false;
    1272:	10 92 68 01 	sts	0x0168, r1
			return;
    1276:	00 00       	nop
		}
}
    1278:	29 96       	adiw	r28, 0x09	; 9
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <state_second_go_a_bit_more_logic>:

void state_second_go_a_bit_more_logic() {
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	29 97       	sbiw	r28, 0x09	; 9
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
	if (state_second_go_a_bit_more_data.not_first_run == false){
    129e:	90 91 68 01 	lds	r25, 0x0168
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	89 27       	eor	r24, r25
    12a6:	88 23       	and	r24, r24
    12a8:	09 f4       	brne	.+2      	; 0x12ac <state_second_go_a_bit_more_logic+0x22>
    12aa:	57 c0       	rjmp	.+174    	; 0x135a <state_second_go_a_bit_more_logic+0xd0>
			state_second_go_a_bit_more_data.not_first_run = true;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 68 01 	sts	0x0168, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_SECOND_GO_A_BIT_MORE};
    12b2:	29 e0       	ldi	r18, 0x09	; 9
    12b4:	e7 ec       	ldi	r30, 0xC7	; 199
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	dc 01       	movw	r26, r24
    12be:	01 90       	ld	r0, Z+
    12c0:	0d 92       	st	X+, r0
    12c2:	2a 95       	dec	r18
    12c4:	e1 f7       	brne	.-8      	; 0x12be <state_second_go_a_bit_more_logic+0x34>
			add_task(&system_state);
    12c6:	ce 01       	movw	r24, r28
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			tmr_start(&state_timer,STATE_SECOND_GO_A_BIT_MORE_INTERVAL);
    12ce:	44 ef       	ldi	r20, 0xF4	; 244
    12d0:	51 e0       	ldi	r21, 0x01	; 1
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	8a e6       	ldi	r24, 0x6A	; 106
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
			set_m_forward()
    12de:	82 e3       	ldi	r24, 0x32	; 50
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	22 e3       	ldi	r18, 0x32	; 50
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	f9 01       	movw	r30, r18
    12e8:	20 81       	ld	r18, Z
    12ea:	20 61       	ori	r18, 0x10	; 16
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
    12f0:	85 e3       	ldi	r24, 0x35	; 53
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	25 e3       	ldi	r18, 0x35	; 53
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	f9 01       	movw	r30, r18
    12fa:	20 81       	ld	r18, Z
    12fc:	2e 7f       	andi	r18, 0xFE	; 254
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	80 93 94 01 	sts	0x0194, r24
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	80 93 93 01 	sts	0x0193, r24
    130e:	82 e3       	ldi	r24, 0x32	; 50
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	22 e3       	ldi	r18, 0x32	; 50
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	f9 01       	movw	r30, r18
    1318:	20 81       	ld	r18, Z
    131a:	20 62       	ori	r18, 0x20	; 32
    131c:	fc 01       	movw	r30, r24
    131e:	20 83       	st	Z, r18
    1320:	82 e3       	ldi	r24, 0x32	; 50
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	22 e3       	ldi	r18, 0x32	; 50
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	f9 01       	movw	r30, r18
    132a:	20 81       	ld	r18, Z
    132c:	2f 7b       	andi	r18, 0xBF	; 191
    132e:	fc 01       	movw	r30, r24
    1330:	20 83       	st	Z, r18
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 93 a5 01 	sts	0x01A5, r24
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 100;
    133e:	84 e6       	ldi	r24, 0x64	; 100
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	90 93 a7 01 	sts	0x01A7, r25
    1346:	80 93 a6 01 	sts	0x01A6, r24
			l_motor.rpm = 100;
    134a:	84 e6       	ldi	r24, 0x64	; 100
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	90 93 96 01 	sts	0x0196, r25
    1352:	80 93 95 01 	sts	0x0195, r24
			return;
    1356:	00 00       	nop
    1358:	4b c0       	rjmp	.+150    	; 0x13f0 <state_second_go_a_bit_more_logic+0x166>
		}
		
		if (tmr_exp(&state_timer)){
    135a:	8a e6       	ldi	r24, 0x6A	; 106
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    1362:	88 23       	and	r24, r24
    1364:	09 f4       	brne	.+2      	; 0x1368 <state_second_go_a_bit_more_logic+0xde>
    1366:	44 c0       	rjmp	.+136    	; 0x13f0 <state_second_go_a_bit_more_logic+0x166>
			set_m_backward()
    1368:	85 e3       	ldi	r24, 0x35	; 53
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	25 e3       	ldi	r18, 0x35	; 53
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	f9 01       	movw	r30, r18
    1372:	20 81       	ld	r18, Z
    1374:	21 60       	ori	r18, 0x01	; 1
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
    137a:	82 e3       	ldi	r24, 0x32	; 50
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	22 e3       	ldi	r18, 0x32	; 50
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	f9 01       	movw	r30, r18
    1384:	20 81       	ld	r18, Z
    1386:	2f 7e       	andi	r18, 0xEF	; 239
    1388:	fc 01       	movw	r30, r24
    138a:	20 83       	st	Z, r18
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	80 93 94 01 	sts	0x0194, r24
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	80 93 93 01 	sts	0x0193, r24
    1398:	82 e3       	ldi	r24, 0x32	; 50
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	22 e3       	ldi	r18, 0x32	; 50
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	f9 01       	movw	r30, r18
    13a2:	20 81       	ld	r18, Z
    13a4:	20 64       	ori	r18, 0x40	; 64
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
    13aa:	82 e3       	ldi	r24, 0x32	; 50
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	22 e3       	ldi	r18, 0x32	; 50
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	f9 01       	movw	r30, r18
    13b4:	20 81       	ld	r18, Z
    13b6:	2f 7d       	andi	r18, 0xDF	; 223
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 83       	st	Z, r18
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	80 93 a5 01 	sts	0x01A5, r24
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 0;
    13c8:	10 92 a7 01 	sts	0x01A7, r1
    13cc:	10 92 a6 01 	sts	0x01A6, r1
			l_motor.rpm = 0;
    13d0:	10 92 96 01 	sts	0x0196, r1
    13d4:	10 92 95 01 	sts	0x0195, r1
			set_state(state_third_left_turn_logic);
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 11 01 	sts	0x0111, r24
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	9a e0       	ldi	r25, 0x0A	; 10
    13e2:	90 93 5f 01 	sts	0x015F, r25
    13e6:	80 93 5e 01 	sts	0x015E, r24
			state_third_left_turn_data.not_first_run = false;
    13ea:	10 92 60 01 	sts	0x0160, r1
			return;
    13ee:	00 00       	nop
		}	
}
    13f0:	29 96       	adiw	r28, 0x09	; 9
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <state_third_left_turn_logic>:

void state_third_left_turn_logic() {
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	29 97       	sbiw	r28, 0x09	; 9
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
	if (state_third_left_turn_data.not_first_run == false){
    1416:	90 91 60 01 	lds	r25, 0x0160
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	89 27       	eor	r24, r25
    141e:	88 23       	and	r24, r24
    1420:	09 f4       	brne	.+2      	; 0x1424 <state_third_left_turn_logic+0x22>
    1422:	55 c0       	rjmp	.+170    	; 0x14ce <state_third_left_turn_logic+0xcc>
			state_third_left_turn_data.not_first_run = true;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	80 93 60 01 	sts	0x0160, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_THIRD_LEFT_TURN};
    142a:	29 e0       	ldi	r18, 0x09	; 9
    142c:	e0 ed       	ldi	r30, 0xD0	; 208
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	dc 01       	movw	r26, r24
    1436:	01 90       	ld	r0, Z+
    1438:	0d 92       	st	X+, r0
    143a:	2a 95       	dec	r18
    143c:	e1 f7       	brne	.-8      	; 0x1436 <state_third_left_turn_logic+0x34>
			add_task(&system_state);
    143e:	ce 01       	movw	r24, r28
    1440:	01 96       	adiw	r24, 0x01	; 1
    1442:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			tmr_start(&state_timer,STATE_THIRD_LEFT_TURN_INTERVAL);
    1446:	48 ee       	ldi	r20, 0xE8	; 232
    1448:	53 e0       	ldi	r21, 0x03	; 3
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	8a e6       	ldi	r24, 0x6A	; 106
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
			set_m_forward()
    1456:	82 e3       	ldi	r24, 0x32	; 50
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	22 e3       	ldi	r18, 0x32	; 50
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	f9 01       	movw	r30, r18
    1460:	20 81       	ld	r18, Z
    1462:	20 61       	ori	r18, 0x10	; 16
    1464:	fc 01       	movw	r30, r24
    1466:	20 83       	st	Z, r18
    1468:	85 e3       	ldi	r24, 0x35	; 53
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	25 e3       	ldi	r18, 0x35	; 53
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	f9 01       	movw	r30, r18
    1472:	20 81       	ld	r18, Z
    1474:	2e 7f       	andi	r18, 0xFE	; 254
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	80 93 94 01 	sts	0x0194, r24
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	80 93 93 01 	sts	0x0193, r24
    1486:	82 e3       	ldi	r24, 0x32	; 50
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	22 e3       	ldi	r18, 0x32	; 50
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	f9 01       	movw	r30, r18
    1490:	20 81       	ld	r18, Z
    1492:	20 62       	ori	r18, 0x20	; 32
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
    1498:	82 e3       	ldi	r24, 0x32	; 50
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	22 e3       	ldi	r18, 0x32	; 50
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	f9 01       	movw	r30, r18
    14a2:	20 81       	ld	r18, Z
    14a4:	2f 7b       	andi	r18, 0xBF	; 191
    14a6:	fc 01       	movw	r30, r24
    14a8:	20 83       	st	Z, r18
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	80 93 a5 01 	sts	0x01A5, r24
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 100;
    14b6:	84 e6       	ldi	r24, 0x64	; 100
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	90 93 a7 01 	sts	0x01A7, r25
    14be:	80 93 a6 01 	sts	0x01A6, r24
			l_motor.rpm = 0;
    14c2:	10 92 96 01 	sts	0x0196, r1
    14c6:	10 92 95 01 	sts	0x0195, r1
			return;
    14ca:	00 00       	nop
    14cc:	4b c0       	rjmp	.+150    	; 0x1564 <state_third_left_turn_logic+0x162>
		}
		
		if (tmr_exp(&state_timer)){
    14ce:	8a e6       	ldi	r24, 0x6A	; 106
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    14d6:	88 23       	and	r24, r24
    14d8:	09 f4       	brne	.+2      	; 0x14dc <state_third_left_turn_logic+0xda>
    14da:	44 c0       	rjmp	.+136    	; 0x1564 <state_third_left_turn_logic+0x162>
			set_m_backward()
    14dc:	85 e3       	ldi	r24, 0x35	; 53
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	25 e3       	ldi	r18, 0x35	; 53
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	f9 01       	movw	r30, r18
    14e6:	20 81       	ld	r18, Z
    14e8:	21 60       	ori	r18, 0x01	; 1
    14ea:	fc 01       	movw	r30, r24
    14ec:	20 83       	st	Z, r18
    14ee:	82 e3       	ldi	r24, 0x32	; 50
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	22 e3       	ldi	r18, 0x32	; 50
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	f9 01       	movw	r30, r18
    14f8:	20 81       	ld	r18, Z
    14fa:	2f 7e       	andi	r18, 0xEF	; 239
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 83       	st	Z, r18
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	80 93 94 01 	sts	0x0194, r24
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	80 93 93 01 	sts	0x0193, r24
    150c:	82 e3       	ldi	r24, 0x32	; 50
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	22 e3       	ldi	r18, 0x32	; 50
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	f9 01       	movw	r30, r18
    1516:	20 81       	ld	r18, Z
    1518:	20 64       	ori	r18, 0x40	; 64
    151a:	fc 01       	movw	r30, r24
    151c:	20 83       	st	Z, r18
    151e:	82 e3       	ldi	r24, 0x32	; 50
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	22 e3       	ldi	r18, 0x32	; 50
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	f9 01       	movw	r30, r18
    1528:	20 81       	ld	r18, Z
    152a:	2f 7d       	andi	r18, 0xDF	; 223
    152c:	fc 01       	movw	r30, r24
    152e:	20 83       	st	Z, r18
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	80 93 a5 01 	sts	0x01A5, r24
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 0;
    153c:	10 92 a7 01 	sts	0x01A7, r1
    1540:	10 92 a6 01 	sts	0x01A6, r1
			l_motor.rpm = 0;
    1544:	10 92 96 01 	sts	0x0196, r1
    1548:	10 92 95 01 	sts	0x0195, r1
			set_state(state_third_go_ahead_logic);
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	80 93 11 01 	sts	0x0111, r24
    1552:	8b eb       	ldi	r24, 0xBB	; 187
    1554:	9a e0       	ldi	r25, 0x0A	; 10
    1556:	90 93 5f 01 	sts	0x015F, r25
    155a:	80 93 5e 01 	sts	0x015E, r24
			state_third_go_ahead_data.not_first_run = false;
    155e:	10 92 66 01 	sts	0x0166, r1
			return;
    1562:	00 00       	nop
		}
}
    1564:	29 96       	adiw	r28, 0x09	; 9
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <state_third_go_ahead_logic>:

void state_third_go_ahead_logic() {
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	29 97       	sbiw	r28, 0x09	; 9
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
	if (state_third_go_ahead_data.not_first_run == false){
    158a:	90 91 66 01 	lds	r25, 0x0166
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 27       	eor	r24, r25
    1592:	88 23       	and	r24, r24
    1594:	09 f4       	brne	.+2      	; 0x1598 <state_third_go_ahead_logic+0x22>
    1596:	52 c0       	rjmp	.+164    	; 0x163c <state_third_go_ahead_logic+0xc6>
			state_third_go_ahead_data.not_first_run = true;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 66 01 	sts	0x0166, r24
			enable_features.adc = true;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	80 93 47 01 	sts	0x0147, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_THIRD_GO_AHEAD};
    15a4:	29 e0       	ldi	r18, 0x09	; 9
    15a6:	e9 ed       	ldi	r30, 0xD9	; 217
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	ce 01       	movw	r24, r28
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	dc 01       	movw	r26, r24
    15b0:	01 90       	ld	r0, Z+
    15b2:	0d 92       	st	X+, r0
    15b4:	2a 95       	dec	r18
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <state_third_go_ahead_logic+0x3a>
			add_task(&system_state);
    15b8:	ce 01       	movw	r24, r28
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			set_m_forward()
    15c0:	82 e3       	ldi	r24, 0x32	; 50
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	22 e3       	ldi	r18, 0x32	; 50
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	f9 01       	movw	r30, r18
    15ca:	20 81       	ld	r18, Z
    15cc:	20 61       	ori	r18, 0x10	; 16
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 83       	st	Z, r18
    15d2:	85 e3       	ldi	r24, 0x35	; 53
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	25 e3       	ldi	r18, 0x35	; 53
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	f9 01       	movw	r30, r18
    15dc:	20 81       	ld	r18, Z
    15de:	2e 7f       	andi	r18, 0xFE	; 254
    15e0:	fc 01       	movw	r30, r24
    15e2:	20 83       	st	Z, r18
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	80 93 94 01 	sts	0x0194, r24
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 93 01 	sts	0x0193, r24
    15f0:	82 e3       	ldi	r24, 0x32	; 50
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	22 e3       	ldi	r18, 0x32	; 50
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	20 81       	ld	r18, Z
    15fc:	20 62       	ori	r18, 0x20	; 32
    15fe:	fc 01       	movw	r30, r24
    1600:	20 83       	st	Z, r18
    1602:	82 e3       	ldi	r24, 0x32	; 50
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	22 e3       	ldi	r18, 0x32	; 50
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	f9 01       	movw	r30, r18
    160c:	20 81       	ld	r18, Z
    160e:	2f 7b       	andi	r18, 0xBF	; 191
    1610:	fc 01       	movw	r30, r24
    1612:	20 83       	st	Z, r18
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 a5 01 	sts	0x01A5, r24
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 100;
    1620:	84 e6       	ldi	r24, 0x64	; 100
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	90 93 a7 01 	sts	0x01A7, r25
    1628:	80 93 a6 01 	sts	0x01A6, r24
			l_motor.rpm = 100;
    162c:	84 e6       	ldi	r24, 0x64	; 100
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	90 93 96 01 	sts	0x0196, r25
    1634:	80 93 95 01 	sts	0x0195, r24
			return;
    1638:	00 00       	nop
    163a:	5d c0       	rjmp	.+186    	; 0x16f6 <state_third_go_ahead_logic+0x180>
		}
		
	if (new_data_available){
    163c:	80 91 4c 01 	lds	r24, 0x014C
    1640:	88 23       	and	r24, r24
    1642:	09 f4       	brne	.+2      	; 0x1646 <state_third_go_ahead_logic+0xd0>
    1644:	58 c0       	rjmp	.+176    	; 0x16f6 <state_third_go_ahead_logic+0x180>
		new_data_available = false;
    1646:	10 92 4c 01 	sts	0x014C, r1
		if (result0 < STATE_THIRD_GO_AHEAD_MAXIMAL_VOLTAGE+1 && result0 > STATE_THIRD_GO_AHEAD_MINIMAL_VOLTAGE-1)
    164a:	80 91 50 01 	lds	r24, 0x0150
    164e:	90 91 51 01 	lds	r25, 0x0151
    1652:	89 3e       	cpi	r24, 0xE9	; 233
    1654:	f3 e0       	ldi	r31, 0x03	; 3
    1656:	9f 07       	cpc	r25, r31
    1658:	08 f0       	brcs	.+2      	; 0x165c <state_third_go_ahead_logic+0xe6>
    165a:	4d c0       	rjmp	.+154    	; 0x16f6 <state_third_go_ahead_logic+0x180>
    165c:	80 91 50 01 	lds	r24, 0x0150
    1660:	90 91 51 01 	lds	r25, 0x0151
    1664:	80 39       	cpi	r24, 0x90	; 144
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	92 07       	cpc	r25, r18
    166a:	08 f4       	brcc	.+2      	; 0x166e <state_third_go_ahead_logic+0xf8>
    166c:	44 c0       	rjmp	.+136    	; 0x16f6 <state_third_go_ahead_logic+0x180>
		{
			set_m_backward()
    166e:	85 e3       	ldi	r24, 0x35	; 53
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	25 e3       	ldi	r18, 0x35	; 53
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	f9 01       	movw	r30, r18
    1678:	20 81       	ld	r18, Z
    167a:	21 60       	ori	r18, 0x01	; 1
    167c:	fc 01       	movw	r30, r24
    167e:	20 83       	st	Z, r18
    1680:	82 e3       	ldi	r24, 0x32	; 50
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	22 e3       	ldi	r18, 0x32	; 50
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	f9 01       	movw	r30, r18
    168a:	20 81       	ld	r18, Z
    168c:	2f 7e       	andi	r18, 0xEF	; 239
    168e:	fc 01       	movw	r30, r24
    1690:	20 83       	st	Z, r18
    1692:	8f ef       	ldi	r24, 0xFF	; 255
    1694:	80 93 94 01 	sts	0x0194, r24
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	80 93 93 01 	sts	0x0193, r24
    169e:	82 e3       	ldi	r24, 0x32	; 50
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	22 e3       	ldi	r18, 0x32	; 50
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	f9 01       	movw	r30, r18
    16a8:	20 81       	ld	r18, Z
    16aa:	20 64       	ori	r18, 0x40	; 64
    16ac:	fc 01       	movw	r30, r24
    16ae:	20 83       	st	Z, r18
    16b0:	82 e3       	ldi	r24, 0x32	; 50
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	22 e3       	ldi	r18, 0x32	; 50
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	f9 01       	movw	r30, r18
    16ba:	20 81       	ld	r18, Z
    16bc:	2f 7d       	andi	r18, 0xDF	; 223
    16be:	fc 01       	movw	r30, r24
    16c0:	20 83       	st	Z, r18
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	80 93 a5 01 	sts	0x01A5, r24
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	80 93 a4 01 	sts	0x01A4, r24
 			r_motor.rpm = 0;
    16ce:	10 92 a7 01 	sts	0x01A7, r1
    16d2:	10 92 a6 01 	sts	0x01A6, r1
 			l_motor.rpm = 0;
    16d6:	10 92 96 01 	sts	0x0196, r1
    16da:	10 92 95 01 	sts	0x0195, r1
			set_state(state_right_turn_logic);
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	80 93 11 01 	sts	0x0111, r24
    16e4:	84 e8       	ldi	r24, 0x84	; 132
    16e6:	9b e0       	ldi	r25, 0x0B	; 11
    16e8:	90 93 5f 01 	sts	0x015F, r25
    16ec:	80 93 5e 01 	sts	0x015E, r24
			state_right_turn_data.not_first_run = false;
    16f0:	10 92 77 01 	sts	0x0177, r1
			return;
    16f4:	00 00       	nop
		}				
	}
}
    16f6:	29 96       	adiw	r28, 0x09	; 9
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <state_right_turn_logic>:

void state_right_turn_logic() {
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	29 97       	sbiw	r28, 0x09	; 9
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
	if (state_right_turn_data.not_first_run == false){
    171c:	90 91 77 01 	lds	r25, 0x0177
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	89 27       	eor	r24, r25
    1724:	88 23       	and	r24, r24
    1726:	09 f4       	brne	.+2      	; 0x172a <state_right_turn_logic+0x22>
    1728:	55 c0       	rjmp	.+170    	; 0x17d4 <state_right_turn_logic+0xcc>
			state_right_turn_data.not_first_run = true;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	80 93 77 01 	sts	0x0177, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_RIGHT_TURN};
    1730:	29 e0       	ldi	r18, 0x09	; 9
    1732:	e2 ee       	ldi	r30, 0xE2	; 226
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	ce 01       	movw	r24, r28
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	dc 01       	movw	r26, r24
    173c:	01 90       	ld	r0, Z+
    173e:	0d 92       	st	X+, r0
    1740:	2a 95       	dec	r18
    1742:	e1 f7       	brne	.-8      	; 0x173c <state_right_turn_logic+0x34>
			add_task(&system_state);
    1744:	ce 01       	movw	r24, r28
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			tmr_start(&state_timer,STATE_RIGHT_TURN_INTERVAL);
    174c:	48 ee       	ldi	r20, 0xE8	; 232
    174e:	53 e0       	ldi	r21, 0x03	; 3
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	8a e6       	ldi	r24, 0x6A	; 106
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
			set_m_forward()
    175c:	82 e3       	ldi	r24, 0x32	; 50
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	22 e3       	ldi	r18, 0x32	; 50
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	f9 01       	movw	r30, r18
    1766:	20 81       	ld	r18, Z
    1768:	20 61       	ori	r18, 0x10	; 16
    176a:	fc 01       	movw	r30, r24
    176c:	20 83       	st	Z, r18
    176e:	85 e3       	ldi	r24, 0x35	; 53
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	25 e3       	ldi	r18, 0x35	; 53
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	f9 01       	movw	r30, r18
    1778:	20 81       	ld	r18, Z
    177a:	2e 7f       	andi	r18, 0xFE	; 254
    177c:	fc 01       	movw	r30, r24
    177e:	20 83       	st	Z, r18
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	80 93 94 01 	sts	0x0194, r24
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	80 93 93 01 	sts	0x0193, r24
    178c:	82 e3       	ldi	r24, 0x32	; 50
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	22 e3       	ldi	r18, 0x32	; 50
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	20 81       	ld	r18, Z
    1798:	20 62       	ori	r18, 0x20	; 32
    179a:	fc 01       	movw	r30, r24
    179c:	20 83       	st	Z, r18
    179e:	82 e3       	ldi	r24, 0x32	; 50
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	22 e3       	ldi	r18, 0x32	; 50
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	f9 01       	movw	r30, r18
    17a8:	20 81       	ld	r18, Z
    17aa:	2f 7b       	andi	r18, 0xBF	; 191
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 83       	st	Z, r18
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	80 93 a5 01 	sts	0x01A5, r24
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 0;
    17bc:	10 92 a7 01 	sts	0x01A7, r1
    17c0:	10 92 a6 01 	sts	0x01A6, r1
			l_motor.rpm = 100;
    17c4:	84 e6       	ldi	r24, 0x64	; 100
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	90 93 96 01 	sts	0x0196, r25
    17cc:	80 93 95 01 	sts	0x0195, r24
			return;
    17d0:	00 00       	nop
    17d2:	4b c0       	rjmp	.+150    	; 0x186a <state_right_turn_logic+0x162>
		}
		
		if (tmr_exp(&state_timer)){
    17d4:	8a e6       	ldi	r24, 0x6A	; 106
    17d6:	91 e0       	ldi	r25, 0x01	; 1
    17d8:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    17dc:	88 23       	and	r24, r24
    17de:	09 f4       	brne	.+2      	; 0x17e2 <state_right_turn_logic+0xda>
    17e0:	44 c0       	rjmp	.+136    	; 0x186a <state_right_turn_logic+0x162>
			set_m_backward()
    17e2:	85 e3       	ldi	r24, 0x35	; 53
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	25 e3       	ldi	r18, 0x35	; 53
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	f9 01       	movw	r30, r18
    17ec:	20 81       	ld	r18, Z
    17ee:	21 60       	ori	r18, 0x01	; 1
    17f0:	fc 01       	movw	r30, r24
    17f2:	20 83       	st	Z, r18
    17f4:	82 e3       	ldi	r24, 0x32	; 50
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	22 e3       	ldi	r18, 0x32	; 50
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	f9 01       	movw	r30, r18
    17fe:	20 81       	ld	r18, Z
    1800:	2f 7e       	andi	r18, 0xEF	; 239
    1802:	fc 01       	movw	r30, r24
    1804:	20 83       	st	Z, r18
    1806:	8f ef       	ldi	r24, 0xFF	; 255
    1808:	80 93 94 01 	sts	0x0194, r24
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	80 93 93 01 	sts	0x0193, r24
    1812:	82 e3       	ldi	r24, 0x32	; 50
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	22 e3       	ldi	r18, 0x32	; 50
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	f9 01       	movw	r30, r18
    181c:	20 81       	ld	r18, Z
    181e:	20 64       	ori	r18, 0x40	; 64
    1820:	fc 01       	movw	r30, r24
    1822:	20 83       	st	Z, r18
    1824:	82 e3       	ldi	r24, 0x32	; 50
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	22 e3       	ldi	r18, 0x32	; 50
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	f9 01       	movw	r30, r18
    182e:	20 81       	ld	r18, Z
    1830:	2f 7d       	andi	r18, 0xDF	; 223
    1832:	fc 01       	movw	r30, r24
    1834:	20 83       	st	Z, r18
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	80 93 a5 01 	sts	0x01A5, r24
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 0;
    1842:	10 92 a7 01 	sts	0x01A7, r1
    1846:	10 92 a6 01 	sts	0x01A6, r1
			l_motor.rpm = 0;
    184a:	10 92 96 01 	sts	0x0196, r1
    184e:	10 92 95 01 	sts	0x0195, r1
			set_state(state_last_go_ahead_logic);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	80 93 11 01 	sts	0x0111, r24
    1858:	8e e3       	ldi	r24, 0x3E	; 62
    185a:	9c e0       	ldi	r25, 0x0C	; 12
    185c:	90 93 5f 01 	sts	0x015F, r25
    1860:	80 93 5e 01 	sts	0x015E, r24
			state_last_go_ahead_data.not_first_run = false;
    1864:	10 92 64 01 	sts	0x0164, r1
			return;
    1868:	00 00       	nop
		}
}
    186a:	29 96       	adiw	r28, 0x09	; 9
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <state_last_go_ahead_logic>:

void state_last_go_ahead_logic() {
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	29 97       	sbiw	r28, 0x09	; 9
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
	if (state_last_go_ahead_data.not_first_run == false){
    1890:	90 91 64 01 	lds	r25, 0x0164
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	89 27       	eor	r24, r25
    1898:	88 23       	and	r24, r24
    189a:	09 f4       	brne	.+2      	; 0x189e <state_last_go_ahead_logic+0x22>
    189c:	52 c0       	rjmp	.+164    	; 0x1942 <state_last_go_ahead_logic+0xc6>
			state_last_go_ahead_data.not_first_run = true;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	80 93 64 01 	sts	0x0164, r24
			enable_features.adc = true;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	80 93 47 01 	sts	0x0147, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_LAST_GO_AHEAD};
    18aa:	29 e0       	ldi	r18, 0x09	; 9
    18ac:	eb ee       	ldi	r30, 0xEB	; 235
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	ce 01       	movw	r24, r28
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	dc 01       	movw	r26, r24
    18b6:	01 90       	ld	r0, Z+
    18b8:	0d 92       	st	X+, r0
    18ba:	2a 95       	dec	r18
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <state_last_go_ahead_logic+0x3a>
			add_task(&system_state);
    18be:	ce 01       	movw	r24, r28
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			set_m_forward()
    18c6:	82 e3       	ldi	r24, 0x32	; 50
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	22 e3       	ldi	r18, 0x32	; 50
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	f9 01       	movw	r30, r18
    18d0:	20 81       	ld	r18, Z
    18d2:	20 61       	ori	r18, 0x10	; 16
    18d4:	fc 01       	movw	r30, r24
    18d6:	20 83       	st	Z, r18
    18d8:	85 e3       	ldi	r24, 0x35	; 53
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	25 e3       	ldi	r18, 0x35	; 53
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	f9 01       	movw	r30, r18
    18e2:	20 81       	ld	r18, Z
    18e4:	2e 7f       	andi	r18, 0xFE	; 254
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 83       	st	Z, r18
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 93 94 01 	sts	0x0194, r24
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	80 93 93 01 	sts	0x0193, r24
    18f6:	82 e3       	ldi	r24, 0x32	; 50
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	22 e3       	ldi	r18, 0x32	; 50
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	f9 01       	movw	r30, r18
    1900:	20 81       	ld	r18, Z
    1902:	20 62       	ori	r18, 0x20	; 32
    1904:	fc 01       	movw	r30, r24
    1906:	20 83       	st	Z, r18
    1908:	82 e3       	ldi	r24, 0x32	; 50
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	22 e3       	ldi	r18, 0x32	; 50
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	f9 01       	movw	r30, r18
    1912:	20 81       	ld	r18, Z
    1914:	2f 7b       	andi	r18, 0xBF	; 191
    1916:	fc 01       	movw	r30, r24
    1918:	20 83       	st	Z, r18
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 a5 01 	sts	0x01A5, r24
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 100;
    1926:	84 e6       	ldi	r24, 0x64	; 100
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	90 93 a7 01 	sts	0x01A7, r25
    192e:	80 93 a6 01 	sts	0x01A6, r24
			l_motor.rpm = 100;
    1932:	84 e6       	ldi	r24, 0x64	; 100
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	90 93 96 01 	sts	0x0196, r25
    193a:	80 93 95 01 	sts	0x0195, r24
			return;
    193e:	00 00       	nop
    1940:	5d c0       	rjmp	.+186    	; 0x19fc <state_last_go_ahead_logic+0x180>
		}
		
	if (new_data_available){
    1942:	80 91 4c 01 	lds	r24, 0x014C
    1946:	88 23       	and	r24, r24
    1948:	09 f4       	brne	.+2      	; 0x194c <state_last_go_ahead_logic+0xd0>
    194a:	58 c0       	rjmp	.+176    	; 0x19fc <state_last_go_ahead_logic+0x180>
		new_data_available = false;
    194c:	10 92 4c 01 	sts	0x014C, r1
		if (result0 < STATE_LAST_GO_AHEAD_MAXIMAL_VOLTAGE+1 && result0 > STATE_LAST_GO_AHEAD_MINIMAL_VOLTAGE-1)
    1950:	80 91 50 01 	lds	r24, 0x0150
    1954:	90 91 51 01 	lds	r25, 0x0151
    1958:	89 3e       	cpi	r24, 0xE9	; 233
    195a:	f3 e0       	ldi	r31, 0x03	; 3
    195c:	9f 07       	cpc	r25, r31
    195e:	08 f0       	brcs	.+2      	; 0x1962 <state_last_go_ahead_logic+0xe6>
    1960:	4d c0       	rjmp	.+154    	; 0x19fc <state_last_go_ahead_logic+0x180>
    1962:	80 91 50 01 	lds	r24, 0x0150
    1966:	90 91 51 01 	lds	r25, 0x0151
    196a:	80 39       	cpi	r24, 0x90	; 144
    196c:	21 e0       	ldi	r18, 0x01	; 1
    196e:	92 07       	cpc	r25, r18
    1970:	08 f4       	brcc	.+2      	; 0x1974 <state_last_go_ahead_logic+0xf8>
    1972:	44 c0       	rjmp	.+136    	; 0x19fc <state_last_go_ahead_logic+0x180>
		{
			set_m_backward()
    1974:	85 e3       	ldi	r24, 0x35	; 53
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	25 e3       	ldi	r18, 0x35	; 53
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	f9 01       	movw	r30, r18
    197e:	20 81       	ld	r18, Z
    1980:	21 60       	ori	r18, 0x01	; 1
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18
    1986:	82 e3       	ldi	r24, 0x32	; 50
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	22 e3       	ldi	r18, 0x32	; 50
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	f9 01       	movw	r30, r18
    1990:	20 81       	ld	r18, Z
    1992:	2f 7e       	andi	r18, 0xEF	; 239
    1994:	fc 01       	movw	r30, r24
    1996:	20 83       	st	Z, r18
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	80 93 94 01 	sts	0x0194, r24
    199e:	8f ef       	ldi	r24, 0xFF	; 255
    19a0:	80 93 93 01 	sts	0x0193, r24
    19a4:	82 e3       	ldi	r24, 0x32	; 50
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	22 e3       	ldi	r18, 0x32	; 50
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	f9 01       	movw	r30, r18
    19ae:	20 81       	ld	r18, Z
    19b0:	20 64       	ori	r18, 0x40	; 64
    19b2:	fc 01       	movw	r30, r24
    19b4:	20 83       	st	Z, r18
    19b6:	82 e3       	ldi	r24, 0x32	; 50
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	22 e3       	ldi	r18, 0x32	; 50
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	f9 01       	movw	r30, r18
    19c0:	20 81       	ld	r18, Z
    19c2:	2f 7d       	andi	r18, 0xDF	; 223
    19c4:	fc 01       	movw	r30, r24
    19c6:	20 83       	st	Z, r18
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	80 93 a5 01 	sts	0x01A5, r24
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	80 93 a4 01 	sts	0x01A4, r24
 			r_motor.rpm = 0;
    19d4:	10 92 a7 01 	sts	0x01A7, r1
    19d8:	10 92 a6 01 	sts	0x01A6, r1
 			l_motor.rpm = 0;
    19dc:	10 92 96 01 	sts	0x0196, r1
    19e0:	10 92 95 01 	sts	0x0195, r1
			set_state(state_finish_logic);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 11 01 	sts	0x0111, r24
    19ea:	87 e0       	ldi	r24, 0x07	; 7
    19ec:	9d e0       	ldi	r25, 0x0D	; 13
    19ee:	90 93 5f 01 	sts	0x015F, r25
    19f2:	80 93 5e 01 	sts	0x015E, r24
			state_finish_data.not_first_run = false;
    19f6:	10 92 75 01 	sts	0x0175, r1
			return;
    19fa:	00 00       	nop
		}
	}
		
}
    19fc:	29 96       	adiw	r28, 0x09	; 9
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <state_finish_logic>:

void state_finish_logic() {//TODO: does it need to be called more than once
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	29 97       	sbiw	r28, 0x09	; 9
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
	if (state_finish_data.not_first_run == false){
    1a22:	90 91 75 01 	lds	r25, 0x0175
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	89 27       	eor	r24, r25
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <state_finish_logic+0x22>
    1a2e:	49 c0       	rjmp	.+146    	; 0x1ac2 <state_finish_logic+0xb4>
			state_finish_data.not_first_run = true;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	80 93 75 01 	sts	0x0175, r24
			task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_FINISH};
    1a36:	29 e0       	ldi	r18, 0x09	; 9
    1a38:	e4 ef       	ldi	r30, 0xF4	; 244
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	dc 01       	movw	r26, r24
    1a42:	01 90       	ld	r0, Z+
    1a44:	0d 92       	st	X+, r0
    1a46:	2a 95       	dec	r18
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <state_finish_logic+0x34>
			add_task(&system_state);
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
			set_m_backward()
    1a52:	85 e3       	ldi	r24, 0x35	; 53
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	25 e3       	ldi	r18, 0x35	; 53
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	f9 01       	movw	r30, r18
    1a5c:	20 81       	ld	r18, Z
    1a5e:	21 60       	ori	r18, 0x01	; 1
    1a60:	fc 01       	movw	r30, r24
    1a62:	20 83       	st	Z, r18
    1a64:	82 e3       	ldi	r24, 0x32	; 50
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	22 e3       	ldi	r18, 0x32	; 50
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	20 81       	ld	r18, Z
    1a70:	2f 7e       	andi	r18, 0xEF	; 239
    1a72:	fc 01       	movw	r30, r24
    1a74:	20 83       	st	Z, r18
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	80 93 94 01 	sts	0x0194, r24
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	80 93 93 01 	sts	0x0193, r24
    1a82:	82 e3       	ldi	r24, 0x32	; 50
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	22 e3       	ldi	r18, 0x32	; 50
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	f9 01       	movw	r30, r18
    1a8c:	20 81       	ld	r18, Z
    1a8e:	20 64       	ori	r18, 0x40	; 64
    1a90:	fc 01       	movw	r30, r24
    1a92:	20 83       	st	Z, r18
    1a94:	82 e3       	ldi	r24, 0x32	; 50
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	22 e3       	ldi	r18, 0x32	; 50
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	f9 01       	movw	r30, r18
    1a9e:	20 81       	ld	r18, Z
    1aa0:	2f 7d       	andi	r18, 0xDF	; 223
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	20 83       	st	Z, r18
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	80 93 a5 01 	sts	0x01A5, r24
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	80 93 a4 01 	sts	0x01A4, r24
			r_motor.rpm = 0;
    1ab2:	10 92 a7 01 	sts	0x01A7, r1
    1ab6:	10 92 a6 01 	sts	0x01A6, r1
			l_motor.rpm = 0;
    1aba:	10 92 96 01 	sts	0x0196, r1
    1abe:	10 92 95 01 	sts	0x0195, r1
		}
}
    1ac2:	29 96       	adiw	r28, 0x09	; 9
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <state_take_over_control_logic>:

void state_take_over_control_logic() {
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <start_line>:
	read_switches();
	send_led_info();
}

void start_line(task_t *task)
{
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <start_line+0x6>
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
	if (task->data.u8[3]>0)
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	fc 01       	movw	r30, r24
    1af6:	80 85       	ldd	r24, Z+8	; 0x08
    1af8:	88 23       	and	r24, r24
    1afa:	b1 f1       	breq	.+108    	; 0x1b68 <start_line+0x86>
	{
		status.system.start_line=1;
    1afc:	80 91 be 01 	lds	r24, 0x01BE
    1b00:	80 61       	ori	r24, 0x10	; 16
    1b02:	80 93 be 01 	sts	0x01BE, r24
		l_motor.ref_rpm=task->data.u8[3]*2;
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	80 85       	ldd	r24, Z+8	; 0x08
    1b0e:	88 2f       	mov	r24, r24
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	90 93 98 01 	sts	0x0198, r25
    1b1a:	80 93 97 01 	sts	0x0197, r24
		r_motor.ref_rpm=task->data.u8[3]*2;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	fc 01       	movw	r30, r24
    1b24:	80 85       	ldd	r24, Z+8	; 0x08
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	90 93 a9 01 	sts	0x01A9, r25
    1b32:	80 93 a8 01 	sts	0x01A8, r24
		l_motor.rpm=task->data.u8[3]*2;
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	80 85       	ldd	r24, Z+8	; 0x08
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	90 93 96 01 	sts	0x0196, r25
    1b4a:	80 93 95 01 	sts	0x0195, r24
		r_motor.rpm=task->data.u8[3]*2;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	fc 01       	movw	r30, r24
    1b54:	80 85       	ldd	r24, Z+8	; 0x08
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	90 93 a7 01 	sts	0x01A7, r25
    1b62:	80 93 a6 01 	sts	0x01A6, r24
    1b66:	15 c0       	rjmp	.+42     	; 0x1b92 <start_line+0xb0>
	}
	else
	{
		status.system.start_line=0;
    1b68:	80 91 be 01 	lds	r24, 0x01BE
    1b6c:	8f 7e       	andi	r24, 0xEF	; 239
    1b6e:	80 93 be 01 	sts	0x01BE, r24
		l_motor.ref_rpm=0;
    1b72:	10 92 98 01 	sts	0x0198, r1
    1b76:	10 92 97 01 	sts	0x0197, r1
		r_motor.ref_rpm=0;
    1b7a:	10 92 a9 01 	sts	0x01A9, r1
    1b7e:	10 92 a8 01 	sts	0x01A8, r1
		l_motor.rpm=0;
    1b82:	10 92 96 01 	sts	0x0196, r1
    1b86:	10 92 95 01 	sts	0x0195, r1
		r_motor.rpm=0;
    1b8a:	10 92 a7 01 	sts	0x01A7, r1
    1b8e:	10 92 a6 01 	sts	0x01A6, r1
	}
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	08 95       	ret

00001b9c <set_l_Kp>:

void set_l_Kp(task_t *task)
{
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	2b 97       	sbiw	r28, 0x0b	; 11
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	9b 87       	std	Y+11, r25	; 0x0b
    1bb2:	8a 87       	std	Y+10, r24	; 0x0a
	Kp=task->data.u8[3];
    1bb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb8:	fc 01       	movw	r30, r24
    1bba:	80 85       	ldd	r24, Z+8	; 0x08
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	90 93 67 00 	sts	0x0067, r25
    1bc4:	80 93 66 00 	sts	0x0066, r24
	task_t led_info  = {.data.command = PID_L_KP, .data.value = Kp};add_task(&led_info);
    1bc8:	29 e0       	ldi	r18, 0x09	; 9
    1bca:	ce 01       	movw	r24, r28
    1bcc:	01 96       	adiw	r24, 0x01	; 1
    1bce:	fc 01       	movw	r30, r24
    1bd0:	32 2f       	mov	r19, r18
    1bd2:	11 92       	st	Z+, r1
    1bd4:	3a 95       	dec	r19
    1bd6:	e9 f7       	brne	.-6      	; 0x1bd2 <set_l_Kp+0x36>
    1bd8:	8b e2       	ldi	r24, 0x2B	; 43
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	80 91 66 00 	lds	r24, 0x0066
    1be0:	90 91 67 00 	lds	r25, 0x0067
    1be4:	aa 27       	eor	r26, r26
    1be6:	97 fd       	sbrc	r25, 7
    1be8:	a0 95       	com	r26
    1bea:	ba 2f       	mov	r27, r26
    1bec:	8e 83       	std	Y+6, r24	; 0x06
    1bee:	9f 83       	std	Y+7, r25	; 0x07
    1bf0:	a8 87       	std	Y+8, r26	; 0x08
    1bf2:	b9 87       	std	Y+9, r27	; 0x09
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    1bfc:	2b 96       	adiw	r28, 0x0b	; 11
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	08 95       	ret

00001c0e <set_l_Ki>:

void set_l_Ki(task_t *task)
{
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	2b 97       	sbiw	r28, 0x0b	; 11
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	9b 87       	std	Y+11, r25	; 0x0b
    1c24:	8a 87       	std	Y+10, r24	; 0x0a
	Ki=task->data.u8[3];
    1c26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	80 85       	ldd	r24, Z+8	; 0x08
    1c2e:	88 2f       	mov	r24, r24
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	90 93 13 01 	sts	0x0113, r25
    1c36:	80 93 12 01 	sts	0x0112, r24
	task_t led_info  = {.data.command = PID_L_KI, .data.value = Ki};add_task(&led_info);
    1c3a:	29 e0       	ldi	r18, 0x09	; 9
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	fc 01       	movw	r30, r24
    1c42:	32 2f       	mov	r19, r18
    1c44:	11 92       	st	Z+, r1
    1c46:	3a 95       	dec	r19
    1c48:	e9 f7       	brne	.-6      	; 0x1c44 <set_l_Ki+0x36>
    1c4a:	8c e2       	ldi	r24, 0x2C	; 44
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	80 91 12 01 	lds	r24, 0x0112
    1c52:	90 91 13 01 	lds	r25, 0x0113
    1c56:	aa 27       	eor	r26, r26
    1c58:	97 fd       	sbrc	r25, 7
    1c5a:	a0 95       	com	r26
    1c5c:	ba 2f       	mov	r27, r26
    1c5e:	8e 83       	std	Y+6, r24	; 0x06
    1c60:	9f 83       	std	Y+7, r25	; 0x07
    1c62:	a8 87       	std	Y+8, r26	; 0x08
    1c64:	b9 87       	std	Y+9, r27	; 0x09
    1c66:	ce 01       	movw	r24, r28
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    1c6e:	2b 96       	adiw	r28, 0x0b	; 11
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <set_l_Kd>:

void set_l_Kd(task_t *task)
{
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	2b 97       	sbiw	r28, 0x0b	; 11
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	9b 87       	std	Y+11, r25	; 0x0b
    1c96:	8a 87       	std	Y+10, r24	; 0x0a
	Kd=task->data.u8[3];
    1c98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	80 85       	ldd	r24, Z+8	; 0x08
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	90 93 15 01 	sts	0x0115, r25
    1ca8:	80 93 14 01 	sts	0x0114, r24
	task_t led_info  = {.data.command = PID_L_KD, .data.value = Kd};add_task(&led_info);
    1cac:	29 e0       	ldi	r18, 0x09	; 9
    1cae:	ce 01       	movw	r24, r28
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	32 2f       	mov	r19, r18
    1cb6:	11 92       	st	Z+, r1
    1cb8:	3a 95       	dec	r19
    1cba:	e9 f7       	brne	.-6      	; 0x1cb6 <set_l_Kd+0x36>
    1cbc:	8d e2       	ldi	r24, 0x2D	; 45
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	80 91 14 01 	lds	r24, 0x0114
    1cc4:	90 91 15 01 	lds	r25, 0x0115
    1cc8:	aa 27       	eor	r26, r26
    1cca:	97 fd       	sbrc	r25, 7
    1ccc:	a0 95       	com	r26
    1cce:	ba 2f       	mov	r27, r26
    1cd0:	8e 83       	std	Y+6, r24	; 0x06
    1cd2:	9f 83       	std	Y+7, r25	; 0x07
    1cd4:	a8 87       	std	Y+8, r26	; 0x08
    1cd6:	b9 87       	std	Y+9, r27	; 0x09
    1cd8:	ce 01       	movw	r24, r28
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    1ce0:	2b 96       	adiw	r28, 0x0b	; 11
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	de bf       	out	0x3e, r29	; 62
    1ce8:	0f be       	out	0x3f, r0	; 63
    1cea:	cd bf       	out	0x3d, r28	; 61
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <set_err4>:

void set_err4(task_t *task)
{
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	2b 97       	sbiw	r28, 0x0b	; 11
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	9b 87       	std	Y+11, r25	; 0x0b
    1d08:	8a 87       	std	Y+10, r24	; 0x0a
	err4=task->data.u8[3];
    1d0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d0e:	fc 01       	movw	r30, r24
    1d10:	80 85       	ldd	r24, Z+8	; 0x08
    1d12:	80 93 68 00 	sts	0x0068, r24
	task_t led_info  = {.data.command = PID_ERR4, .data.value = err4};add_task(&led_info);
    1d16:	29 e0       	ldi	r18, 0x09	; 9
    1d18:	ce 01       	movw	r24, r28
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	32 2f       	mov	r19, r18
    1d20:	11 92       	st	Z+, r1
    1d22:	3a 95       	dec	r19
    1d24:	e9 f7       	brne	.-6      	; 0x1d20 <set_err4+0x2e>
    1d26:	80 e3       	ldi	r24, 0x30	; 48
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	80 91 68 00 	lds	r24, 0x0068
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	a0 e0       	ldi	r26, 0x00	; 0
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	8e 83       	std	Y+6, r24	; 0x06
    1d38:	9f 83       	std	Y+7, r25	; 0x07
    1d3a:	a8 87       	std	Y+8, r26	; 0x08
    1d3c:	b9 87       	std	Y+9, r27	; 0x09
    1d3e:	ce 01       	movw	r24, r28
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    1d46:	2b 96       	adiw	r28, 0x0b	; 11
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <set_err5>:

void set_err5(task_t *task)
{
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	2b 97       	sbiw	r28, 0x0b	; 11
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	9b 87       	std	Y+11, r25	; 0x0b
    1d6e:	8a 87       	std	Y+10, r24	; 0x0a
	err5=task->data.u8[3];
    1d70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d74:	fc 01       	movw	r30, r24
    1d76:	80 85       	ldd	r24, Z+8	; 0x08
    1d78:	80 93 69 00 	sts	0x0069, r24
	task_t led_info  = {.data.command = PID_ERR5, .data.value = err5};add_task(&led_info);
    1d7c:	29 e0       	ldi	r18, 0x09	; 9
    1d7e:	ce 01       	movw	r24, r28
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	fc 01       	movw	r30, r24
    1d84:	32 2f       	mov	r19, r18
    1d86:	11 92       	st	Z+, r1
    1d88:	3a 95       	dec	r19
    1d8a:	e9 f7       	brne	.-6      	; 0x1d86 <set_err5+0x2e>
    1d8c:	81 e3       	ldi	r24, 0x31	; 49
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	80 91 69 00 	lds	r24, 0x0069
    1d94:	88 2f       	mov	r24, r24
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a0 e0       	ldi	r26, 0x00	; 0
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	8e 83       	std	Y+6, r24	; 0x06
    1d9e:	9f 83       	std	Y+7, r25	; 0x07
    1da0:	a8 87       	std	Y+8, r26	; 0x08
    1da2:	b9 87       	std	Y+9, r27	; 0x09
    1da4:	ce 01       	movw	r24, r28
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    1dac:	2b 96       	adiw	r28, 0x0b	; 11
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	08 95       	ret

00001dbe <set_err6>:

void set_err6(task_t *task)
{
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	2b 97       	sbiw	r28, 0x0b	; 11
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	9b 87       	std	Y+11, r25	; 0x0b
    1dd4:	8a 87       	std	Y+10, r24	; 0x0a
	err6=task->data.u8[3];
    1dd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dda:	fc 01       	movw	r30, r24
    1ddc:	80 85       	ldd	r24, Z+8	; 0x08
    1dde:	80 93 6a 00 	sts	0x006A, r24
	task_t led_info  = {.data.command = PID_ERR6, .data.value = err6};add_task(&led_info);
    1de2:	29 e0       	ldi	r18, 0x09	; 9
    1de4:	ce 01       	movw	r24, r28
    1de6:	01 96       	adiw	r24, 0x01	; 1
    1de8:	fc 01       	movw	r30, r24
    1dea:	32 2f       	mov	r19, r18
    1dec:	11 92       	st	Z+, r1
    1dee:	3a 95       	dec	r19
    1df0:	e9 f7       	brne	.-6      	; 0x1dec <set_err6+0x2e>
    1df2:	82 e3       	ldi	r24, 0x32	; 50
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	80 91 6a 00 	lds	r24, 0x006A
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e0       	ldi	r26, 0x00	; 0
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	8e 83       	std	Y+6, r24	; 0x06
    1e04:	9f 83       	std	Y+7, r25	; 0x07
    1e06:	a8 87       	std	Y+8, r26	; 0x08
    1e08:	b9 87       	std	Y+9, r27	; 0x09
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    1e12:	2b 96       	adiw	r28, 0x0b	; 11
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	08 95       	ret

00001e24 <set_err_p1>:

void set_err_p1(task_t *task)
{
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	6d 97       	sbiw	r28, 0x1d	; 29
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	9d 8f       	std	Y+29, r25	; 0x1d
    1e3a:	8c 8f       	std	Y+28, r24	; 0x1c
	err4++;
    1e3c:	80 91 68 00 	lds	r24, 0x0068
    1e40:	8f 5f       	subi	r24, 0xFF	; 255
    1e42:	80 93 68 00 	sts	0x0068, r24
	err5++;
    1e46:	80 91 69 00 	lds	r24, 0x0069
    1e4a:	8f 5f       	subi	r24, 0xFF	; 255
    1e4c:	80 93 69 00 	sts	0x0069, r24
	err6++;
    1e50:	80 91 6a 00 	lds	r24, 0x006A
    1e54:	8f 5f       	subi	r24, 0xFF	; 255
    1e56:	80 93 6a 00 	sts	0x006A, r24
	task_t led_info  = {.data.command = PID_ERR4, .data.value = err4};add_task(&led_info);
    1e5a:	29 e0       	ldi	r18, 0x09	; 9
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	fc 01       	movw	r30, r24
    1e62:	32 2f       	mov	r19, r18
    1e64:	11 92       	st	Z+, r1
    1e66:	3a 95       	dec	r19
    1e68:	e9 f7       	brne	.-6      	; 0x1e64 <set_err_p1+0x40>
    1e6a:	80 e3       	ldi	r24, 0x30	; 48
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    1e6e:	80 91 68 00 	lds	r24, 0x0068
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a0 e0       	ldi	r26, 0x00	; 0
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	8e 83       	std	Y+6, r24	; 0x06
    1e7c:	9f 83       	std	Y+7, r25	; 0x07
    1e7e:	a8 87       	std	Y+8, r26	; 0x08
    1e80:	b9 87       	std	Y+9, r27	; 0x09
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
	task_t led_info1  = {.data.command = PID_ERR5, .data.value = err5};add_task(&led_info);
    1e8a:	29 e0       	ldi	r18, 0x09	; 9
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	0a 96       	adiw	r24, 0x0a	; 10
    1e90:	fc 01       	movw	r30, r24
    1e92:	32 2f       	mov	r19, r18
    1e94:	11 92       	st	Z+, r1
    1e96:	3a 95       	dec	r19
    1e98:	e9 f7       	brne	.-6      	; 0x1e94 <set_err_p1+0x70>
    1e9a:	81 e3       	ldi	r24, 0x31	; 49
    1e9c:	8a 87       	std	Y+10, r24	; 0x0a
    1e9e:	80 91 69 00 	lds	r24, 0x0069
    1ea2:	88 2f       	mov	r24, r24
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a0 e0       	ldi	r26, 0x00	; 0
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	8f 87       	std	Y+15, r24	; 0x0f
    1eac:	98 8b       	std	Y+16, r25	; 0x10
    1eae:	a9 8b       	std	Y+17, r26	; 0x11
    1eb0:	ba 8b       	std	Y+18, r27	; 0x12
    1eb2:	ce 01       	movw	r24, r28
    1eb4:	01 96       	adiw	r24, 0x01	; 1
    1eb6:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
	task_t led_info2  = {.data.command = PID_ERR6, .data.value = err6};add_task(&led_info);
    1eba:	29 e0       	ldi	r18, 0x09	; 9
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	43 96       	adiw	r24, 0x13	; 19
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	32 2f       	mov	r19, r18
    1ec4:	11 92       	st	Z+, r1
    1ec6:	3a 95       	dec	r19
    1ec8:	e9 f7       	brne	.-6      	; 0x1ec4 <set_err_p1+0xa0>
    1eca:	82 e3       	ldi	r24, 0x32	; 50
    1ecc:	8b 8b       	std	Y+19, r24	; 0x13
    1ece:	80 91 6a 00 	lds	r24, 0x006A
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 e0       	ldi	r26, 0x00	; 0
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	88 8f       	std	Y+24, r24	; 0x18
    1edc:	99 8f       	std	Y+25, r25	; 0x19
    1ede:	aa 8f       	std	Y+26, r26	; 0x1a
    1ee0:	bb 8f       	std	Y+27, r27	; 0x1b
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    1eea:	6d 96       	adiw	r28, 0x1d	; 29
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	08 95       	ret

00001efc <set_pid>:

void set_pid(task_t *task)
{
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	6d 97       	sbiw	r28, 0x1d	; 29
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	9d 8f       	std	Y+29, r25	; 0x1d
    1f12:	8c 8f       	std	Y+28, r24	; 0x1c
	Kp=task->data.u8[0];
    1f14:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f16:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f18:	fc 01       	movw	r30, r24
    1f1a:	85 81       	ldd	r24, Z+5	; 0x05
    1f1c:	88 2f       	mov	r24, r24
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	90 93 67 00 	sts	0x0067, r25
    1f24:	80 93 66 00 	sts	0x0066, r24
	Ki=task->data.u8[1];
    1f28:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	86 81       	ldd	r24, Z+6	; 0x06
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	90 93 13 01 	sts	0x0113, r25
    1f38:	80 93 12 01 	sts	0x0112, r24
	Kd=task->data.u8[2];
    1f3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f40:	fc 01       	movw	r30, r24
    1f42:	87 81       	ldd	r24, Z+7	; 0x07
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	90 93 15 01 	sts	0x0115, r25
    1f4c:	80 93 14 01 	sts	0x0114, r24
	task_t led_info  = {.data.command = PID_L_KP, .data.value = Kp};add_task(&led_info);
    1f50:	29 e0       	ldi	r18, 0x09	; 9
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	fc 01       	movw	r30, r24
    1f58:	32 2f       	mov	r19, r18
    1f5a:	11 92       	st	Z+, r1
    1f5c:	3a 95       	dec	r19
    1f5e:	e9 f7       	brne	.-6      	; 0x1f5a <set_pid+0x5e>
    1f60:	8b e2       	ldi	r24, 0x2B	; 43
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	80 91 66 00 	lds	r24, 0x0066
    1f68:	90 91 67 00 	lds	r25, 0x0067
    1f6c:	aa 27       	eor	r26, r26
    1f6e:	97 fd       	sbrc	r25, 7
    1f70:	a0 95       	com	r26
    1f72:	ba 2f       	mov	r27, r26
    1f74:	8e 83       	std	Y+6, r24	; 0x06
    1f76:	9f 83       	std	Y+7, r25	; 0x07
    1f78:	a8 87       	std	Y+8, r26	; 0x08
    1f7a:	b9 87       	std	Y+9, r27	; 0x09
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
	task_t led_info1 = {.data.command = PID_L_KI, .data.value = Ki};add_task(&led_info1);
    1f84:	29 e0       	ldi	r18, 0x09	; 9
    1f86:	ce 01       	movw	r24, r28
    1f88:	0a 96       	adiw	r24, 0x0a	; 10
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	32 2f       	mov	r19, r18
    1f8e:	11 92       	st	Z+, r1
    1f90:	3a 95       	dec	r19
    1f92:	e9 f7       	brne	.-6      	; 0x1f8e <set_pid+0x92>
    1f94:	8c e2       	ldi	r24, 0x2C	; 44
    1f96:	8a 87       	std	Y+10, r24	; 0x0a
    1f98:	80 91 12 01 	lds	r24, 0x0112
    1f9c:	90 91 13 01 	lds	r25, 0x0113
    1fa0:	aa 27       	eor	r26, r26
    1fa2:	97 fd       	sbrc	r25, 7
    1fa4:	a0 95       	com	r26
    1fa6:	ba 2f       	mov	r27, r26
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
    1faa:	98 8b       	std	Y+16, r25	; 0x10
    1fac:	a9 8b       	std	Y+17, r26	; 0x11
    1fae:	ba 8b       	std	Y+18, r27	; 0x12
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	0a 96       	adiw	r24, 0x0a	; 10
    1fb4:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
	task_t led_info2 = {.data.command = PID_L_KD, .data.value = Kd};add_task(&led_info2);
    1fb8:	29 e0       	ldi	r18, 0x09	; 9
    1fba:	ce 01       	movw	r24, r28
    1fbc:	43 96       	adiw	r24, 0x13	; 19
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	32 2f       	mov	r19, r18
    1fc2:	11 92       	st	Z+, r1
    1fc4:	3a 95       	dec	r19
    1fc6:	e9 f7       	brne	.-6      	; 0x1fc2 <set_pid+0xc6>
    1fc8:	8d e2       	ldi	r24, 0x2D	; 45
    1fca:	8b 8b       	std	Y+19, r24	; 0x13
    1fcc:	80 91 14 01 	lds	r24, 0x0114
    1fd0:	90 91 15 01 	lds	r25, 0x0115
    1fd4:	aa 27       	eor	r26, r26
    1fd6:	97 fd       	sbrc	r25, 7
    1fd8:	a0 95       	com	r26
    1fda:	ba 2f       	mov	r27, r26
    1fdc:	88 8f       	std	Y+24, r24	; 0x18
    1fde:	99 8f       	std	Y+25, r25	; 0x19
    1fe0:	aa 8f       	std	Y+26, r26	; 0x1a
    1fe2:	bb 8f       	std	Y+27, r27	; 0x1b
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	43 96       	adiw	r24, 0x13	; 19
    1fe8:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    1fec:	6d 96       	adiw	r28, 0x1d	; 29
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	08 95       	ret

00001ffe <led_init>:
* \param
*
* \return void
*/
void led_init(void)
{
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
	set_pin_as_input(A,0);
    2006:	8a e3       	ldi	r24, 0x3A	; 58
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	2a e3       	ldi	r18, 0x3A	; 58
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	f9 01       	movw	r30, r18
    2010:	20 81       	ld	r18, Z
    2012:	2e 7f       	andi	r18, 0xFE	; 254
    2014:	fc 01       	movw	r30, r24
    2016:	20 83       	st	Z, r18
	set_pin_as_input(A,1);
    2018:	8a e3       	ldi	r24, 0x3A	; 58
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	2a e3       	ldi	r18, 0x3A	; 58
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	f9 01       	movw	r30, r18
    2022:	20 81       	ld	r18, Z
    2024:	2d 7f       	andi	r18, 0xFD	; 253
    2026:	fc 01       	movw	r30, r24
    2028:	20 83       	st	Z, r18
	set_pin_as_input(A,2);
    202a:	8a e3       	ldi	r24, 0x3A	; 58
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	2a e3       	ldi	r18, 0x3A	; 58
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	f9 01       	movw	r30, r18
    2034:	20 81       	ld	r18, Z
    2036:	2b 7f       	andi	r18, 0xFB	; 251
    2038:	fc 01       	movw	r30, r24
    203a:	20 83       	st	Z, r18
	set_pin_as_input(A,3);
    203c:	8a e3       	ldi	r24, 0x3A	; 58
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	2a e3       	ldi	r18, 0x3A	; 58
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	f9 01       	movw	r30, r18
    2046:	20 81       	ld	r18, Z
    2048:	27 7f       	andi	r18, 0xF7	; 247
    204a:	fc 01       	movw	r30, r24
    204c:	20 83       	st	Z, r18
	set_pin_as_input(A,4);
    204e:	8a e3       	ldi	r24, 0x3A	; 58
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	2a e3       	ldi	r18, 0x3A	; 58
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	f9 01       	movw	r30, r18
    2058:	20 81       	ld	r18, Z
    205a:	2f 7e       	andi	r18, 0xEF	; 239
    205c:	fc 01       	movw	r30, r24
    205e:	20 83       	st	Z, r18
	set_pin_as_input(A,5);
    2060:	8a e3       	ldi	r24, 0x3A	; 58
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	2a e3       	ldi	r18, 0x3A	; 58
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	f9 01       	movw	r30, r18
    206a:	20 81       	ld	r18, Z
    206c:	2f 7d       	andi	r18, 0xDF	; 223
    206e:	fc 01       	movw	r30, r24
    2070:	20 83       	st	Z, r18
	set_pin_as_input(B,0);
    2072:	87 e3       	ldi	r24, 0x37	; 55
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	27 e3       	ldi	r18, 0x37	; 55
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	f9 01       	movw	r30, r18
    207c:	20 81       	ld	r18, Z
    207e:	2e 7f       	andi	r18, 0xFE	; 254
    2080:	fc 01       	movw	r30, r24
    2082:	20 83       	st	Z, r18
	l_motor.ref_rpm=129;
    2084:	81 e8       	ldi	r24, 0x81	; 129
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	90 93 98 01 	sts	0x0198, r25
    208c:	80 93 97 01 	sts	0x0197, r24
	r_motor.ref_rpm=129;
    2090:	81 e8       	ldi	r24, 0x81	; 129
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	90 93 a9 01 	sts	0x01A9, r25
    2098:	80 93 a8 01 	sts	0x01A8, r24
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	08 95       	ret

000020a2 <int16_abs_Q>:
 * Calculates the absolute value of a 16bit int.
 * \param x Used to specify int16_t number.
 * \return Returns the absolute of the value.
 */
int16_t int16_abs_Q(int16_t x)
{
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <int16_abs_Q+0x6>
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <int16_abs_Q+0x8>
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	9c 83       	std	Y+4, r25	; 0x04
    20b0:	8b 83       	std	Y+3, r24	; 0x03
    int16_t y = (x >> 15);
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	99 0f       	add	r25, r25
    20b8:	88 0b       	sbc	r24, r24
    20ba:	98 2f       	mov	r25, r24
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
    return (x + y) ^ y;
    20c0:	2b 81       	ldd	r18, Y+3	; 0x03
    20c2:	3c 81       	ldd	r19, Y+4	; 0x04
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	9a 81       	ldd	r25, Y+2	; 0x02
    20c8:	28 0f       	add	r18, r24
    20ca:	39 1f       	adc	r19, r25
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	9a 81       	ldd	r25, Y+2	; 0x02
    20d0:	82 27       	eor	r24, r18
    20d2:	93 27       	eor	r25, r19
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	08 95       	ret

000020e2 <init_ext_int>:
* \param
*
* \return void
*/
void init_ext_int(void)
{
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
	set_int1_to_rising();
    20ea:	85 e5       	ldi	r24, 0x55	; 85
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	25 e5       	ldi	r18, 0x55	; 85
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	f9 01       	movw	r30, r18
    20f4:	20 81       	ld	r18, Z
    20f6:	2c 60       	ori	r18, 0x0C	; 12
    20f8:	fc 01       	movw	r30, r24
    20fa:	20 83       	st	Z, r18
	set_int0_to_rising();
    20fc:	85 e5       	ldi	r24, 0x55	; 85
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	25 e5       	ldi	r18, 0x55	; 85
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	f9 01       	movw	r30, r18
    2106:	20 81       	ld	r18, Z
    2108:	23 60       	ori	r18, 0x03	; 3
    210a:	fc 01       	movw	r30, r24
    210c:	20 83       	st	Z, r18
	eneable_external_int();
    210e:	8b e5       	ldi	r24, 0x5B	; 91
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	2b e5       	ldi	r18, 0x5B	; 91
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	f9 01       	movw	r30, r18
    2118:	20 81       	ld	r18, Z
    211a:	20 6c       	ori	r18, 0xC0	; 192
    211c:	fc 01       	movw	r30, r24
    211e:	20 83       	st	Z, r18
}
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	08 95       	ret

00002126 <init_pwm>:
*
* \param
*
* \return void
*/
void init_pwm(void){
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
	//
	TCCR0 |= (1 << WGM00)|(1 << COM01)|(1 << WGM01)|(1 << CS00); //fast pwm ,64 prescalar, 8 bit
    212e:	83 e5       	ldi	r24, 0x53	; 83
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	23 e5       	ldi	r18, 0x53	; 83
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	f9 01       	movw	r30, r18
    2138:	20 81       	ld	r18, Z
    213a:	29 66       	ori	r18, 0x69	; 105
    213c:	fc 01       	movw	r30, r24
    213e:	20 83       	st	Z, r18
	TCCR2 |= (1 << WGM20)|(1 << WGM21)|(1 << COM21)|(1 << CS20); //fast pwm, 64 prescalar, 8 bit
    2140:	85 e4       	ldi	r24, 0x45	; 69
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	25 e4       	ldi	r18, 0x45	; 69
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	f9 01       	movw	r30, r18
    214a:	20 81       	ld	r18, Z
    214c:	29 66       	ori	r18, 0x69	; 105
    214e:	fc 01       	movw	r30, r24
    2150:	20 83       	st	Z, r18
	
	set_pin_as_output(B,PB3);
    2152:	87 e3       	ldi	r24, 0x37	; 55
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	27 e3       	ldi	r18, 0x37	; 55
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	f9 01       	movw	r30, r18
    215c:	20 81       	ld	r18, Z
    215e:	28 60       	ori	r18, 0x08	; 8
    2160:	fc 01       	movw	r30, r24
    2162:	20 83       	st	Z, r18
	set_pin_as_output(D,PD7);
    2164:	81 e3       	ldi	r24, 0x31	; 49
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	21 e3       	ldi	r18, 0x31	; 49
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	f9 01       	movw	r30, r18
    216e:	20 81       	ld	r18, Z
    2170:	20 68       	ori	r18, 0x80	; 128
    2172:	fc 01       	movw	r30, r24
    2174:	20 83       	st	Z, r18
	set_pin_as_output(C,PC0);
    2176:	84 e3       	ldi	r24, 0x34	; 52
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	24 e3       	ldi	r18, 0x34	; 52
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	f9 01       	movw	r30, r18
    2180:	20 81       	ld	r18, Z
    2182:	21 60       	ori	r18, 0x01	; 1
    2184:	fc 01       	movw	r30, r24
    2186:	20 83       	st	Z, r18
	set_pin_as_output(D,PD4);
    2188:	81 e3       	ldi	r24, 0x31	; 49
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	21 e3       	ldi	r18, 0x31	; 49
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	f9 01       	movw	r30, r18
    2192:	20 81       	ld	r18, Z
    2194:	20 61       	ori	r18, 0x10	; 16
    2196:	fc 01       	movw	r30, r24
    2198:	20 83       	st	Z, r18
	set_pin_as_output(D,PD5);
    219a:	81 e3       	ldi	r24, 0x31	; 49
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	21 e3       	ldi	r18, 0x31	; 49
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	f9 01       	movw	r30, r18
    21a4:	20 81       	ld	r18, Z
    21a6:	20 62       	ori	r18, 0x20	; 32
    21a8:	fc 01       	movw	r30, r24
    21aa:	20 83       	st	Z, r18
	set_pin_as_output(D,PD6);
    21ac:	81 e3       	ldi	r24, 0x31	; 49
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	21 e3       	ldi	r18, 0x31	; 49
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	f9 01       	movw	r30, r18
    21b6:	20 81       	ld	r18, Z
    21b8:	20 64       	ori	r18, 0x40	; 64
    21ba:	fc 01       	movw	r30, r24
    21bc:	20 83       	st	Z, r18
}
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	08 95       	ret

000021c4 <set_movement>:
* \param d Used to specify Used to specyfy the direction
*
* \return void
*/
void set_movement(int16_t rpm, corner_t corner, direction_t d)
{
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <set_movement+0x6>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <set_movement+0x8>
    21cc:	1f 92       	push	r1
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	7c 83       	std	Y+4, r23	; 0x04
    21d8:	6b 83       	std	Y+3, r22	; 0x03
    21da:	4d 83       	std	Y+5, r20	; 0x05
	switch (d)
    21dc:	8d 81       	ldd	r24, Y+5	; 0x05
    21de:	99 27       	eor	r25, r25
    21e0:	87 fd       	sbrc	r24, 7
    21e2:	90 95       	com	r25
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	91 05       	cpc	r25, r1
    21e8:	09 f4       	brne	.+2      	; 0x21ec <set_movement+0x28>
    21ea:	72 c0       	rjmp	.+228    	; 0x22d0 <set_movement+0x10c>
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	91 05       	cpc	r25, r1
    21f0:	34 f4       	brge	.+12     	; 0x21fe <set_movement+0x3a>
    21f2:	8f 3f       	cpi	r24, 0xFF	; 255
    21f4:	2f ef       	ldi	r18, 0xFF	; 255
    21f6:	92 07       	cpc	r25, r18
    21f8:	09 f4       	brne	.+2      	; 0x21fc <set_movement+0x38>
    21fa:	9b c0       	rjmp	.+310    	; 0x2332 <set_movement+0x16e>
    21fc:	cb c0       	rjmp	.+406    	; 0x2394 <set_movement+0x1d0>
    21fe:	82 30       	cpi	r24, 0x02	; 2
    2200:	91 05       	cpc	r25, r1
    2202:	21 f0       	breq	.+8      	; 0x220c <set_movement+0x48>
    2204:	83 30       	cpi	r24, 0x03	; 3
    2206:	91 05       	cpc	r25, r1
    2208:	91 f1       	breq	.+100    	; 0x226e <set_movement+0xaa>
    220a:	c4 c0       	rjmp	.+392    	; 0x2394 <set_movement+0x1d0>
	{
		case LEFT:
		{
			set_l_m_backward();
    220c:	85 e3       	ldi	r24, 0x35	; 53
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	25 e3       	ldi	r18, 0x35	; 53
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	f9 01       	movw	r30, r18
    2216:	20 81       	ld	r18, Z
    2218:	21 60       	ori	r18, 0x01	; 1
    221a:	fc 01       	movw	r30, r24
    221c:	20 83       	st	Z, r18
    221e:	82 e3       	ldi	r24, 0x32	; 50
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	22 e3       	ldi	r18, 0x32	; 50
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	f9 01       	movw	r30, r18
    2228:	20 81       	ld	r18, Z
    222a:	2f 7e       	andi	r18, 0xEF	; 239
    222c:	fc 01       	movw	r30, r24
    222e:	20 83       	st	Z, r18
    2230:	8f ef       	ldi	r24, 0xFF	; 255
    2232:	80 93 94 01 	sts	0x0194, r24
    2236:	8f ef       	ldi	r24, 0xFF	; 255
    2238:	80 93 93 01 	sts	0x0193, r24
			set_r_m_forward();
    223c:	82 e3       	ldi	r24, 0x32	; 50
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	22 e3       	ldi	r18, 0x32	; 50
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	f9 01       	movw	r30, r18
    2246:	20 81       	ld	r18, Z
    2248:	20 62       	ori	r18, 0x20	; 32
    224a:	fc 01       	movw	r30, r24
    224c:	20 83       	st	Z, r18
    224e:	82 e3       	ldi	r24, 0x32	; 50
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	22 e3       	ldi	r18, 0x32	; 50
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	f9 01       	movw	r30, r18
    2258:	20 81       	ld	r18, Z
    225a:	2f 7b       	andi	r18, 0xBF	; 191
    225c:	fc 01       	movw	r30, r24
    225e:	20 83       	st	Z, r18
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	80 93 a5 01 	sts	0x01A5, r24
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	80 93 a4 01 	sts	0x01A4, r24
		}
		break;
    226c:	c4 c0       	rjmp	.+392    	; 0x23f6 <set_movement+0x232>
		case RIGHT:
		{
			set_l_m_forward();
    226e:	82 e3       	ldi	r24, 0x32	; 50
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	22 e3       	ldi	r18, 0x32	; 50
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	f9 01       	movw	r30, r18
    2278:	20 81       	ld	r18, Z
    227a:	20 61       	ori	r18, 0x10	; 16
    227c:	fc 01       	movw	r30, r24
    227e:	20 83       	st	Z, r18
    2280:	85 e3       	ldi	r24, 0x35	; 53
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	25 e3       	ldi	r18, 0x35	; 53
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	f9 01       	movw	r30, r18
    228a:	20 81       	ld	r18, Z
    228c:	2e 7f       	andi	r18, 0xFE	; 254
    228e:	fc 01       	movw	r30, r24
    2290:	20 83       	st	Z, r18
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	80 93 94 01 	sts	0x0194, r24
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	80 93 93 01 	sts	0x0193, r24
			set_r_m_backward();
    229e:	82 e3       	ldi	r24, 0x32	; 50
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	22 e3       	ldi	r18, 0x32	; 50
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	f9 01       	movw	r30, r18
    22a8:	20 81       	ld	r18, Z
    22aa:	20 64       	ori	r18, 0x40	; 64
    22ac:	fc 01       	movw	r30, r24
    22ae:	20 83       	st	Z, r18
    22b0:	82 e3       	ldi	r24, 0x32	; 50
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	22 e3       	ldi	r18, 0x32	; 50
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	f9 01       	movw	r30, r18
    22ba:	20 81       	ld	r18, Z
    22bc:	2f 7d       	andi	r18, 0xDF	; 223
    22be:	fc 01       	movw	r30, r24
    22c0:	20 83       	st	Z, r18
    22c2:	8f ef       	ldi	r24, 0xFF	; 255
    22c4:	80 93 a5 01 	sts	0x01A5, r24
    22c8:	8f ef       	ldi	r24, 0xFF	; 255
    22ca:	80 93 a4 01 	sts	0x01A4, r24
		}
		break;
    22ce:	93 c0       	rjmp	.+294    	; 0x23f6 <set_movement+0x232>
		case FORWARD:
		{
			set_l_m_forward();
    22d0:	82 e3       	ldi	r24, 0x32	; 50
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	22 e3       	ldi	r18, 0x32	; 50
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	f9 01       	movw	r30, r18
    22da:	20 81       	ld	r18, Z
    22dc:	20 61       	ori	r18, 0x10	; 16
    22de:	fc 01       	movw	r30, r24
    22e0:	20 83       	st	Z, r18
    22e2:	85 e3       	ldi	r24, 0x35	; 53
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	25 e3       	ldi	r18, 0x35	; 53
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	f9 01       	movw	r30, r18
    22ec:	20 81       	ld	r18, Z
    22ee:	2e 7f       	andi	r18, 0xFE	; 254
    22f0:	fc 01       	movw	r30, r24
    22f2:	20 83       	st	Z, r18
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	80 93 94 01 	sts	0x0194, r24
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	80 93 93 01 	sts	0x0193, r24
			set_r_m_forward();
    2300:	82 e3       	ldi	r24, 0x32	; 50
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	22 e3       	ldi	r18, 0x32	; 50
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	f9 01       	movw	r30, r18
    230a:	20 81       	ld	r18, Z
    230c:	20 62       	ori	r18, 0x20	; 32
    230e:	fc 01       	movw	r30, r24
    2310:	20 83       	st	Z, r18
    2312:	82 e3       	ldi	r24, 0x32	; 50
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	22 e3       	ldi	r18, 0x32	; 50
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	f9 01       	movw	r30, r18
    231c:	20 81       	ld	r18, Z
    231e:	2f 7b       	andi	r18, 0xBF	; 191
    2320:	fc 01       	movw	r30, r24
    2322:	20 83       	st	Z, r18
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	80 93 a5 01 	sts	0x01A5, r24
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	80 93 a4 01 	sts	0x01A4, r24
		}
		break;
    2330:	62 c0       	rjmp	.+196    	; 0x23f6 <set_movement+0x232>
		case BACKWARD:
		{
			set_l_m_backward();
    2332:	85 e3       	ldi	r24, 0x35	; 53
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	25 e3       	ldi	r18, 0x35	; 53
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	f9 01       	movw	r30, r18
    233c:	20 81       	ld	r18, Z
    233e:	21 60       	ori	r18, 0x01	; 1
    2340:	fc 01       	movw	r30, r24
    2342:	20 83       	st	Z, r18
    2344:	82 e3       	ldi	r24, 0x32	; 50
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	22 e3       	ldi	r18, 0x32	; 50
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	f9 01       	movw	r30, r18
    234e:	20 81       	ld	r18, Z
    2350:	2f 7e       	andi	r18, 0xEF	; 239
    2352:	fc 01       	movw	r30, r24
    2354:	20 83       	st	Z, r18
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	80 93 94 01 	sts	0x0194, r24
    235c:	8f ef       	ldi	r24, 0xFF	; 255
    235e:	80 93 93 01 	sts	0x0193, r24
			set_r_m_backward();
    2362:	82 e3       	ldi	r24, 0x32	; 50
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	22 e3       	ldi	r18, 0x32	; 50
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	f9 01       	movw	r30, r18
    236c:	20 81       	ld	r18, Z
    236e:	20 64       	ori	r18, 0x40	; 64
    2370:	fc 01       	movw	r30, r24
    2372:	20 83       	st	Z, r18
    2374:	82 e3       	ldi	r24, 0x32	; 50
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	22 e3       	ldi	r18, 0x32	; 50
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	f9 01       	movw	r30, r18
    237e:	20 81       	ld	r18, Z
    2380:	2f 7d       	andi	r18, 0xDF	; 223
    2382:	fc 01       	movw	r30, r24
    2384:	20 83       	st	Z, r18
    2386:	8f ef       	ldi	r24, 0xFF	; 255
    2388:	80 93 a5 01 	sts	0x01A5, r24
    238c:	8f ef       	ldi	r24, 0xFF	; 255
    238e:	80 93 a4 01 	sts	0x01A4, r24
		}
		break;
    2392:	31 c0       	rjmp	.+98     	; 0x23f6 <set_movement+0x232>
		default:
		{
			set_l_m_forward();
    2394:	82 e3       	ldi	r24, 0x32	; 50
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	22 e3       	ldi	r18, 0x32	; 50
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	f9 01       	movw	r30, r18
    239e:	20 81       	ld	r18, Z
    23a0:	20 61       	ori	r18, 0x10	; 16
    23a2:	fc 01       	movw	r30, r24
    23a4:	20 83       	st	Z, r18
    23a6:	85 e3       	ldi	r24, 0x35	; 53
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	25 e3       	ldi	r18, 0x35	; 53
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	f9 01       	movw	r30, r18
    23b0:	20 81       	ld	r18, Z
    23b2:	2e 7f       	andi	r18, 0xFE	; 254
    23b4:	fc 01       	movw	r30, r24
    23b6:	20 83       	st	Z, r18
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	80 93 94 01 	sts	0x0194, r24
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	80 93 93 01 	sts	0x0193, r24
			set_r_m_forward();
    23c4:	82 e3       	ldi	r24, 0x32	; 50
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	22 e3       	ldi	r18, 0x32	; 50
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	f9 01       	movw	r30, r18
    23ce:	20 81       	ld	r18, Z
    23d0:	20 62       	ori	r18, 0x20	; 32
    23d2:	fc 01       	movw	r30, r24
    23d4:	20 83       	st	Z, r18
    23d6:	82 e3       	ldi	r24, 0x32	; 50
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	22 e3       	ldi	r18, 0x32	; 50
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	f9 01       	movw	r30, r18
    23e0:	20 81       	ld	r18, Z
    23e2:	2f 7b       	andi	r18, 0xBF	; 191
    23e4:	fc 01       	movw	r30, r24
    23e6:	20 83       	st	Z, r18
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	80 93 a5 01 	sts	0x01A5, r24
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	80 93 a4 01 	sts	0x01A4, r24
		}
		break;
    23f4:	00 00       	nop
	}
	l_motor.rpm = rpm;
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	90 93 96 01 	sts	0x0196, r25
    23fe:	80 93 95 01 	sts	0x0195, r24
	r_motor.rpm = rpm;
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	90 93 a7 01 	sts	0x01A7, r25
    240a:	80 93 a6 01 	sts	0x01A6, r24
	l_motor.corner = corner;//TODO maybe close interrupts for all the assignments
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	90 93 8c 01 	sts	0x018C, r25
    2416:	80 93 8b 01 	sts	0x018B, r24
	r_motor.corner = corner;
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	90 93 9d 01 	sts	0x019D, r25
    2422:	80 93 9c 01 	sts	0x019C, r24
	r_motor.pulse_count=0;
    2426:	10 92 9b 01 	sts	0x019B, r1
    242a:	10 92 9a 01 	sts	0x019A, r1
	l_motor.pulse_count=0;
    242e:	10 92 8a 01 	sts	0x018A, r1
    2432:	10 92 89 01 	sts	0x0189, r1
}
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <set_movement_task>:
* \param task Used to specify a pointer to a specific received task.
*
* \return void
*/
void set_movement_task(task_t *task)
{
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	00 d0       	rcall	.+0      	; 0x244c <set_movement_task+0x6>
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
	static corner_t temp_corner= C0;
	switch (task->data.u8[2])
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	9a 81       	ldd	r25, Y+2	; 0x02
    2458:	fc 01       	movw	r30, r24
    245a:	87 81       	ldd	r24, Z+7	; 0x07
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	81 30       	cpi	r24, 0x01	; 1
    2462:	91 05       	cpc	r25, r1
    2464:	91 f0       	breq	.+36     	; 0x248a <set_movement_task+0x44>
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	91 05       	cpc	r25, r1
    246a:	1c f4       	brge	.+6      	; 0x2472 <set_movement_task+0x2c>
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	41 f0       	breq	.+16     	; 0x2480 <set_movement_task+0x3a>
    2470:	21 c0       	rjmp	.+66     	; 0x24b4 <set_movement_task+0x6e>
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	91 05       	cpc	r25, r1
    2476:	81 f0       	breq	.+32     	; 0x2498 <set_movement_task+0x52>
    2478:	83 30       	cpi	r24, 0x03	; 3
    247a:	91 05       	cpc	r25, r1
    247c:	a1 f0       	breq	.+40     	; 0x24a6 <set_movement_task+0x60>
    247e:	1a c0       	rjmp	.+52     	; 0x24b4 <set_movement_task+0x6e>
	{
		case 0:
			temp_corner = C0;
    2480:	10 92 17 01 	sts	0x0117, r1
    2484:	10 92 16 01 	sts	0x0116, r1
		break;
    2488:	1a c0       	rjmp	.+52     	; 0x24be <set_movement_task+0x78>
		case 1:
			temp_corner = C45;
    248a:	84 eb       	ldi	r24, 0xB4	; 180
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	90 93 17 01 	sts	0x0117, r25
    2492:	80 93 16 01 	sts	0x0116, r24
		break;
    2496:	13 c0       	rjmp	.+38     	; 0x24be <set_movement_task+0x78>
		case 2:
			temp_corner = C90;
    2498:	80 ee       	ldi	r24, 0xE0	; 224
    249a:	91 e0       	ldi	r25, 0x01	; 1
    249c:	90 93 17 01 	sts	0x0117, r25
    24a0:	80 93 16 01 	sts	0x0116, r24
		break;
    24a4:	0c c0       	rjmp	.+24     	; 0x24be <set_movement_task+0x78>
		case 3:
			temp_corner = C_FIND_BIT_MORE;
    24a6:	88 ec       	ldi	r24, 0xC8	; 200
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	90 93 17 01 	sts	0x0117, r25
    24ae:	80 93 16 01 	sts	0x0116, r24
		break;
    24b2:	05 c0       	rjmp	.+10     	; 0x24be <set_movement_task+0x78>
		default:
			temp_corner = C0;
    24b4:	10 92 17 01 	sts	0x0117, r1
    24b8:	10 92 16 01 	sts	0x0116, r1
		break;
    24bc:	00 00       	nop
	}
	set_movement(task->data.u8[3],temp_corner,task->data.u8[1]);
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	fc 01       	movw	r30, r24
    24c4:	86 81       	ldd	r24, Z+6	; 0x06
    24c6:	48 2f       	mov	r20, r24
    24c8:	20 91 16 01 	lds	r18, 0x0116
    24cc:	30 91 17 01 	lds	r19, 0x0117
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	9a 81       	ldd	r25, Y+2	; 0x02
    24d4:	fc 01       	movw	r30, r24
    24d6:	80 85       	ldd	r24, Z+8	; 0x08
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	b9 01       	movw	r22, r18
    24de:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
}
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	08 95       	ret

000024ec <set_rpm>:
* \param task Used to specify a pointer to a specific received task.
*
* \return void
*/
void set_rpm(task_t *task)
{
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	6c 97       	sbiw	r28, 0x1c	; 28
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	9c 8f       	std	Y+28, r25	; 0x1c
    2502:	8b 8f       	std	Y+27, r24	; 0x1b
	u32_union temp;
	temp.dw = task->data.value;
    2504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2508:	fc 01       	movw	r30, r24
    250a:	85 81       	ldd	r24, Z+5	; 0x05
    250c:	96 81       	ldd	r25, Z+6	; 0x06
    250e:	a7 81       	ldd	r26, Z+7	; 0x07
    2510:	b0 85       	ldd	r27, Z+8	; 0x08
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	af 83       	std	Y+7, r26	; 0x07
    2518:	b8 87       	std	Y+8, r27	; 0x08
	int16_t l = (int16_t)temp.w[1],r = (int16_t)temp.w[0];
    251a:	8f 81       	ldd	r24, Y+7	; 0x07
    251c:	98 85       	ldd	r25, Y+8	; 0x08
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	9c 83       	std	Y+4, r25	; 0x04
    2528:	8b 83       	std	Y+3, r24	; 0x03
	
	if (l>-1)
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	99 23       	and	r25, r25
    2530:	ec f1       	brlt	.+122    	; 0x25ac <set_rpm+0xc0>
	{
		set_m_forward()
    2532:	82 e3       	ldi	r24, 0x32	; 50
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	22 e3       	ldi	r18, 0x32	; 50
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	f9 01       	movw	r30, r18
    253c:	20 81       	ld	r18, Z
    253e:	20 61       	ori	r18, 0x10	; 16
    2540:	fc 01       	movw	r30, r24
    2542:	20 83       	st	Z, r18
    2544:	85 e3       	ldi	r24, 0x35	; 53
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	25 e3       	ldi	r18, 0x35	; 53
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	f9 01       	movw	r30, r18
    254e:	20 81       	ld	r18, Z
    2550:	2e 7f       	andi	r18, 0xFE	; 254
    2552:	fc 01       	movw	r30, r24
    2554:	20 83       	st	Z, r18
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	80 93 94 01 	sts	0x0194, r24
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	80 93 93 01 	sts	0x0193, r24
    2562:	82 e3       	ldi	r24, 0x32	; 50
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	22 e3       	ldi	r18, 0x32	; 50
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	f9 01       	movw	r30, r18
    256c:	20 81       	ld	r18, Z
    256e:	20 62       	ori	r18, 0x20	; 32
    2570:	fc 01       	movw	r30, r24
    2572:	20 83       	st	Z, r18
    2574:	82 e3       	ldi	r24, 0x32	; 50
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	22 e3       	ldi	r18, 0x32	; 50
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	f9 01       	movw	r30, r18
    257e:	20 81       	ld	r18, Z
    2580:	2f 7b       	andi	r18, 0xBF	; 191
    2582:	fc 01       	movw	r30, r24
    2584:	20 83       	st	Z, r18
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	80 93 a5 01 	sts	0x01A5, r24
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	80 93 a4 01 	sts	0x01A4, r24
		l_motor.rpm = l;
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	90 93 96 01 	sts	0x0196, r25
    259a:	80 93 95 01 	sts	0x0195, r24
		r_motor.rpm = r;
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	90 93 a7 01 	sts	0x01A7, r25
    25a6:	80 93 a6 01 	sts	0x01A6, r24
    25aa:	40 c0       	rjmp	.+128    	; 0x262c <set_rpm+0x140>
	}
	else
	{
		set_m_backward()
    25ac:	85 e3       	ldi	r24, 0x35	; 53
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	25 e3       	ldi	r18, 0x35	; 53
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	f9 01       	movw	r30, r18
    25b6:	20 81       	ld	r18, Z
    25b8:	21 60       	ori	r18, 0x01	; 1
    25ba:	fc 01       	movw	r30, r24
    25bc:	20 83       	st	Z, r18
    25be:	82 e3       	ldi	r24, 0x32	; 50
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	22 e3       	ldi	r18, 0x32	; 50
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	f9 01       	movw	r30, r18
    25c8:	20 81       	ld	r18, Z
    25ca:	2f 7e       	andi	r18, 0xEF	; 239
    25cc:	fc 01       	movw	r30, r24
    25ce:	20 83       	st	Z, r18
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	80 93 94 01 	sts	0x0194, r24
    25d6:	8f ef       	ldi	r24, 0xFF	; 255
    25d8:	80 93 93 01 	sts	0x0193, r24
    25dc:	82 e3       	ldi	r24, 0x32	; 50
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	22 e3       	ldi	r18, 0x32	; 50
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	f9 01       	movw	r30, r18
    25e6:	20 81       	ld	r18, Z
    25e8:	20 64       	ori	r18, 0x40	; 64
    25ea:	fc 01       	movw	r30, r24
    25ec:	20 83       	st	Z, r18
    25ee:	82 e3       	ldi	r24, 0x32	; 50
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	22 e3       	ldi	r18, 0x32	; 50
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	f9 01       	movw	r30, r18
    25f8:	20 81       	ld	r18, Z
    25fa:	2f 7d       	andi	r18, 0xDF	; 223
    25fc:	fc 01       	movw	r30, r24
    25fe:	20 83       	st	Z, r18
    2600:	8f ef       	ldi	r24, 0xFF	; 255
    2602:	80 93 a5 01 	sts	0x01A5, r24
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	80 93 a4 01 	sts	0x01A4, r24
		l_motor.rpm = int16_abs_Q(l);
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	0e 94 51 10 	call	0x20a2	; 0x20a2 <int16_abs_Q>
    2614:	90 93 96 01 	sts	0x0196, r25
    2618:	80 93 95 01 	sts	0x0195, r24
		r_motor.rpm = int16_abs_Q(r);
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	0e 94 51 10 	call	0x20a2	; 0x20a2 <int16_abs_Q>
    2624:	90 93 a7 01 	sts	0x01A7, r25
    2628:	80 93 a6 01 	sts	0x01A6, r24
	}
	task_t motor2 = {.data.command = MOTOR_L, .data.value = l_motor.rpm};
    262c:	29 e0       	ldi	r18, 0x09	; 9
    262e:	ce 01       	movw	r24, r28
    2630:	09 96       	adiw	r24, 0x09	; 9
    2632:	fc 01       	movw	r30, r24
    2634:	32 2f       	mov	r19, r18
    2636:	11 92       	st	Z+, r1
    2638:	3a 95       	dec	r19
    263a:	e9 f7       	brne	.-6      	; 0x2636 <set_rpm+0x14a>
    263c:	86 e1       	ldi	r24, 0x16	; 22
    263e:	89 87       	std	Y+9, r24	; 0x09
    2640:	80 91 95 01 	lds	r24, 0x0195
    2644:	90 91 96 01 	lds	r25, 0x0196
    2648:	aa 27       	eor	r26, r26
    264a:	97 fd       	sbrc	r25, 7
    264c:	a0 95       	com	r26
    264e:	ba 2f       	mov	r27, r26
    2650:	8e 87       	std	Y+14, r24	; 0x0e
    2652:	9f 87       	std	Y+15, r25	; 0x0f
    2654:	a8 8b       	std	Y+16, r26	; 0x10
    2656:	b9 8b       	std	Y+17, r27	; 0x11
	add_task(&motor2);
    2658:	ce 01       	movw	r24, r28
    265a:	09 96       	adiw	r24, 0x09	; 9
    265c:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
	task_t motor3 = {.data.command = MOTOR_R, .data.value = r_motor.rpm};
    2660:	29 e0       	ldi	r18, 0x09	; 9
    2662:	ce 01       	movw	r24, r28
    2664:	42 96       	adiw	r24, 0x12	; 18
    2666:	fc 01       	movw	r30, r24
    2668:	32 2f       	mov	r19, r18
    266a:	11 92       	st	Z+, r1
    266c:	3a 95       	dec	r19
    266e:	e9 f7       	brne	.-6      	; 0x266a <set_rpm+0x17e>
    2670:	85 e1       	ldi	r24, 0x15	; 21
    2672:	8a 8b       	std	Y+18, r24	; 0x12
    2674:	80 91 a6 01 	lds	r24, 0x01A6
    2678:	90 91 a7 01 	lds	r25, 0x01A7
    267c:	aa 27       	eor	r26, r26
    267e:	97 fd       	sbrc	r25, 7
    2680:	a0 95       	com	r26
    2682:	ba 2f       	mov	r27, r26
    2684:	8f 8b       	std	Y+23, r24	; 0x17
    2686:	98 8f       	std	Y+24, r25	; 0x18
    2688:	a9 8f       	std	Y+25, r26	; 0x19
    268a:	ba 8f       	std	Y+26, r27	; 0x1a
	add_task(&motor3);
    268c:	ce 01       	movw	r24, r28
    268e:	42 96       	adiw	r24, 0x12	; 18
    2690:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    2694:	6c 96       	adiw	r28, 0x1c	; 28
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	08 95       	ret

000026a6 <set_circle_time>:
	* \param task Used to specify a pointer to a specific received task. u8[3] represents a multiple of 100ms
	*
	* \return void
	*/
	void set_circle_time(task_t *task)
	{
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <set_circle_time+0x6>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
		circle_time = task->data.u8[3]*100;
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	fc 01       	movw	r30, r24
    26ba:	80 85       	ldd	r24, Z+8	; 0x08
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	44 e6       	ldi	r20, 0x64	; 100
    26c2:	42 9f       	mul	r20, r18
    26c4:	c0 01       	movw	r24, r0
    26c6:	43 9f       	mul	r20, r19
    26c8:	90 0d       	add	r25, r0
    26ca:	11 24       	eor	r1, r1
    26cc:	90 93 6c 00 	sts	0x006C, r25
    26d0:	80 93 6b 00 	sts	0x006B, r24
	}
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	08 95       	ret

000026de <set_corner_time>:
	static uint16_t L=7, R=15;

	void set_corner_time(task_t *task)
	{
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <set_corner_time+0x6>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	9a 83       	std	Y+2, r25	; 0x02
    26ea:	89 83       	std	Y+1, r24	; 0x01
		R = task->data.u8[3];
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	9a 81       	ldd	r25, Y+2	; 0x02
    26f0:	fc 01       	movw	r30, r24
    26f2:	80 85       	ldd	r24, Z+8	; 0x08
    26f4:	88 2f       	mov	r24, r24
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	90 93 70 00 	sts	0x0070, r25
    26fc:	80 93 6f 00 	sts	0x006F, r24
		L = task->data.u8[2];
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	fc 01       	movw	r30, r24
    2706:	87 81       	ldd	r24, Z+7	; 0x07
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	90 93 6e 00 	sts	0x006E, r25
    2710:	80 93 6d 00 	sts	0x006D, r24
	}
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	08 95       	ret

0000271e <do_cirecle>:
	* \param
	*
	* \return void
	*/
	void do_cirecle(void)
	{
    271e:	cf 93       	push	r28
    2720:	df 93       	push	r29
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
		// 	TODO: create a state so nobody fucks with the robot
		static circle_state c_state = PRE_DELAY;
		static bool do_once = true;
		static timer_t delay;
		switch (c_state)
    2726:	80 91 18 01 	lds	r24, 0x0118
    272a:	88 2f       	mov	r24, r24
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	aa 27       	eor	r26, r26
    2730:	97 fd       	sbrc	r25, 7
    2732:	a0 95       	com	r26
    2734:	ba 2f       	mov	r27, r26
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	28 e0       	ldi	r18, 0x08	; 8
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	84 1b       	sub	r24, r20
    2740:	95 0b       	sbc	r25, r21
    2742:	28 17       	cp	r18, r24
    2744:	39 07       	cpc	r19, r25
    2746:	08 f4       	brcc	.+2      	; 0x274a <do_cirecle+0x2c>
    2748:	6a c1       	rjmp	.+724    	; 0x2a1e <do_cirecle+0x300>
    274a:	86 5d       	subi	r24, 0xD6	; 214
    274c:	9f 4f       	sbci	r25, 0xFF	; 255
    274e:	fc 01       	movw	r30, r24
    2750:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__tablejump2__>
		{
			case PRE_DELAY:
			{
				circle_delay(250,FORWARD_RADIUS);
    2754:	80 91 71 00 	lds	r24, 0x0071
    2758:	88 23       	and	r24, r24
    275a:	51 f0       	breq	.+20     	; 0x2770 <do_cirecle+0x52>
    275c:	10 92 71 00 	sts	0x0071, r1
    2760:	4a ef       	ldi	r20, 0xFA	; 250
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	89 e1       	ldi	r24, 0x19	; 25
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2770:	89 e1       	ldi	r24, 0x19	; 25
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2778:	88 23       	and	r24, r24
    277a:	39 f0       	breq	.+14     	; 0x278a <do_cirecle+0x6c>
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	80 93 18 01 	sts	0x0118, r24
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	80 93 71 00 	sts	0x0071, r24
			}
			break;
    2788:	52 c1       	rjmp	.+676    	; 0x2a2e <do_cirecle+0x310>
    278a:	51 c1       	rjmp	.+674    	; 0x2a2e <do_cirecle+0x310>
			case FORWARD_RADIUS:
			{
				if(do_once)
    278c:	80 91 71 00 	lds	r24, 0x0071
    2790:	88 23       	and	r24, r24
    2792:	49 f0       	breq	.+18     	; 0x27a6 <do_cirecle+0x88>
				{
					do_once=false;
    2794:	10 92 71 00 	sts	0x0071, r1
					set_movement(180,CIRCLE_RADIUS,FORWARD);
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	6a e3       	ldi	r22, 0x3A	; 58
    279c:	74 e0       	ldi	r23, 0x04	; 4
    279e:	84 eb       	ldi	r24, 0xB4	; 180
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    27a6:	80 91 8b 01 	lds	r24, 0x018B
    27aa:	90 91 8c 01 	lds	r25, 0x018C
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	61 f4       	brne	.+24     	; 0x27ca <do_cirecle+0xac>
    27b2:	80 91 9c 01 	lds	r24, 0x019C
    27b6:	90 91 9d 01 	lds	r25, 0x019D
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	31 f4       	brne	.+12     	; 0x27ca <do_cirecle+0xac>
				{
					do_once = true;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	80 93 71 00 	sts	0x0071, r24
					c_state=FIRST_DELAY;
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	80 93 18 01 	sts	0x0118, r24
				}
				
			}
			case FIRST_DELAY:
			{
				circle_delay(250,FIRST_CORNER);
    27ca:	80 91 71 00 	lds	r24, 0x0071
    27ce:	88 23       	and	r24, r24
    27d0:	51 f0       	breq	.+20     	; 0x27e6 <do_cirecle+0xc8>
    27d2:	10 92 71 00 	sts	0x0071, r1
    27d6:	4a ef       	ldi	r20, 0xFA	; 250
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	60 e0       	ldi	r22, 0x00	; 0
    27dc:	70 e0       	ldi	r23, 0x00	; 0
    27de:	89 e1       	ldi	r24, 0x19	; 25
    27e0:	91 e0       	ldi	r25, 0x01	; 1
    27e2:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    27e6:	89 e1       	ldi	r24, 0x19	; 25
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    27ee:	88 23       	and	r24, r24
    27f0:	39 f0       	breq	.+14     	; 0x2800 <do_cirecle+0xe2>
    27f2:	83 e0       	ldi	r24, 0x03	; 3
    27f4:	80 93 18 01 	sts	0x0118, r24
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	80 93 71 00 	sts	0x0071, r24
			}
			break;
    27fe:	17 c1       	rjmp	.+558    	; 0x2a2e <do_cirecle+0x310>
    2800:	16 c1       	rjmp	.+556    	; 0x2a2e <do_cirecle+0x310>
			case FIRST_CORNER:
			{
				if (do_once)
    2802:	80 91 71 00 	lds	r24, 0x0071
    2806:	88 23       	and	r24, r24
    2808:	49 f0       	breq	.+18     	; 0x281c <do_cirecle+0xfe>
				{
					do_once = false;
    280a:	10 92 71 00 	sts	0x0071, r1
					set_movement(180,C90,LEFT);
    280e:	42 e0       	ldi	r20, 0x02	; 2
    2810:	60 ee       	ldi	r22, 0xE0	; 224
    2812:	71 e0       	ldi	r23, 0x01	; 1
    2814:	84 eb       	ldi	r24, 0xB4	; 180
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    281c:	80 91 8b 01 	lds	r24, 0x018B
    2820:	90 91 8c 01 	lds	r25, 0x018C
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	69 f4       	brne	.+26     	; 0x2842 <do_cirecle+0x124>
    2828:	80 91 9c 01 	lds	r24, 0x019C
    282c:	90 91 9d 01 	lds	r25, 0x019D
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	39 f4       	brne	.+14     	; 0x2842 <do_cirecle+0x124>
				{
					do_once=true;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	80 93 71 00 	sts	0x0071, r24
					c_state=SECOND_DELAY;
    283a:	84 e0       	ldi	r24, 0x04	; 4
    283c:	80 93 18 01 	sts	0x0118, r24
				}
			}
			break;
    2840:	f6 c0       	rjmp	.+492    	; 0x2a2e <do_cirecle+0x310>
    2842:	f5 c0       	rjmp	.+490    	; 0x2a2e <do_cirecle+0x310>
			case SECOND_DELAY:
			{
				circle_delay(250,CIRCLE);
    2844:	80 91 71 00 	lds	r24, 0x0071
    2848:	88 23       	and	r24, r24
    284a:	51 f0       	breq	.+20     	; 0x2860 <do_cirecle+0x142>
    284c:	10 92 71 00 	sts	0x0071, r1
    2850:	4a ef       	ldi	r20, 0xFA	; 250
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	60 e0       	ldi	r22, 0x00	; 0
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	89 e1       	ldi	r24, 0x19	; 25
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2860:	89 e1       	ldi	r24, 0x19	; 25
    2862:	91 e0       	ldi	r25, 0x01	; 1
    2864:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2868:	88 23       	and	r24, r24
    286a:	39 f0       	breq	.+14     	; 0x287a <do_cirecle+0x15c>
    286c:	85 e0       	ldi	r24, 0x05	; 5
    286e:	80 93 18 01 	sts	0x0118, r24
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	80 93 71 00 	sts	0x0071, r24
			}
			break;
    2878:	da c0       	rjmp	.+436    	; 0x2a2e <do_cirecle+0x310>
    287a:	d9 c0       	rjmp	.+434    	; 0x2a2e <do_cirecle+0x310>
			case CIRCLE:
			{
				if (do_once)
    287c:	80 91 71 00 	lds	r24, 0x0071
    2880:	88 23       	and	r24, r24
    2882:	09 f4       	brne	.+2      	; 0x2886 <do_cirecle+0x168>
    2884:	5d c0       	rjmp	.+186    	; 0x2940 <do_cirecle+0x222>
				{
					set_l_m_forward();
    2886:	82 e3       	ldi	r24, 0x32	; 50
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	22 e3       	ldi	r18, 0x32	; 50
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	f9 01       	movw	r30, r18
    2890:	20 81       	ld	r18, Z
    2892:	20 61       	ori	r18, 0x10	; 16
    2894:	fc 01       	movw	r30, r24
    2896:	20 83       	st	Z, r18
    2898:	85 e3       	ldi	r24, 0x35	; 53
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	25 e3       	ldi	r18, 0x35	; 53
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	f9 01       	movw	r30, r18
    28a2:	20 81       	ld	r18, Z
    28a4:	2e 7f       	andi	r18, 0xFE	; 254
    28a6:	fc 01       	movw	r30, r24
    28a8:	20 83       	st	Z, r18
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	80 93 94 01 	sts	0x0194, r24
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 93 01 	sts	0x0193, r24
					set_r_m_forward();
    28b6:	82 e3       	ldi	r24, 0x32	; 50
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	22 e3       	ldi	r18, 0x32	; 50
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	f9 01       	movw	r30, r18
    28c0:	20 81       	ld	r18, Z
    28c2:	20 62       	ori	r18, 0x20	; 32
    28c4:	fc 01       	movw	r30, r24
    28c6:	20 83       	st	Z, r18
    28c8:	82 e3       	ldi	r24, 0x32	; 50
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	22 e3       	ldi	r18, 0x32	; 50
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	f9 01       	movw	r30, r18
    28d2:	20 81       	ld	r18, Z
    28d4:	2f 7b       	andi	r18, 0xBF	; 191
    28d6:	fc 01       	movw	r30, r24
    28d8:	20 83       	st	Z, r18
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	80 93 a5 01 	sts	0x01A5, r24
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	80 93 a4 01 	sts	0x01A4, r24
					l_motor.rpm = L*16+1;
    28e6:	80 91 6d 00 	lds	r24, 0x006D
    28ea:	90 91 6e 00 	lds	r25, 0x006E
    28ee:	82 95       	swap	r24
    28f0:	92 95       	swap	r25
    28f2:	90 7f       	andi	r25, 0xF0	; 240
    28f4:	98 27       	eor	r25, r24
    28f6:	80 7f       	andi	r24, 0xF0	; 240
    28f8:	98 27       	eor	r25, r24
    28fa:	01 96       	adiw	r24, 0x01	; 1
    28fc:	90 93 96 01 	sts	0x0196, r25
    2900:	80 93 95 01 	sts	0x0195, r24
					r_motor.rpm = R*16+1;
    2904:	80 91 6f 00 	lds	r24, 0x006F
    2908:	90 91 70 00 	lds	r25, 0x0070
    290c:	82 95       	swap	r24
    290e:	92 95       	swap	r25
    2910:	90 7f       	andi	r25, 0xF0	; 240
    2912:	98 27       	eor	r25, r24
    2914:	80 7f       	andi	r24, 0xF0	; 240
    2916:	98 27       	eor	r25, r24
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	90 93 a7 01 	sts	0x01A7, r25
    291e:	80 93 a6 01 	sts	0x01A6, r24
					do_once=false;
    2922:	10 92 71 00 	sts	0x0071, r1
					tmr_start(&delay,circle_time);
    2926:	80 91 6b 00 	lds	r24, 0x006B
    292a:	90 91 6c 00 	lds	r25, 0x006C
    292e:	cc 01       	movw	r24, r24
    2930:	a0 e0       	ldi	r26, 0x00	; 0
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	ac 01       	movw	r20, r24
    2936:	bd 01       	movw	r22, r26
    2938:	89 e1       	ldi	r24, 0x19	; 25
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
				}
				if (tmr_exp(&delay))
    2940:	89 e1       	ldi	r24, 0x19	; 25
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2948:	88 23       	and	r24, r24
    294a:	79 f0       	breq	.+30     	; 0x296a <do_cirecle+0x24c>
				{
					l_motor.rpm = 0;
    294c:	10 92 96 01 	sts	0x0196, r1
    2950:	10 92 95 01 	sts	0x0195, r1
					r_motor.rpm = 0;
    2954:	10 92 a7 01 	sts	0x01A7, r1
    2958:	10 92 a6 01 	sts	0x01A6, r1
					c_state = THIRD_DELAY;
    295c:	86 e0       	ldi	r24, 0x06	; 6
    295e:	80 93 18 01 	sts	0x0118, r24
					do_once=true;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	80 93 71 00 	sts	0x0071, r24
				}
			}
			break;
    2968:	62 c0       	rjmp	.+196    	; 0x2a2e <do_cirecle+0x310>
    296a:	61 c0       	rjmp	.+194    	; 0x2a2e <do_cirecle+0x310>
			case THIRD_DELAY:
			{
				circle_delay(250,SECOND_CORNR);
    296c:	80 91 71 00 	lds	r24, 0x0071
    2970:	88 23       	and	r24, r24
    2972:	51 f0       	breq	.+20     	; 0x2988 <do_cirecle+0x26a>
    2974:	10 92 71 00 	sts	0x0071, r1
    2978:	4a ef       	ldi	r20, 0xFA	; 250
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	60 e0       	ldi	r22, 0x00	; 0
    297e:	70 e0       	ldi	r23, 0x00	; 0
    2980:	89 e1       	ldi	r24, 0x19	; 25
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2988:	89 e1       	ldi	r24, 0x19	; 25
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2990:	88 23       	and	r24, r24
    2992:	39 f0       	breq	.+14     	; 0x29a2 <do_cirecle+0x284>
    2994:	87 e0       	ldi	r24, 0x07	; 7
    2996:	80 93 18 01 	sts	0x0118, r24
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	80 93 71 00 	sts	0x0071, r24
			}
			break;
    29a0:	46 c0       	rjmp	.+140    	; 0x2a2e <do_cirecle+0x310>
    29a2:	45 c0       	rjmp	.+138    	; 0x2a2e <do_cirecle+0x310>
			case SECOND_CORNR:
			{
				if(do_once)
    29a4:	80 91 71 00 	lds	r24, 0x0071
    29a8:	88 23       	and	r24, r24
    29aa:	49 f0       	breq	.+18     	; 0x29be <do_cirecle+0x2a0>
				{
					do_once=false;
    29ac:	10 92 71 00 	sts	0x0071, r1
					set_movement(180,C90,RIGHT);
    29b0:	43 e0       	ldi	r20, 0x03	; 3
    29b2:	60 ee       	ldi	r22, 0xE0	; 224
    29b4:	71 e0       	ldi	r23, 0x01	; 1
    29b6:	84 eb       	ldi	r24, 0xB4	; 180
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    29be:	80 91 8b 01 	lds	r24, 0x018B
    29c2:	90 91 8c 01 	lds	r25, 0x018C
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	69 f4       	brne	.+26     	; 0x29e4 <do_cirecle+0x2c6>
    29ca:	80 91 9c 01 	lds	r24, 0x019C
    29ce:	90 91 9d 01 	lds	r25, 0x019D
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	39 f4       	brne	.+14     	; 0x29e4 <do_cirecle+0x2c6>
				{
					do_once=true;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	80 93 71 00 	sts	0x0071, r24
					c_state=FORTH_DELAY;
    29dc:	88 e0       	ldi	r24, 0x08	; 8
    29de:	80 93 18 01 	sts	0x0118, r24
				}
			}
			break;
    29e2:	25 c0       	rjmp	.+74     	; 0x2a2e <do_cirecle+0x310>
    29e4:	24 c0       	rjmp	.+72     	; 0x2a2e <do_cirecle+0x310>
			case FORTH_DELAY:
			{
				circle_delay(250,REINIT)
    29e6:	80 91 71 00 	lds	r24, 0x0071
    29ea:	88 23       	and	r24, r24
    29ec:	51 f0       	breq	.+20     	; 0x2a02 <do_cirecle+0x2e4>
    29ee:	10 92 71 00 	sts	0x0071, r1
    29f2:	4a ef       	ldi	r20, 0xFA	; 250
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	70 e0       	ldi	r23, 0x00	; 0
    29fa:	89 e1       	ldi	r24, 0x19	; 25
    29fc:	91 e0       	ldi	r25, 0x01	; 1
    29fe:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2a02:	89 e1       	ldi	r24, 0x19	; 25
    2a04:	91 e0       	ldi	r25, 0x01	; 1
    2a06:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2a0a:	88 23       	and	r24, r24
    2a0c:	39 f0       	breq	.+14     	; 0x2a1c <do_cirecle+0x2fe>
    2a0e:	89 e0       	ldi	r24, 0x09	; 9
    2a10:	80 93 18 01 	sts	0x0118, r24
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	80 93 71 00 	sts	0x0071, r24
			}
			break;
    2a1a:	09 c0       	rjmp	.+18     	; 0x2a2e <do_cirecle+0x310>
    2a1c:	08 c0       	rjmp	.+16     	; 0x2a2e <do_cirecle+0x310>
			default:
			status.system.circle =false;
    2a1e:	80 91 be 01 	lds	r24, 0x01BE
    2a22:	87 7f       	andi	r24, 0xF7	; 247
    2a24:	80 93 be 01 	sts	0x01BE, r24
			c_state = PRE_DELAY;
    2a28:	10 92 18 01 	sts	0x0118, r1
			break;
    2a2c:	00 00       	nop
		}
	}
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	08 95       	ret

00002a34 <do_wall>:
	* \param
	*
	* \return void
	*/
	void do_wall(void)
	{
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
		// 	TODO: create a state so nobody fucks with the robot
		static wall_state c_state = W_PRE_DELAY;
		static bool do_once = true;
		static timer_t delay;
		switch (c_state)
    2a3c:	80 91 22 01 	lds	r24, 0x0122
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	aa 27       	eor	r26, r26
    2a46:	97 fd       	sbrc	r25, 7
    2a48:	a0 95       	com	r26
    2a4a:	ba 2f       	mov	r27, r26
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	21 e1       	ldi	r18, 0x11	; 17
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	84 1b       	sub	r24, r20
    2a56:	95 0b       	sbc	r25, r21
    2a58:	28 17       	cp	r18, r24
    2a5a:	39 07       	cpc	r19, r25
    2a5c:	08 f4       	brcc	.+2      	; 0x2a60 <do_wall+0x2c>
    2a5e:	28 c2       	rjmp	.+1104   	; 0x2eb0 <do_wall+0x47c>
    2a60:	8d 5c       	subi	r24, 0xCD	; 205
    2a62:	9f 4f       	sbci	r25, 0xFF	; 255
    2a64:	fc 01       	movw	r30, r24
    2a66:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__tablejump2__>
		{
			case W_PRE_DELAY:
			{
				circle_delay(3000,FORWARD_RADIUS);
    2a6a:	80 91 72 00 	lds	r24, 0x0072
    2a6e:	88 23       	and	r24, r24
    2a70:	51 f0       	breq	.+20     	; 0x2a86 <do_wall+0x52>
    2a72:	10 92 72 00 	sts	0x0072, r1
    2a76:	48 eb       	ldi	r20, 0xB8	; 184
    2a78:	5b e0       	ldi	r21, 0x0B	; 11
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	83 e2       	ldi	r24, 0x23	; 35
    2a80:	91 e0       	ldi	r25, 0x01	; 1
    2a82:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2a86:	83 e2       	ldi	r24, 0x23	; 35
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2a8e:	88 23       	and	r24, r24
    2a90:	39 f0       	breq	.+14     	; 0x2aa0 <do_wall+0x6c>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	80 93 22 01 	sts	0x0122, r24
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	80 93 72 00 	sts	0x0072, r24
			}
			break;
    2a9e:	10 c2       	rjmp	.+1056   	; 0x2ec0 <do_wall+0x48c>
    2aa0:	0f c2       	rjmp	.+1054   	; 0x2ec0 <do_wall+0x48c>
			case W_FORWARD:
			{
				if(do_once)
    2aa2:	80 91 72 00 	lds	r24, 0x0072
    2aa6:	88 23       	and	r24, r24
    2aa8:	49 f0       	breq	.+18     	; 0x2abc <do_wall+0x88>
				{
					do_once=false;
    2aaa:	10 92 72 00 	sts	0x0072, r1
					set_movement(300,WALL_FORWARD,FORWARD);
    2aae:	41 e0       	ldi	r20, 0x01	; 1
    2ab0:	64 e7       	ldi	r22, 0x74	; 116
    2ab2:	78 e0       	ldi	r23, 0x08	; 8
    2ab4:	8c e2       	ldi	r24, 0x2C	; 44
    2ab6:	91 e0       	ldi	r25, 0x01	; 1
    2ab8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    2abc:	80 91 8b 01 	lds	r24, 0x018B
    2ac0:	90 91 8c 01 	lds	r25, 0x018C
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	61 f4       	brne	.+24     	; 0x2ae0 <do_wall+0xac>
    2ac8:	80 91 9c 01 	lds	r24, 0x019C
    2acc:	90 91 9d 01 	lds	r25, 0x019D
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	31 f4       	brne	.+12     	; 0x2ae0 <do_wall+0xac>
				{
					do_once = true;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	80 93 72 00 	sts	0x0072, r24
					c_state=W_DELAY_1;
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	80 93 22 01 	sts	0x0122, r24
				}
				
			}
			case W_DELAY_1:
			{
				circle_delay(250,W_FIRST_CORNER);
    2ae0:	80 91 72 00 	lds	r24, 0x0072
    2ae4:	88 23       	and	r24, r24
    2ae6:	51 f0       	breq	.+20     	; 0x2afc <do_wall+0xc8>
    2ae8:	10 92 72 00 	sts	0x0072, r1
    2aec:	4a ef       	ldi	r20, 0xFA	; 250
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	83 e2       	ldi	r24, 0x23	; 35
    2af6:	91 e0       	ldi	r25, 0x01	; 1
    2af8:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2afc:	83 e2       	ldi	r24, 0x23	; 35
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2b04:	88 23       	and	r24, r24
    2b06:	39 f0       	breq	.+14     	; 0x2b16 <do_wall+0xe2>
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	80 93 22 01 	sts	0x0122, r24
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	80 93 72 00 	sts	0x0072, r24
			}
			break;
    2b14:	d5 c1       	rjmp	.+938    	; 0x2ec0 <do_wall+0x48c>
    2b16:	d4 c1       	rjmp	.+936    	; 0x2ec0 <do_wall+0x48c>
			case W_FIRST_CORNER:
			{
				if (do_once)
    2b18:	80 91 72 00 	lds	r24, 0x0072
    2b1c:	88 23       	and	r24, r24
    2b1e:	49 f0       	breq	.+18     	; 0x2b32 <do_wall+0xfe>
				{
					do_once = false;
    2b20:	10 92 72 00 	sts	0x0072, r1
					set_movement(180,C90,RIGHT);
    2b24:	43 e0       	ldi	r20, 0x03	; 3
    2b26:	60 ee       	ldi	r22, 0xE0	; 224
    2b28:	71 e0       	ldi	r23, 0x01	; 1
    2b2a:	84 eb       	ldi	r24, 0xB4	; 180
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    2b32:	80 91 8b 01 	lds	r24, 0x018B
    2b36:	90 91 8c 01 	lds	r25, 0x018C
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	69 f4       	brne	.+26     	; 0x2b58 <do_wall+0x124>
    2b3e:	80 91 9c 01 	lds	r24, 0x019C
    2b42:	90 91 9d 01 	lds	r25, 0x019D
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	39 f4       	brne	.+14     	; 0x2b58 <do_wall+0x124>
				{
					do_once=true;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	80 93 72 00 	sts	0x0072, r24
					c_state=W_DELAY_2;
    2b50:	84 e0       	ldi	r24, 0x04	; 4
    2b52:	80 93 22 01 	sts	0x0122, r24
				}
			}
			break;
    2b56:	b4 c1       	rjmp	.+872    	; 0x2ec0 <do_wall+0x48c>
    2b58:	b3 c1       	rjmp	.+870    	; 0x2ec0 <do_wall+0x48c>
			case W_DELAY_2:
			{
				circle_delay(250,W_WALL_1);
    2b5a:	80 91 72 00 	lds	r24, 0x0072
    2b5e:	88 23       	and	r24, r24
    2b60:	51 f0       	breq	.+20     	; 0x2b76 <do_wall+0x142>
    2b62:	10 92 72 00 	sts	0x0072, r1
    2b66:	4a ef       	ldi	r20, 0xFA	; 250
    2b68:	50 e0       	ldi	r21, 0x00	; 0
    2b6a:	60 e0       	ldi	r22, 0x00	; 0
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	83 e2       	ldi	r24, 0x23	; 35
    2b70:	91 e0       	ldi	r25, 0x01	; 1
    2b72:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2b76:	83 e2       	ldi	r24, 0x23	; 35
    2b78:	91 e0       	ldi	r25, 0x01	; 1
    2b7a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2b7e:	88 23       	and	r24, r24
    2b80:	39 f0       	breq	.+14     	; 0x2b90 <do_wall+0x15c>
    2b82:	85 e0       	ldi	r24, 0x05	; 5
    2b84:	80 93 22 01 	sts	0x0122, r24
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	80 93 72 00 	sts	0x0072, r24
			}
			break;
    2b8e:	98 c1       	rjmp	.+816    	; 0x2ec0 <do_wall+0x48c>
    2b90:	97 c1       	rjmp	.+814    	; 0x2ec0 <do_wall+0x48c>
			case W_WALL_1:
			{				
				if (do_once)
    2b92:	80 91 72 00 	lds	r24, 0x0072
    2b96:	88 23       	and	r24, r24
    2b98:	49 f0       	breq	.+18     	; 0x2bac <do_wall+0x178>
				{
					do_once = false;
    2b9a:	10 92 72 00 	sts	0x0072, r1
					set_movement(300,WALL_1,FORWARD);
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	62 e1       	ldi	r22, 0x12	; 18
    2ba2:	76 e0       	ldi	r23, 0x06	; 6
    2ba4:	8c e2       	ldi	r24, 0x2C	; 44
    2ba6:	91 e0       	ldi	r25, 0x01	; 1
    2ba8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    2bac:	80 91 8b 01 	lds	r24, 0x018B
    2bb0:	90 91 8c 01 	lds	r25, 0x018C
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	69 f4       	brne	.+26     	; 0x2bd2 <do_wall+0x19e>
    2bb8:	80 91 9c 01 	lds	r24, 0x019C
    2bbc:	90 91 9d 01 	lds	r25, 0x019D
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	39 f4       	brne	.+14     	; 0x2bd2 <do_wall+0x19e>
				{
					do_once=true;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	80 93 72 00 	sts	0x0072, r24
					c_state=W_DELAY_3;
    2bca:	86 e0       	ldi	r24, 0x06	; 6
    2bcc:	80 93 22 01 	sts	0x0122, r24
				}
			}
			break;
    2bd0:	77 c1       	rjmp	.+750    	; 0x2ec0 <do_wall+0x48c>
    2bd2:	76 c1       	rjmp	.+748    	; 0x2ec0 <do_wall+0x48c>
			case W_DELAY_3:
			{
				circle_delay(250,W_SECOND_CORNR);
    2bd4:	80 91 72 00 	lds	r24, 0x0072
    2bd8:	88 23       	and	r24, r24
    2bda:	51 f0       	breq	.+20     	; 0x2bf0 <do_wall+0x1bc>
    2bdc:	10 92 72 00 	sts	0x0072, r1
    2be0:	4a ef       	ldi	r20, 0xFA	; 250
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	60 e0       	ldi	r22, 0x00	; 0
    2be6:	70 e0       	ldi	r23, 0x00	; 0
    2be8:	83 e2       	ldi	r24, 0x23	; 35
    2bea:	91 e0       	ldi	r25, 0x01	; 1
    2bec:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2bf0:	83 e2       	ldi	r24, 0x23	; 35
    2bf2:	91 e0       	ldi	r25, 0x01	; 1
    2bf4:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2bf8:	88 23       	and	r24, r24
    2bfa:	39 f0       	breq	.+14     	; 0x2c0a <do_wall+0x1d6>
    2bfc:	87 e0       	ldi	r24, 0x07	; 7
    2bfe:	80 93 22 01 	sts	0x0122, r24
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	80 93 72 00 	sts	0x0072, r24
			}
			break;
    2c08:	5b c1       	rjmp	.+694    	; 0x2ec0 <do_wall+0x48c>
    2c0a:	5a c1       	rjmp	.+692    	; 0x2ec0 <do_wall+0x48c>
			case W_SECOND_CORNR:
			{
				if(do_once)
    2c0c:	80 91 72 00 	lds	r24, 0x0072
    2c10:	88 23       	and	r24, r24
    2c12:	49 f0       	breq	.+18     	; 0x2c26 <do_wall+0x1f2>
				{
					do_once=false;
    2c14:	10 92 72 00 	sts	0x0072, r1
					set_movement(180,C90,LEFT);
    2c18:	42 e0       	ldi	r20, 0x02	; 2
    2c1a:	60 ee       	ldi	r22, 0xE0	; 224
    2c1c:	71 e0       	ldi	r23, 0x01	; 1
    2c1e:	84 eb       	ldi	r24, 0xB4	; 180
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    2c26:	80 91 8b 01 	lds	r24, 0x018B
    2c2a:	90 91 8c 01 	lds	r25, 0x018C
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	69 f4       	brne	.+26     	; 0x2c4c <do_wall+0x218>
    2c32:	80 91 9c 01 	lds	r24, 0x019C
    2c36:	90 91 9d 01 	lds	r25, 0x019D
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	39 f4       	brne	.+14     	; 0x2c4c <do_wall+0x218>
				{
					do_once=true;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	80 93 72 00 	sts	0x0072, r24
					c_state=W_DELAY_4;
    2c44:	88 e0       	ldi	r24, 0x08	; 8
    2c46:	80 93 22 01 	sts	0x0122, r24
				}
			}
			break;
    2c4a:	3a c1       	rjmp	.+628    	; 0x2ec0 <do_wall+0x48c>
    2c4c:	39 c1       	rjmp	.+626    	; 0x2ec0 <do_wall+0x48c>
			case W_DELAY_4:
			{
				circle_delay(250,W_WALL_2)
    2c4e:	80 91 72 00 	lds	r24, 0x0072
    2c52:	88 23       	and	r24, r24
    2c54:	51 f0       	breq	.+20     	; 0x2c6a <do_wall+0x236>
    2c56:	10 92 72 00 	sts	0x0072, r1
    2c5a:	4a ef       	ldi	r20, 0xFA	; 250
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	60 e0       	ldi	r22, 0x00	; 0
    2c60:	70 e0       	ldi	r23, 0x00	; 0
    2c62:	83 e2       	ldi	r24, 0x23	; 35
    2c64:	91 e0       	ldi	r25, 0x01	; 1
    2c66:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2c6a:	83 e2       	ldi	r24, 0x23	; 35
    2c6c:	91 e0       	ldi	r25, 0x01	; 1
    2c6e:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2c72:	88 23       	and	r24, r24
    2c74:	39 f0       	breq	.+14     	; 0x2c84 <do_wall+0x250>
    2c76:	89 e0       	ldi	r24, 0x09	; 9
    2c78:	80 93 22 01 	sts	0x0122, r24
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	80 93 72 00 	sts	0x0072, r24
			}
			break;
    2c82:	1e c1       	rjmp	.+572    	; 0x2ec0 <do_wall+0x48c>
    2c84:	1d c1       	rjmp	.+570    	; 0x2ec0 <do_wall+0x48c>
			case W_WALL_2:
			{
				if(do_once)
    2c86:	80 91 72 00 	lds	r24, 0x0072
    2c8a:	88 23       	and	r24, r24
    2c8c:	49 f0       	breq	.+18     	; 0x2ca0 <do_wall+0x26c>
				{
					do_once=false;
    2c8e:	10 92 72 00 	sts	0x0072, r1
					set_movement(300,WALL_2,FORWARD);
    2c92:	41 e0       	ldi	r20, 0x01	; 1
    2c94:	60 ea       	ldi	r22, 0xA0	; 160
    2c96:	79 e0       	ldi	r23, 0x09	; 9
    2c98:	8c e2       	ldi	r24, 0x2C	; 44
    2c9a:	91 e0       	ldi	r25, 0x01	; 1
    2c9c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    2ca0:	80 91 8b 01 	lds	r24, 0x018B
    2ca4:	90 91 8c 01 	lds	r25, 0x018C
    2ca8:	00 97       	sbiw	r24, 0x00	; 0
    2caa:	69 f4       	brne	.+26     	; 0x2cc6 <do_wall+0x292>
    2cac:	80 91 9c 01 	lds	r24, 0x019C
    2cb0:	90 91 9d 01 	lds	r25, 0x019D
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	39 f4       	brne	.+14     	; 0x2cc6 <do_wall+0x292>
				{
					do_once=true;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	80 93 72 00 	sts	0x0072, r24
					c_state=W_DELAY_5;
    2cbe:	8a e0       	ldi	r24, 0x0A	; 10
    2cc0:	80 93 22 01 	sts	0x0122, r24
				}
			}
			break;
    2cc4:	fd c0       	rjmp	.+506    	; 0x2ec0 <do_wall+0x48c>
    2cc6:	fc c0       	rjmp	.+504    	; 0x2ec0 <do_wall+0x48c>
			case W_DELAY_5:
			{
				circle_delay(250,W_THIRD_CORNR)
    2cc8:	80 91 72 00 	lds	r24, 0x0072
    2ccc:	88 23       	and	r24, r24
    2cce:	51 f0       	breq	.+20     	; 0x2ce4 <do_wall+0x2b0>
    2cd0:	10 92 72 00 	sts	0x0072, r1
    2cd4:	4a ef       	ldi	r20, 0xFA	; 250
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	60 e0       	ldi	r22, 0x00	; 0
    2cda:	70 e0       	ldi	r23, 0x00	; 0
    2cdc:	83 e2       	ldi	r24, 0x23	; 35
    2cde:	91 e0       	ldi	r25, 0x01	; 1
    2ce0:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2ce4:	83 e2       	ldi	r24, 0x23	; 35
    2ce6:	91 e0       	ldi	r25, 0x01	; 1
    2ce8:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2cec:	88 23       	and	r24, r24
    2cee:	39 f0       	breq	.+14     	; 0x2cfe <do_wall+0x2ca>
    2cf0:	8b e0       	ldi	r24, 0x0B	; 11
    2cf2:	80 93 22 01 	sts	0x0122, r24
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	80 93 72 00 	sts	0x0072, r24
			}
			break;
    2cfc:	e1 c0       	rjmp	.+450    	; 0x2ec0 <do_wall+0x48c>
    2cfe:	e0 c0       	rjmp	.+448    	; 0x2ec0 <do_wall+0x48c>
			case W_THIRD_CORNR:
			{
				if(do_once)
    2d00:	80 91 72 00 	lds	r24, 0x0072
    2d04:	88 23       	and	r24, r24
    2d06:	49 f0       	breq	.+18     	; 0x2d1a <do_wall+0x2e6>
				{
					do_once=false;
    2d08:	10 92 72 00 	sts	0x0072, r1
					set_movement(180,C90,LEFT);
    2d0c:	42 e0       	ldi	r20, 0x02	; 2
    2d0e:	60 ee       	ldi	r22, 0xE0	; 224
    2d10:	71 e0       	ldi	r23, 0x01	; 1
    2d12:	84 eb       	ldi	r24, 0xB4	; 180
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    2d1a:	80 91 8b 01 	lds	r24, 0x018B
    2d1e:	90 91 8c 01 	lds	r25, 0x018C
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	69 f4       	brne	.+26     	; 0x2d40 <do_wall+0x30c>
    2d26:	80 91 9c 01 	lds	r24, 0x019C
    2d2a:	90 91 9d 01 	lds	r25, 0x019D
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	39 f4       	brne	.+14     	; 0x2d40 <do_wall+0x30c>
				{
					do_once=true;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	80 93 72 00 	sts	0x0072, r24
					c_state=W_DELAY_6;
    2d38:	8c e0       	ldi	r24, 0x0C	; 12
    2d3a:	80 93 22 01 	sts	0x0122, r24
				}
			}
			break;
    2d3e:	c0 c0       	rjmp	.+384    	; 0x2ec0 <do_wall+0x48c>
    2d40:	bf c0       	rjmp	.+382    	; 0x2ec0 <do_wall+0x48c>
			case W_DELAY_6:
			{
				circle_delay(250,W_WALL_3)
    2d42:	80 91 72 00 	lds	r24, 0x0072
    2d46:	88 23       	and	r24, r24
    2d48:	51 f0       	breq	.+20     	; 0x2d5e <do_wall+0x32a>
    2d4a:	10 92 72 00 	sts	0x0072, r1
    2d4e:	4a ef       	ldi	r20, 0xFA	; 250
    2d50:	50 e0       	ldi	r21, 0x00	; 0
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	83 e2       	ldi	r24, 0x23	; 35
    2d58:	91 e0       	ldi	r25, 0x01	; 1
    2d5a:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2d5e:	83 e2       	ldi	r24, 0x23	; 35
    2d60:	91 e0       	ldi	r25, 0x01	; 1
    2d62:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2d66:	88 23       	and	r24, r24
    2d68:	39 f0       	breq	.+14     	; 0x2d78 <do_wall+0x344>
    2d6a:	8d e0       	ldi	r24, 0x0D	; 13
    2d6c:	80 93 22 01 	sts	0x0122, r24
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	80 93 72 00 	sts	0x0072, r24
			}
			break;
    2d76:	a4 c0       	rjmp	.+328    	; 0x2ec0 <do_wall+0x48c>
    2d78:	a3 c0       	rjmp	.+326    	; 0x2ec0 <do_wall+0x48c>
			case W_WALL_3:
			{
				if(do_once)
    2d7a:	80 91 72 00 	lds	r24, 0x0072
    2d7e:	88 23       	and	r24, r24
    2d80:	49 f0       	breq	.+18     	; 0x2d94 <do_wall+0x360>
				{
					do_once=false;
    2d82:	10 92 72 00 	sts	0x0072, r1
					set_movement(300,WALL_3,FORWARD);
    2d86:	41 e0       	ldi	r20, 0x01	; 1
    2d88:	63 e1       	ldi	r22, 0x13	; 19
    2d8a:	76 e0       	ldi	r23, 0x06	; 6
    2d8c:	8c e2       	ldi	r24, 0x2C	; 44
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    2d94:	80 91 8b 01 	lds	r24, 0x018B
    2d98:	90 91 8c 01 	lds	r25, 0x018C
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	69 f4       	brne	.+26     	; 0x2dba <do_wall+0x386>
    2da0:	80 91 9c 01 	lds	r24, 0x019C
    2da4:	90 91 9d 01 	lds	r25, 0x019D
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	39 f4       	brne	.+14     	; 0x2dba <do_wall+0x386>
				{
					do_once=true;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	80 93 72 00 	sts	0x0072, r24
					c_state=W_DELAY_7;
    2db2:	8e e0       	ldi	r24, 0x0E	; 14
    2db4:	80 93 22 01 	sts	0x0122, r24
				}
			}
			break;
    2db8:	83 c0       	rjmp	.+262    	; 0x2ec0 <do_wall+0x48c>
    2dba:	82 c0       	rjmp	.+260    	; 0x2ec0 <do_wall+0x48c>
			case W_DELAY_7:
			{
				circle_delay(250,W_FORTH_CORNR)
    2dbc:	80 91 72 00 	lds	r24, 0x0072
    2dc0:	88 23       	and	r24, r24
    2dc2:	51 f0       	breq	.+20     	; 0x2dd8 <do_wall+0x3a4>
    2dc4:	10 92 72 00 	sts	0x0072, r1
    2dc8:	4a ef       	ldi	r20, 0xFA	; 250
    2dca:	50 e0       	ldi	r21, 0x00	; 0
    2dcc:	60 e0       	ldi	r22, 0x00	; 0
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	83 e2       	ldi	r24, 0x23	; 35
    2dd2:	91 e0       	ldi	r25, 0x01	; 1
    2dd4:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2dd8:	83 e2       	ldi	r24, 0x23	; 35
    2dda:	91 e0       	ldi	r25, 0x01	; 1
    2ddc:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2de0:	88 23       	and	r24, r24
    2de2:	39 f0       	breq	.+14     	; 0x2df2 <do_wall+0x3be>
    2de4:	8f e0       	ldi	r24, 0x0F	; 15
    2de6:	80 93 22 01 	sts	0x0122, r24
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	80 93 72 00 	sts	0x0072, r24
			}
			break;
    2df0:	67 c0       	rjmp	.+206    	; 0x2ec0 <do_wall+0x48c>
    2df2:	66 c0       	rjmp	.+204    	; 0x2ec0 <do_wall+0x48c>
			case W_FORTH_CORNR:
			{
				if(do_once)
    2df4:	80 91 72 00 	lds	r24, 0x0072
    2df8:	88 23       	and	r24, r24
    2dfa:	49 f0       	breq	.+18     	; 0x2e0e <do_wall+0x3da>
				{
					do_once=false;
    2dfc:	10 92 72 00 	sts	0x0072, r1
					set_movement(180,C90,RIGHT);
    2e00:	43 e0       	ldi	r20, 0x03	; 3
    2e02:	60 ee       	ldi	r22, 0xE0	; 224
    2e04:	71 e0       	ldi	r23, 0x01	; 1
    2e06:	84 eb       	ldi	r24, 0xB4	; 180
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    2e0e:	80 91 8b 01 	lds	r24, 0x018B
    2e12:	90 91 8c 01 	lds	r25, 0x018C
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	69 f4       	brne	.+26     	; 0x2e34 <do_wall+0x400>
    2e1a:	80 91 9c 01 	lds	r24, 0x019C
    2e1e:	90 91 9d 01 	lds	r25, 0x019D
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	39 f4       	brne	.+14     	; 0x2e34 <do_wall+0x400>
				{
					do_once=true;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	80 93 72 00 	sts	0x0072, r24
					c_state=W_DELAY_8;
    2e2c:	80 e1       	ldi	r24, 0x10	; 16
    2e2e:	80 93 22 01 	sts	0x0122, r24
				}
			}
			break;
    2e32:	46 c0       	rjmp	.+140    	; 0x2ec0 <do_wall+0x48c>
    2e34:	45 c0       	rjmp	.+138    	; 0x2ec0 <do_wall+0x48c>
			case W_DELAY_8:
			{
				circle_delay(250,W_WALL_4)
    2e36:	80 91 72 00 	lds	r24, 0x0072
    2e3a:	88 23       	and	r24, r24
    2e3c:	51 f0       	breq	.+20     	; 0x2e52 <do_wall+0x41e>
    2e3e:	10 92 72 00 	sts	0x0072, r1
    2e42:	4a ef       	ldi	r20, 0xFA	; 250
    2e44:	50 e0       	ldi	r21, 0x00	; 0
    2e46:	60 e0       	ldi	r22, 0x00	; 0
    2e48:	70 e0       	ldi	r23, 0x00	; 0
    2e4a:	83 e2       	ldi	r24, 0x23	; 35
    2e4c:	91 e0       	ldi	r25, 0x01	; 1
    2e4e:	0e 94 95 21 	call	0x432a	; 0x432a <tmr_start>
    2e52:	83 e2       	ldi	r24, 0x23	; 35
    2e54:	91 e0       	ldi	r25, 0x01	; 1
    2e56:	0e 94 d5 21 	call	0x43aa	; 0x43aa <tmr_exp>
    2e5a:	88 23       	and	r24, r24
    2e5c:	39 f0       	breq	.+14     	; 0x2e6c <do_wall+0x438>
    2e5e:	81 e1       	ldi	r24, 0x11	; 17
    2e60:	80 93 22 01 	sts	0x0122, r24
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	80 93 72 00 	sts	0x0072, r24
			}
			break;
    2e6a:	2a c0       	rjmp	.+84     	; 0x2ec0 <do_wall+0x48c>
    2e6c:	29 c0       	rjmp	.+82     	; 0x2ec0 <do_wall+0x48c>
			case W_WALL_4:
			{
				if(do_once)
    2e6e:	80 91 72 00 	lds	r24, 0x0072
    2e72:	88 23       	and	r24, r24
    2e74:	49 f0       	breq	.+18     	; 0x2e88 <do_wall+0x454>
				{
					do_once=false;
    2e76:	10 92 72 00 	sts	0x0072, r1
					set_movement(300,WALL_4,FORWARD);
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	60 ed       	ldi	r22, 0xD0	; 208
    2e7e:	77 e0       	ldi	r23, 0x07	; 7
    2e80:	8c e2       	ldi	r24, 0x2C	; 44
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <set_movement>
				}
				if (movement_finished())
    2e88:	80 91 8b 01 	lds	r24, 0x018B
    2e8c:	90 91 8c 01 	lds	r25, 0x018C
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	69 f4       	brne	.+26     	; 0x2eae <do_wall+0x47a>
    2e94:	80 91 9c 01 	lds	r24, 0x019C
    2e98:	90 91 9d 01 	lds	r25, 0x019D
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	39 f4       	brne	.+14     	; 0x2eae <do_wall+0x47a>
				{
					do_once=true;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	80 93 72 00 	sts	0x0072, r24
					c_state=W_REINIT;
    2ea6:	82 e1       	ldi	r24, 0x12	; 18
    2ea8:	80 93 22 01 	sts	0x0122, r24
				}
			}
			break;
    2eac:	09 c0       	rjmp	.+18     	; 0x2ec0 <do_wall+0x48c>
    2eae:	08 c0       	rjmp	.+16     	; 0x2ec0 <do_wall+0x48c>
			default:
			status.system.wall =false;
    2eb0:	80 91 be 01 	lds	r24, 0x01BE
    2eb4:	8f 7d       	andi	r24, 0xDF	; 223
    2eb6:	80 93 be 01 	sts	0x01BE, r24
			c_state = PRE_DELAY;
    2eba:	10 92 22 01 	sts	0x0122, r1
			break;
    2ebe:	00 00       	nop
		}
	}
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	08 95       	ret

00002ec6 <start_circle>:
	* \param task  Used to specify a pointer to a specific received task.
	*
	* \return void
	*/
	void start_circle(task_t *task)
	{
    2ec6:	cf 93       	push	r28
    2ec8:	df 93       	push	r29
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <start_circle+0x6>
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	89 83       	std	Y+1, r24	; 0x01
		do_cirecle();
    2ed4:	0e 94 8f 13 	call	0x271e	; 0x271e <do_cirecle>
		status.system.circle =true;
    2ed8:	80 91 be 01 	lds	r24, 0x01BE
    2edc:	88 60       	ori	r24, 0x08	; 8
    2ede:	80 93 be 01 	sts	0x01BE, r24
	}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	08 95       	ret

00002eec <start_wall>:
	* \param task  Used to specify a pointer to a specific received task.
	*
	* \return void
	*/
	void start_wall(task_t *task)
	{
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <start_wall+0x6>
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	9a 83       	std	Y+2, r25	; 0x02
    2ef8:	89 83       	std	Y+1, r24	; 0x01
		do_wall();
    2efa:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <do_wall>
		status.system.wall =true;
    2efe:	80 91 be 01 	lds	r24, 0x01BE
    2f02:	80 62       	ori	r24, 0x20	; 32
    2f04:	80 93 be 01 	sts	0x01BE, r24
	}
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	08 95       	ret

00002f12 <motors_init>:
	* \param
	*
	* \return void
	*/
	void motors_init(void)
	{
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
		init_ext_int();
    2f1a:	0e 94 71 10 	call	0x20e2	; 0x20e2 <init_ext_int>
		init_pwm();
    2f1e:	0e 94 93 10 	call	0x2126	; 0x2126 <init_pwm>
		set_l_m_forward();
    2f22:	82 e3       	ldi	r24, 0x32	; 50
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	22 e3       	ldi	r18, 0x32	; 50
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	f9 01       	movw	r30, r18
    2f2c:	20 81       	ld	r18, Z
    2f2e:	20 61       	ori	r18, 0x10	; 16
    2f30:	fc 01       	movw	r30, r24
    2f32:	20 83       	st	Z, r18
    2f34:	85 e3       	ldi	r24, 0x35	; 53
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	25 e3       	ldi	r18, 0x35	; 53
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	f9 01       	movw	r30, r18
    2f3e:	20 81       	ld	r18, Z
    2f40:	2e 7f       	andi	r18, 0xFE	; 254
    2f42:	fc 01       	movw	r30, r24
    2f44:	20 83       	st	Z, r18
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	80 93 94 01 	sts	0x0194, r24
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	80 93 93 01 	sts	0x0193, r24
		set_r_m_forward();
    2f52:	82 e3       	ldi	r24, 0x32	; 50
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	22 e3       	ldi	r18, 0x32	; 50
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	f9 01       	movw	r30, r18
    2f5c:	20 81       	ld	r18, Z
    2f5e:	20 62       	ori	r18, 0x20	; 32
    2f60:	fc 01       	movw	r30, r24
    2f62:	20 83       	st	Z, r18
    2f64:	82 e3       	ldi	r24, 0x32	; 50
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	22 e3       	ldi	r18, 0x32	; 50
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	f9 01       	movw	r30, r18
    2f6e:	20 81       	ld	r18, Z
    2f70:	2f 7b       	andi	r18, 0xBF	; 191
    2f72:	fc 01       	movw	r30, r24
    2f74:	20 83       	st	Z, r18
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	80 93 a5 01 	sts	0x01A5, r24
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	80 93 a4 01 	sts	0x01A4, r24
		l_motor.ref_rpm=0;
    2f82:	10 92 98 01 	sts	0x0198, r1
    2f86:	10 92 97 01 	sts	0x0197, r1
		r_motor.ref_rpm=0;
    2f8a:	10 92 a9 01 	sts	0x01A9, r1
    2f8e:	10 92 a8 01 	sts	0x01A8, r1
		l_motor.rpm=1;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	90 93 96 01 	sts	0x0196, r25
    2f9a:	80 93 95 01 	sts	0x0195, r24
		r_motor.rpm=1;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	90 93 a7 01 	sts	0x01A7, r25
    2fa6:	80 93 a6 01 	sts	0x01A6, r24
		l_motor.break_count=1;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	80 93 92 01 	sts	0x0192, r24
		r_motor.break_count=1;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	80 93 a3 01 	sts	0x01A3, r24
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	08 95       	ret

00002fbc <set_pid_int>:
timer_t test;

uint8_t led_int = 15;

void set_pid_int(task_t *task)
{
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <set_pid_int+0x6>
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	9a 83       	std	Y+2, r25	; 0x02
    2fc8:	89 83       	std	Y+1, r24	; 0x01
	led_int=task->data.value;
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fce:	fc 01       	movw	r30, r24
    2fd0:	85 81       	ldd	r24, Z+5	; 0x05
    2fd2:	96 81       	ldd	r25, Z+6	; 0x06
    2fd4:	a7 81       	ldd	r26, Z+7	; 0x07
    2fd6:	b0 85       	ldd	r27, Z+8	; 0x08
    2fd8:	80 93 73 00 	sts	0x0073, r24
}
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	08 95       	ret

00002fe6 <main>:
* \param
*
* \return int
*/
int main(void)
{
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	2f 97       	sbiw	r28, 0x0f	; 15
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	de bf       	out	0x3e, r29	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	cd bf       	out	0x3d, r28	; 61
	uint8_t clock_timer					= CLOCK_INTERVAL;
    2ffa:	84 e6       	ldi	r24, 0x64	; 100
    2ffc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t com_prot_timer				= COMM_PROT_INTERVAL;
    2ffe:	8a e0       	ldi	r24, 0x0A	; 10
    3000:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t adc_timer					= ADC_INTERVAL;
    3002:	8a e0       	ldi	r24, 0x0A	; 10
    3004:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t motor_timer					= MOTOR_INTERVAL;
    3006:	82 e0       	ldi	r24, 0x02	; 2
    3008:	8a 87       	std	Y+10, r24	; 0x0a
	uint8_t led_timer					= LED_INTERVAL;
    300a:	8d e0       	ldi	r24, 0x0D	; 13
    300c:	8b 87       	std	Y+11, r24	; 0x0b
	uint8_t send_adc_value_timer		= SEND_ADC_VALUE_INTERVAL;
    300e:	82 e3       	ldi	r24, 0x32	; 50
    3010:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t send_sensor_timer			= SEND_SENSOR_INTERVAL;
    3012:	8f ef       	ldi	r24, 0xFF	; 255
    3014:	8c 87       	std	Y+12, r24	; 0x0c

	bool do_handler				= false;
    3016:	1d 82       	std	Y+5, r1	; 0x05
	bool run_clock				= false;
    3018:	1e 82       	std	Y+6, r1	; 0x06
	bool run_com_prot			= false;
    301a:	1f 82       	std	Y+7, r1	; 0x07
	bool run_adc				= false;
    301c:	18 86       	std	Y+8, r1	; 0x08
	bool run_send_adc_value		= false;
    301e:	19 86       	std	Y+9, r1	; 0x09
	bool run_motor				= false;
    3020:	1d 86       	std	Y+13, r1	; 0x0d
	bool run_led				= false;
    3022:	1e 86       	std	Y+14, r1	; 0x0e
	bool run_send_sensor		= false;
    3024:	1f 86       	std	Y+15, r1	; 0x0f
	
	
	LED_PIN_init();
    3026:	87 e3       	ldi	r24, 0x37	; 55
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	27 e3       	ldi	r18, 0x37	; 55
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	f9 01       	movw	r30, r18
    3030:	20 81       	ld	r18, Z
    3032:	24 60       	ori	r18, 0x04	; 4
    3034:	fc 01       	movw	r30, r24
    3036:	20 83       	st	Z, r18
	led_off();
    3038:	88 e3       	ldi	r24, 0x38	; 56
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	28 e3       	ldi	r18, 0x38	; 56
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	f9 01       	movw	r30, r18
    3042:	20 81       	ld	r18, Z
    3044:	24 60       	ori	r18, 0x04	; 4
    3046:	fc 01       	movw	r30, r24
    3048:	20 83       	st	Z, r18
	led_on();
    304a:	88 e3       	ldi	r24, 0x38	; 56
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	28 e3       	ldi	r18, 0x38	; 56
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	f9 01       	movw	r30, r18
    3054:	20 81       	ld	r18, Z
    3056:	2b 7f       	andi	r18, 0xFB	; 251
    3058:	fc 01       	movw	r30, r24
    305a:	20 83       	st	Z, r18
	
	status.byte[0]=0;
    305c:	10 92 be 01 	sts	0x01BE, r1
	adc_measurement_init();
    3060:	0e 94 78 00 	call	0xf0	; 0xf0 <adc_measurement_init>
	USART_init();
    3064:	0e 94 7f 22 	call	0x44fe	; 0x44fe <USART_init>
	timer1_init();
    3068:	0e 94 71 21 	call	0x42e2	; 0x42e2 <timer1_init>
	recive_task_init();
    306c:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <recive_task_init>
	motors_init();
    3070:	0e 94 89 17 	call	0x2f12	; 0x2f12 <motors_init>
	led_init();
    3074:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <led_init>
	
	enable_features.adc=false;
    3078:	10 92 47 01 	sts	0x0147, r1
	enable_features.send_adc_value=false;
    307c:	10 92 48 01 	sts	0x0148, r1
	enable_features.send_sensor_values=false;
    3080:	10 92 49 01 	sts	0x0149, r1
	
	control = &state_idle_control_logic;
    3084:	8c e4       	ldi	r24, 0x4C	; 76
    3086:	92 e0       	ldi	r25, 0x02	; 2
    3088:	90 93 5f 01 	sts	0x015F, r25
    308c:	80 93 5e 01 	sts	0x015E, r24
	//status.system.connected = true;
	
	sei();
    3090:	78 94       	sei
	
	while(1)
	{
		if(system_tic == true) // 10 millisecond has passed
    3092:	80 91 ba 01 	lds	r24, 0x01BA
    3096:	90 91 bb 01 	lds	r25, 0x01BB
    309a:	a0 91 bc 01 	lds	r26, 0x01BC
    309e:	b0 91 bd 01 	lds	r27, 0x01BD
    30a2:	81 30       	cpi	r24, 0x01	; 1
    30a4:	91 05       	cpc	r25, r1
    30a6:	a1 05       	cpc	r26, r1
    30a8:	b1 05       	cpc	r27, r1
    30aa:	09 f0       	breq	.+2      	; 0x30ae <main+0xc8>
    30ac:	4a c0       	rjmp	.+148    	; 0x3142 <main+0x15c>
		{
			toggle_led();
    30ae:	88 e3       	ldi	r24, 0x38	; 56
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	28 e3       	ldi	r18, 0x38	; 56
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	f9 01       	movw	r30, r18
    30b8:	30 81       	ld	r19, Z
    30ba:	24 e0       	ldi	r18, 0x04	; 4
    30bc:	23 27       	eor	r18, r19
    30be:	fc 01       	movw	r30, r24
    30c0:	20 83       	st	Z, r18
			system_tic = false;
    30c2:	10 92 ba 01 	sts	0x01BA, r1
    30c6:	10 92 bb 01 	sts	0x01BB, r1
    30ca:	10 92 bc 01 	sts	0x01BC, r1
    30ce:	10 92 bd 01 	sts	0x01BD, r1
			if(--clock_timer == 0)
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	81 50       	subi	r24, 0x01	; 1
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	88 23       	and	r24, r24
    30dc:	31 f4       	brne	.+12     	; 0x30ea <main+0x104>
			{
				clock_timer = CLOCK_INTERVAL;
    30de:	84 e6       	ldi	r24, 0x64	; 100
    30e0:	89 83       	std	Y+1, r24	; 0x01
				start(run_clock);
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	8d 83       	std	Y+5, r24	; 0x05
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	8e 83       	std	Y+6, r24	; 0x06
			}
			if(--com_prot_timer == 0)
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	81 50       	subi	r24, 0x01	; 1
    30ee:	8a 83       	std	Y+2, r24	; 0x02
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	88 23       	and	r24, r24
    30f4:	31 f4       	brne	.+12     	; 0x3102 <main+0x11c>
			{
				com_prot_timer = COMM_PROT_INTERVAL;
    30f6:	8a e0       	ldi	r24, 0x0A	; 10
    30f8:	8a 83       	std	Y+2, r24	; 0x02
				start(run_com_prot);
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	8d 83       	std	Y+5, r24	; 0x05
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	8f 83       	std	Y+7, r24	; 0x07
//  			if(--led_timer == 0)
//  			{
//  				led_timer = led_int;
//  				start(run_led);
//  			}
 			if( --adc_timer == 0 && enable_features.adc == true )
    3102:	8b 81       	ldd	r24, Y+3	; 0x03
    3104:	81 50       	subi	r24, 0x01	; 1
    3106:	8b 83       	std	Y+3, r24	; 0x03
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	88 23       	and	r24, r24
    310c:	51 f4       	brne	.+20     	; 0x3122 <main+0x13c>
    310e:	80 91 47 01 	lds	r24, 0x0147
    3112:	88 23       	and	r24, r24
    3114:	31 f0       	breq	.+12     	; 0x3122 <main+0x13c>
			
 			{
 				adc_timer = ADC_INTERVAL;
    3116:	8a e0       	ldi	r24, 0x0A	; 10
    3118:	8b 83       	std	Y+3, r24	; 0x03
 				start(run_adc);
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	8d 83       	std	Y+5, r24	; 0x05
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	88 87       	std	Y+8, r24	; 0x08
 			}
 			if(enable_features.send_adc_value == true && --send_adc_value_timer == 0)
    3122:	80 91 48 01 	lds	r24, 0x0148
    3126:	88 23       	and	r24, r24
    3128:	61 f0       	breq	.+24     	; 0x3142 <main+0x15c>
    312a:	8c 81       	ldd	r24, Y+4	; 0x04
    312c:	81 50       	subi	r24, 0x01	; 1
    312e:	8c 83       	std	Y+4, r24	; 0x04
    3130:	8c 81       	ldd	r24, Y+4	; 0x04
    3132:	88 23       	and	r24, r24
    3134:	31 f4       	brne	.+12     	; 0x3142 <main+0x15c>
 			{
 				send_adc_value_timer = SEND_ADC_VALUE_INTERVAL;
    3136:	82 e3       	ldi	r24, 0x32	; 50
    3138:	8c 83       	std	Y+4, r24	; 0x04
 				start(run_send_adc_value);
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	8d 83       	std	Y+5, r24	; 0x05
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	89 87       	std	Y+9, r24	; 0x09
//  				send_sensor_timer = SEND_SENSOR_INTERVAL;
//  				start(run_send_sensor);
//  			}
		
		}
		if(do_handler)/*get_line_error();*/
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	88 23       	and	r24, r24
    3146:	01 f1       	breq	.+64     	; 0x3188 <main+0x1a2>
		{
			do_handler = false;
    3148:	1d 82       	std	Y+5, r1	; 0x05
			if (run_clock)
    314a:	8e 81       	ldd	r24, Y+6	; 0x06
    314c:	88 23       	and	r24, r24
    314e:	19 f0       	breq	.+6      	; 0x3156 <main+0x170>
			{
				run_clock = false;
    3150:	1e 82       	std	Y+6, r1	; 0x06
				clock_tick();
    3152:	0e 94 c5 18 	call	0x318a	; 0x318a <clock_tick>
			}
			if (run_com_prot)
    3156:	8f 81       	ldd	r24, Y+7	; 0x07
    3158:	88 23       	and	r24, r24
    315a:	19 f0       	breq	.+6      	; 0x3162 <main+0x17c>
			{
				run_com_prot = false;
    315c:	1f 82       	std	Y+7, r1	; 0x07
				com_prot_task();
    315e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <com_prot_task>
//  			{
//  				run_led = false;
//  				//get_line_error();
//  			}
 			
  			if (run_adc)
    3162:	88 85       	ldd	r24, Y+8	; 0x08
    3164:	88 23       	and	r24, r24
    3166:	19 f0       	breq	.+6      	; 0x316e <main+0x188>
  			{
  				run_adc = false;
    3168:	18 86       	std	Y+8, r1	; 0x08
  				handleMeasurement();
    316a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <handleMeasurement>
  			}
  			
  			if (run_send_adc_value)
    316e:	89 85       	ldd	r24, Y+9	; 0x09
    3170:	88 23       	and	r24, r24
    3172:	19 f0       	breq	.+6      	; 0x317a <main+0x194>
  			{
  				run_send_adc_value = false;
    3174:	19 86       	std	Y+9, r1	; 0x09
  				send_adc_value_to_pc();
    3176:	0e 94 0f 01 	call	0x21e	; 0x21e <send_adc_value_to_pc>
//   			}
// 
// 			if (state_changed||new_data_available||tmr_exp(&state_timer))//can be further optimised
// 			{
//  				state_changed=false;
				(*control)();
    317a:	80 91 5e 01 	lds	r24, 0x015E
    317e:	90 91 5f 01 	lds	r25, 0x015F
    3182:	fc 01       	movw	r30, r24
    3184:	09 95       	icall
//  			}
		}
		
		
	}
    3186:	85 cf       	rjmp	.-246    	; 0x3092 <main+0xac>
    3188:	84 cf       	rjmp	.-248    	; 0x3092 <main+0xac>

0000318a <clock_tick>:
 * \param 
 * 
 * \return void
 */
void clock_tick(void)
{
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
	if (++date.second == 60)
    3192:	80 91 b2 01 	lds	r24, 0x01B2
    3196:	90 91 b3 01 	lds	r25, 0x01B3
    319a:	a0 91 b4 01 	lds	r26, 0x01B4
    319e:	b0 91 b5 01 	lds	r27, 0x01B5
    31a2:	01 96       	adiw	r24, 0x01	; 1
    31a4:	a1 1d       	adc	r26, r1
    31a6:	b1 1d       	adc	r27, r1
    31a8:	80 93 b2 01 	sts	0x01B2, r24
    31ac:	90 93 b3 01 	sts	0x01B3, r25
    31b0:	a0 93 b4 01 	sts	0x01B4, r26
    31b4:	b0 93 b5 01 	sts	0x01B5, r27
    31b8:	8c 33       	cpi	r24, 0x3C	; 60
    31ba:	91 05       	cpc	r25, r1
    31bc:	a1 05       	cpc	r26, r1
    31be:	b1 05       	cpc	r27, r1
    31c0:	09 f0       	breq	.+2      	; 0x31c4 <clock_tick+0x3a>
    31c2:	48 c0       	rjmp	.+144    	; 0x3254 <clock_tick+0xca>
	{
		date.second =0;
    31c4:	10 92 b2 01 	sts	0x01B2, r1
    31c8:	10 92 b3 01 	sts	0x01B3, r1
    31cc:	10 92 b4 01 	sts	0x01B4, r1
    31d0:	10 92 b5 01 	sts	0x01B5, r1
		if (++date.minute == 60)
    31d4:	80 91 ae 01 	lds	r24, 0x01AE
    31d8:	90 91 af 01 	lds	r25, 0x01AF
    31dc:	a0 91 b0 01 	lds	r26, 0x01B0
    31e0:	b0 91 b1 01 	lds	r27, 0x01B1
    31e4:	01 96       	adiw	r24, 0x01	; 1
    31e6:	a1 1d       	adc	r26, r1
    31e8:	b1 1d       	adc	r27, r1
    31ea:	80 93 ae 01 	sts	0x01AE, r24
    31ee:	90 93 af 01 	sts	0x01AF, r25
    31f2:	a0 93 b0 01 	sts	0x01B0, r26
    31f6:	b0 93 b1 01 	sts	0x01B1, r27
    31fa:	8c 33       	cpi	r24, 0x3C	; 60
    31fc:	91 05       	cpc	r25, r1
    31fe:	a1 05       	cpc	r26, r1
    3200:	b1 05       	cpc	r27, r1
    3202:	41 f5       	brne	.+80     	; 0x3254 <clock_tick+0xca>
		{
			date.minute =0;
    3204:	10 92 ae 01 	sts	0x01AE, r1
    3208:	10 92 af 01 	sts	0x01AF, r1
    320c:	10 92 b0 01 	sts	0x01B0, r1
    3210:	10 92 b1 01 	sts	0x01B1, r1
			if (++date.hour == 24)
    3214:	80 91 aa 01 	lds	r24, 0x01AA
    3218:	90 91 ab 01 	lds	r25, 0x01AB
    321c:	a0 91 ac 01 	lds	r26, 0x01AC
    3220:	b0 91 ad 01 	lds	r27, 0x01AD
    3224:	01 96       	adiw	r24, 0x01	; 1
    3226:	a1 1d       	adc	r26, r1
    3228:	b1 1d       	adc	r27, r1
    322a:	80 93 aa 01 	sts	0x01AA, r24
    322e:	90 93 ab 01 	sts	0x01AB, r25
    3232:	a0 93 ac 01 	sts	0x01AC, r26
    3236:	b0 93 ad 01 	sts	0x01AD, r27
    323a:	88 31       	cpi	r24, 0x18	; 24
    323c:	91 05       	cpc	r25, r1
    323e:	a1 05       	cpc	r26, r1
    3240:	b1 05       	cpc	r27, r1
    3242:	41 f4       	brne	.+16     	; 0x3254 <clock_tick+0xca>
			{
				date.hour =0;				
    3244:	10 92 aa 01 	sts	0x01AA, r1
    3248:	10 92 ab 01 	sts	0x01AB, r1
    324c:	10 92 ac 01 	sts	0x01AC, r1
    3250:	10 92 ad 01 	sts	0x01AD, r1
			}
		}
	}
}
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	08 95       	ret

0000325a <get_date_to_int>:
 * \param 
 * 
 * \return uint32_t
 */
uint32_t get_date_to_int(void) 
{
    325a:	cf 93       	push	r28
    325c:	df 93       	push	r29
    325e:	00 d0       	rcall	.+0      	; 0x3260 <get_date_to_int+0x6>
    3260:	00 d0       	rcall	.+0      	; 0x3262 <get_date_to_int+0x8>
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
	uint32_t date_u32=date.hour*10000;//245959
    3266:	20 91 aa 01 	lds	r18, 0x01AA
    326a:	30 91 ab 01 	lds	r19, 0x01AB
    326e:	40 91 ac 01 	lds	r20, 0x01AC
    3272:	50 91 ad 01 	lds	r21, 0x01AD
    3276:	80 e1       	ldi	r24, 0x10	; 16
    3278:	97 e2       	ldi	r25, 0x27	; 39
    327a:	dc 01       	movw	r26, r24
    327c:	0e 94 76 23 	call	0x46ec	; 0x46ec <__muluhisi3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	89 83       	std	Y+1, r24	; 0x01
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	ab 83       	std	Y+3, r26	; 0x03
    328a:	bc 83       	std	Y+4, r27	; 0x04
	date_u32 += date.minute*100;
    328c:	20 91 ae 01 	lds	r18, 0x01AE
    3290:	30 91 af 01 	lds	r19, 0x01AF
    3294:	40 91 b0 01 	lds	r20, 0x01B0
    3298:	50 91 b1 01 	lds	r21, 0x01B1
    329c:	84 e6       	ldi	r24, 0x64	; 100
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	dc 01       	movw	r26, r24
    32a2:	0e 94 76 23 	call	0x46ec	; 0x46ec <__muluhisi3>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	29 81       	ldd	r18, Y+1	; 0x01
    32ac:	3a 81       	ldd	r19, Y+2	; 0x02
    32ae:	4b 81       	ldd	r20, Y+3	; 0x03
    32b0:	5c 81       	ldd	r21, Y+4	; 0x04
    32b2:	82 0f       	add	r24, r18
    32b4:	93 1f       	adc	r25, r19
    32b6:	a4 1f       	adc	r26, r20
    32b8:	b5 1f       	adc	r27, r21
    32ba:	89 83       	std	Y+1, r24	; 0x01
    32bc:	9a 83       	std	Y+2, r25	; 0x02
    32be:	ab 83       	std	Y+3, r26	; 0x03
    32c0:	bc 83       	std	Y+4, r27	; 0x04
	date_u32 += date.second;
    32c2:	80 91 b2 01 	lds	r24, 0x01B2
    32c6:	90 91 b3 01 	lds	r25, 0x01B3
    32ca:	a0 91 b4 01 	lds	r26, 0x01B4
    32ce:	b0 91 b5 01 	lds	r27, 0x01B5
    32d2:	29 81       	ldd	r18, Y+1	; 0x01
    32d4:	3a 81       	ldd	r19, Y+2	; 0x02
    32d6:	4b 81       	ldd	r20, Y+3	; 0x03
    32d8:	5c 81       	ldd	r21, Y+4	; 0x04
    32da:	82 0f       	add	r24, r18
    32dc:	93 1f       	adc	r25, r19
    32de:	a4 1f       	adc	r26, r20
    32e0:	b5 1f       	adc	r27, r21
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	9a 83       	std	Y+2, r25	; 0x02
    32e6:	ab 83       	std	Y+3, r26	; 0x03
    32e8:	bc 83       	std	Y+4, r27	; 0x04
	return date_u32;    
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	9a 81       	ldd	r25, Y+2	; 0x02
    32ee:	ab 81       	ldd	r26, Y+3	; 0x03
    32f0:	bc 81       	ldd	r27, Y+4	; 0x04
    32f2:	bc 01       	movw	r22, r24
    32f4:	cd 01       	movw	r24, r26
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	08 95       	ret

00003304 <set_Kp>:
* \param task
*
* \return void
*/
void set_Kp(task_t *task)
{
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	2b 97       	sbiw	r28, 0x0b	; 11
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	9b 87       	std	Y+11, r25	; 0x0b
    331a:	8a 87       	std	Y+10, r24	; 0x0a
	Kp = task->data.u8[3];
    331c:	8a 85       	ldd	r24, Y+10	; 0x0a
    331e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3320:	fc 01       	movw	r30, r24
    3322:	80 85       	ldd	r24, Z+8	; 0x08
    3324:	80 93 74 00 	sts	0x0074, r24
	
	task_t pk_task = {.data.command = PID_KP, .data.value = Kp};
    3328:	29 e0       	ldi	r18, 0x09	; 9
    332a:	ce 01       	movw	r24, r28
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	fc 01       	movw	r30, r24
    3330:	32 2f       	mov	r19, r18
    3332:	11 92       	st	Z+, r1
    3334:	3a 95       	dec	r19
    3336:	e9 f7       	brne	.-6      	; 0x3332 <set_Kp+0x2e>
    3338:	89 e2       	ldi	r24, 0x29	; 41
    333a:	89 83       	std	Y+1, r24	; 0x01
    333c:	80 91 74 00 	lds	r24, 0x0074
    3340:	88 2f       	mov	r24, r24
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	a0 e0       	ldi	r26, 0x00	; 0
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	8e 83       	std	Y+6, r24	; 0x06
    334a:	9f 83       	std	Y+7, r25	; 0x07
    334c:	a8 87       	std	Y+8, r26	; 0x08
    334e:	b9 87       	std	Y+9, r27	; 0x09
	add_task(&pk_task);
    3350:	ce 01       	movw	r24, r28
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    3358:	2b 96       	adiw	r28, 0x0b	; 11
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <set_Kd>:
* \param task
*
* \return void
*/
void set_Kd(task_t *task)
{
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	2b 97       	sbiw	r28, 0x0b	; 11
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	9b 87       	std	Y+11, r25	; 0x0b
    3380:	8a 87       	std	Y+10, r24	; 0x0a
	Kd = task->data.u8[3];
    3382:	8a 85       	ldd	r24, Y+10	; 0x0a
    3384:	9b 85       	ldd	r25, Y+11	; 0x0b
    3386:	fc 01       	movw	r30, r24
    3388:	80 85       	ldd	r24, Z+8	; 0x08
    338a:	80 93 75 00 	sts	0x0075, r24
	
	task_t pk_task = {.data.command = PID_KP, .data.value = Kd};
    338e:	29 e0       	ldi	r18, 0x09	; 9
    3390:	ce 01       	movw	r24, r28
    3392:	01 96       	adiw	r24, 0x01	; 1
    3394:	fc 01       	movw	r30, r24
    3396:	32 2f       	mov	r19, r18
    3398:	11 92       	st	Z+, r1
    339a:	3a 95       	dec	r19
    339c:	e9 f7       	brne	.-6      	; 0x3398 <set_Kd+0x2e>
    339e:	89 e2       	ldi	r24, 0x29	; 41
    33a0:	89 83       	std	Y+1, r24	; 0x01
    33a2:	80 91 75 00 	lds	r24, 0x0075
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a0 e0       	ldi	r26, 0x00	; 0
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	8e 83       	std	Y+6, r24	; 0x06
    33b0:	9f 83       	std	Y+7, r25	; 0x07
    33b2:	a8 87       	std	Y+8, r26	; 0x08
    33b4:	b9 87       	std	Y+9, r27	; 0x09
	add_task(&pk_task);
    33b6:	ce 01       	movw	r24, r28
    33b8:	01 96       	adiw	r24, 0x01	; 1
    33ba:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    33be:	2b 96       	adiw	r28, 0x0b	; 11
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	f8 94       	cli
    33c4:	de bf       	out	0x3e, r29	; 62
    33c6:	0f be       	out	0x3f, r0	; 63
    33c8:	cd bf       	out	0x3d, r28	; 61
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	08 95       	ret

000033d0 <__vector_13>:
* \param Vector for the interrupt.
*
* \return
*/
ISR(USART_RXC_vect)
{
    33d0:	1f 92       	push	r1
    33d2:	0f 92       	push	r0
    33d4:	00 90 5f 00 	lds	r0, 0x005F
    33d8:	0f 92       	push	r0
    33da:	11 24       	eor	r1, r1
    33dc:	2f 93       	push	r18
    33de:	3f 93       	push	r19
    33e0:	8f 93       	push	r24
    33e2:	9f 93       	push	r25
    33e4:	ef 93       	push	r30
    33e6:	ff 93       	push	r31
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
	static uint8_t rx_index = 0;
	usart_rx_task.buffer[rx_index]=get_usart();
    33f0:	80 91 2e 01 	lds	r24, 0x012E
    33f4:	88 2f       	mov	r24, r24
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	2c e2       	ldi	r18, 0x2C	; 44
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	f9 01       	movw	r30, r18
    33fe:	20 81       	ld	r18, Z
    3400:	86 53       	subi	r24, 0x36	; 54
    3402:	9c 4f       	sbci	r25, 0xFC	; 252
    3404:	fc 01       	movw	r30, r24
    3406:	20 83       	st	Z, r18
	if(++rx_index>get_array_len(usart_rx_task.buffer)-1)
    3408:	80 91 2e 01 	lds	r24, 0x012E
    340c:	8f 5f       	subi	r24, 0xFF	; 255
    340e:	80 93 2e 01 	sts	0x012E, r24
    3412:	80 91 2e 01 	lds	r24, 0x012E
    3416:	89 30       	cpi	r24, 0x09	; 9
    3418:	38 f0       	brcs	.+14     	; 0x3428 <__vector_13+0x58>
	{
		rx_index = 0;
    341a:	10 92 2e 01 	sts	0x012E, r1
		status.system.task_received=true;
    341e:	80 91 be 01 	lds	r24, 0x01BE
    3422:	84 60       	ori	r24, 0x04	; 4
    3424:	80 93 be 01 	sts	0x01BE, r24
	}
}
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	ff 91       	pop	r31
    342e:	ef 91       	pop	r30
    3430:	9f 91       	pop	r25
    3432:	8f 91       	pop	r24
    3434:	3f 91       	pop	r19
    3436:	2f 91       	pop	r18
    3438:	0f 90       	pop	r0
    343a:	00 92 5f 00 	sts	0x005F, r0
    343e:	0f 90       	pop	r0
    3440:	1f 90       	pop	r1
    3442:	18 95       	reti

00003444 <__vector_14>:
* \param Vector for the  interrupt.
*
* \return
*/
ISR(USART_UDRE_vect)
{
    3444:	1f 92       	push	r1
    3446:	0f 92       	push	r0
    3448:	00 90 5f 00 	lds	r0, 0x005F
    344c:	0f 92       	push	r0
    344e:	11 24       	eor	r1, r1
    3450:	2f 93       	push	r18
    3452:	3f 93       	push	r19
    3454:	8f 93       	push	r24
    3456:	9f 93       	push	r25
    3458:	ef 93       	push	r30
    345a:	ff 93       	push	r31
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
	static uint8_t tx_index = 0;
	static char *string;
	
	if (usart_tx_task.data.command==STRING)
    3464:	80 91 d3 03 	lds	r24, 0x03D3
    3468:	88 23       	and	r24, r24
    346a:	a9 f5       	brne	.+106    	; 0x34d6 <__vector_14+0x92>
		
		if (tx_index==0)
		{
			//string = usart_tx_task.data.str;
		}
		if (tx_index++ < 5)
    346c:	80 91 2f 01 	lds	r24, 0x012F
    3470:	91 e0       	ldi	r25, 0x01	; 1
    3472:	98 0f       	add	r25, r24
    3474:	90 93 2f 01 	sts	0x012F, r25
    3478:	85 30       	cpi	r24, 0x05	; 5
    347a:	08 f4       	brcc	.+2      	; 0x347e <__vector_14+0x3a>
    347c:	51 c0       	rjmp	.+162    	; 0x3520 <__vector_14+0xdc>
		{
			//set_usart(usart_tx_task.buffer[tx_index]);
		}
		else
		{
			set_usart(*string);
    347e:	8c e2       	ldi	r24, 0x2C	; 44
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	20 91 30 01 	lds	r18, 0x0130
    3486:	30 91 31 01 	lds	r19, 0x0131
    348a:	f9 01       	movw	r30, r18
    348c:	20 81       	ld	r18, Z
    348e:	fc 01       	movw	r30, r24
    3490:	20 83       	st	Z, r18
			if(!*++string){
    3492:	80 91 30 01 	lds	r24, 0x0130
    3496:	90 91 31 01 	lds	r25, 0x0131
    349a:	01 96       	adiw	r24, 0x01	; 1
    349c:	90 93 31 01 	sts	0x0131, r25
    34a0:	80 93 30 01 	sts	0x0130, r24
    34a4:	80 91 30 01 	lds	r24, 0x0130
    34a8:	90 91 31 01 	lds	r25, 0x0131
    34ac:	fc 01       	movw	r30, r24
    34ae:	80 81       	ld	r24, Z
    34b0:	88 23       	and	r24, r24
    34b2:	b1 f5       	brne	.+108    	; 0x3520 <__vector_14+0xdc>
				tx_index=0;
    34b4:	10 92 2f 01 	sts	0x012F, r1
				disable_uart_transmision();
    34b8:	8a e2       	ldi	r24, 0x2A	; 42
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	2a e2       	ldi	r18, 0x2A	; 42
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	f9 01       	movw	r30, r18
    34c2:	20 81       	ld	r18, Z
    34c4:	2f 7d       	andi	r18, 0xDF	; 223
    34c6:	fc 01       	movw	r30, r24
    34c8:	20 83       	st	Z, r18
				status.system.sending_task = false;
    34ca:	80 91 be 01 	lds	r24, 0x01BE
    34ce:	8d 7f       	andi	r24, 0xFD	; 253
    34d0:	80 93 be 01 	sts	0x01BE, r24
    34d4:	25 c0       	rjmp	.+74     	; 0x3520 <__vector_14+0xdc>
			
		}
	}
	else
	{
		set_usart(usart_tx_task.buffer[tx_index]);
    34d6:	8c e2       	ldi	r24, 0x2C	; 44
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	20 91 2f 01 	lds	r18, 0x012F
    34de:	22 2f       	mov	r18, r18
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	2d 52       	subi	r18, 0x2D	; 45
    34e4:	3c 4f       	sbci	r19, 0xFC	; 252
    34e6:	f9 01       	movw	r30, r18
    34e8:	20 81       	ld	r18, Z
    34ea:	fc 01       	movw	r30, r24
    34ec:	20 83       	st	Z, r18
		if (++tx_index>get_array_len(usart_tx_task.buffer)-1)
    34ee:	80 91 2f 01 	lds	r24, 0x012F
    34f2:	8f 5f       	subi	r24, 0xFF	; 255
    34f4:	80 93 2f 01 	sts	0x012F, r24
    34f8:	80 91 2f 01 	lds	r24, 0x012F
    34fc:	89 30       	cpi	r24, 0x09	; 9
    34fe:	80 f0       	brcs	.+32     	; 0x3520 <__vector_14+0xdc>
		{
			tx_index = 0;
    3500:	10 92 2f 01 	sts	0x012F, r1
			
			disable_uart_transmision();
    3504:	8a e2       	ldi	r24, 0x2A	; 42
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	2a e2       	ldi	r18, 0x2A	; 42
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	f9 01       	movw	r30, r18
    350e:	20 81       	ld	r18, Z
    3510:	2f 7d       	andi	r18, 0xDF	; 223
    3512:	fc 01       	movw	r30, r24
    3514:	20 83       	st	Z, r18
			status.system.sending_task = false;
    3516:	80 91 be 01 	lds	r24, 0x01BE
    351a:	8d 7f       	andi	r24, 0xFD	; 253
    351c:	80 93 be 01 	sts	0x01BE, r24
		}
	}
}
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	ff 91       	pop	r31
    3526:	ef 91       	pop	r30
    3528:	9f 91       	pop	r25
    352a:	8f 91       	pop	r24
    352c:	3f 91       	pop	r19
    352e:	2f 91       	pop	r18
    3530:	0f 90       	pop	r0
    3532:	00 92 5f 00 	sts	0x005F, r0
    3536:	0f 90       	pop	r0
    3538:	1f 90       	pop	r1
    353a:	18 95       	reti

0000353c <__vector_7>:
*
* \return
*/

ISR(TIMER1_COMPA_vect)
{
    353c:	1f 92       	push	r1
    353e:	0f 92       	push	r0
    3540:	00 90 5f 00 	lds	r0, 0x005F
    3544:	0f 92       	push	r0
    3546:	11 24       	eor	r1, r1
    3548:	2f 93       	push	r18
    354a:	3f 93       	push	r19
    354c:	4f 93       	push	r20
    354e:	5f 93       	push	r21
    3550:	6f 93       	push	r22
    3552:	7f 93       	push	r23
    3554:	8f 93       	push	r24
    3556:	9f 93       	push	r25
    3558:	af 93       	push	r26
    355a:	bf 93       	push	r27
    355c:	ef 93       	push	r30
    355e:	ff 93       	push	r31
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
	static uint8_t pulse_timer = 0,sys_timer = 0;
	static int16_t l_m,r_m;
	static int16_t l_error, r_error;
	
	if (++pulse_timer>7)// if happens to often can be increased up to 16ms
    3568:	80 91 32 01 	lds	r24, 0x0132
    356c:	8f 5f       	subi	r24, 0xFF	; 255
    356e:	80 93 32 01 	sts	0x0132, r24
    3572:	80 91 32 01 	lds	r24, 0x0132
    3576:	88 30       	cpi	r24, 0x08	; 8
    3578:	08 f4       	brcc	.+2      	; 0x357c <__vector_7+0x40>
    357a:	e8 c2       	rjmp	.+1488   	; 0x3b4c <__vector_7+0x610>
	{
		pulse_timer = 0;
    357c:	10 92 32 01 	sts	0x0132, r1
		
		l_motor.error = l_motor.ref_pulses - p_l;
    3580:	80 91 88 01 	lds	r24, 0x0188
    3584:	28 2f       	mov	r18, r24
    3586:	33 27       	eor	r19, r19
    3588:	27 fd       	sbrc	r18, 7
    358a:	30 95       	com	r19
    358c:	80 91 b6 01 	lds	r24, 0x01B6
    3590:	90 91 b7 01 	lds	r25, 0x01B7
    3594:	a9 01       	movw	r20, r18
    3596:	48 1b       	sub	r20, r24
    3598:	59 0b       	sbc	r21, r25
    359a:	ca 01       	movw	r24, r20
    359c:	90 93 90 01 	sts	0x0190, r25
    35a0:	80 93 8f 01 	sts	0x018F, r24
		r_motor.error = r_motor.ref_pulses - p_r;
    35a4:	80 91 99 01 	lds	r24, 0x0199
    35a8:	28 2f       	mov	r18, r24
    35aa:	33 27       	eor	r19, r19
    35ac:	27 fd       	sbrc	r18, 7
    35ae:	30 95       	com	r19
    35b0:	80 91 b8 01 	lds	r24, 0x01B8
    35b4:	90 91 b9 01 	lds	r25, 0x01B9
    35b8:	f9 01       	movw	r30, r18
    35ba:	e8 1b       	sub	r30, r24
    35bc:	f9 0b       	sbc	r31, r25
    35be:	cf 01       	movw	r24, r30
    35c0:	90 93 a1 01 	sts	0x01A1, r25
    35c4:	80 93 a0 01 	sts	0x01A0, r24
		l_motor.pulse_count+=p_l;
    35c8:	20 91 89 01 	lds	r18, 0x0189
    35cc:	30 91 8a 01 	lds	r19, 0x018A
    35d0:	80 91 b6 01 	lds	r24, 0x01B6
    35d4:	90 91 b7 01 	lds	r25, 0x01B7
    35d8:	82 0f       	add	r24, r18
    35da:	93 1f       	adc	r25, r19
    35dc:	90 93 8a 01 	sts	0x018A, r25
    35e0:	80 93 89 01 	sts	0x0189, r24
		r_motor.pulse_count+=p_r;
    35e4:	20 91 9a 01 	lds	r18, 0x019A
    35e8:	30 91 9b 01 	lds	r19, 0x019B
    35ec:	80 91 b8 01 	lds	r24, 0x01B8
    35f0:	90 91 b9 01 	lds	r25, 0x01B9
    35f4:	82 0f       	add	r24, r18
    35f6:	93 1f       	adc	r25, r19
    35f8:	90 93 9b 01 	sts	0x019B, r25
    35fc:	80 93 9a 01 	sts	0x019A, r24
		p_r = 0;
    3600:	10 92 b9 01 	sts	0x01B9, r1
    3604:	10 92 b8 01 	sts	0x01B8, r1
		p_l = 0;
    3608:	10 92 b7 01 	sts	0x01B7, r1
    360c:	10 92 b6 01 	sts	0x01B6, r1
		
		if(l_motor.ref_pulses!=0)
    3610:	80 91 88 01 	lds	r24, 0x0188
    3614:	88 23       	and	r24, r24
    3616:	09 f4       	brne	.+2      	; 0x361a <__vector_7+0xde>
    3618:	bd c0       	rjmp	.+378    	; 0x3794 <__vector_7+0x258>
		{
			l_motor.do_once = true;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	80 93 8e 01 	sts	0x018E, r24
			if (l_motor.r_dir == FORWARD)
    3620:	80 91 93 01 	lds	r24, 0x0193
    3624:	81 30       	cpi	r24, 0x01	; 1
    3626:	b1 f4       	brne	.+44     	; 0x3654 <__vector_7+0x118>
			{
				set_lf();
    3628:	82 e3       	ldi	r24, 0x32	; 50
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	22 e3       	ldi	r18, 0x32	; 50
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	f9 01       	movw	r30, r18
    3632:	20 81       	ld	r18, Z
    3634:	20 61       	ori	r18, 0x10	; 16
    3636:	fc 01       	movw	r30, r24
    3638:	20 83       	st	Z, r18
    363a:	85 e3       	ldi	r24, 0x35	; 53
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	25 e3       	ldi	r18, 0x35	; 53
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	f9 01       	movw	r30, r18
    3644:	20 81       	ld	r18, Z
    3646:	2e 7f       	andi	r18, 0xFE	; 254
    3648:	fc 01       	movw	r30, r24
    364a:	20 83       	st	Z, r18
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	80 93 94 01 	sts	0x0194, r24
    3652:	15 c0       	rjmp	.+42     	; 0x367e <__vector_7+0x142>
			}
			else
			{
				set_lb();
    3654:	85 e3       	ldi	r24, 0x35	; 53
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	25 e3       	ldi	r18, 0x35	; 53
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	f9 01       	movw	r30, r18
    365e:	20 81       	ld	r18, Z
    3660:	21 60       	ori	r18, 0x01	; 1
    3662:	fc 01       	movw	r30, r24
    3664:	20 83       	st	Z, r18
    3666:	82 e3       	ldi	r24, 0x32	; 50
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	22 e3       	ldi	r18, 0x32	; 50
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	f9 01       	movw	r30, r18
    3670:	20 81       	ld	r18, Z
    3672:	2f 7e       	andi	r18, 0xEF	; 239
    3674:	fc 01       	movw	r30, r24
    3676:	20 83       	st	Z, r18
    3678:	8f ef       	ldi	r24, 0xFF	; 255
    367a:	80 93 94 01 	sts	0x0194, r24
			}
			l_m+=aplie_Kp(l_motor.error)+aplie_Kd(l_motor.error-l_error);
    367e:	40 91 8f 01 	lds	r20, 0x018F
    3682:	50 91 90 01 	lds	r21, 0x0190
    3686:	80 91 74 00 	lds	r24, 0x0074
    368a:	88 2f       	mov	r24, r24
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	48 9f       	mul	r20, r24
    3690:	90 01       	movw	r18, r0
    3692:	49 9f       	mul	r20, r25
    3694:	30 0d       	add	r19, r0
    3696:	58 9f       	mul	r21, r24
    3698:	30 0d       	add	r19, r0
    369a:	11 24       	eor	r1, r1
    369c:	40 91 8f 01 	lds	r20, 0x018F
    36a0:	50 91 90 01 	lds	r21, 0x0190
    36a4:	80 91 33 01 	lds	r24, 0x0133
    36a8:	90 91 34 01 	lds	r25, 0x0134
    36ac:	ba 01       	movw	r22, r20
    36ae:	68 1b       	sub	r22, r24
    36b0:	79 0b       	sbc	r23, r25
    36b2:	80 91 75 00 	lds	r24, 0x0075
    36b6:	48 2f       	mov	r20, r24
    36b8:	50 e0       	ldi	r21, 0x00	; 0
    36ba:	64 9f       	mul	r22, r20
    36bc:	c0 01       	movw	r24, r0
    36be:	65 9f       	mul	r22, r21
    36c0:	90 0d       	add	r25, r0
    36c2:	74 9f       	mul	r23, r20
    36c4:	90 0d       	add	r25, r0
    36c6:	11 24       	eor	r1, r1
    36c8:	99 23       	and	r25, r25
    36ca:	0c f4       	brge	.+2      	; 0x36ce <__vector_7+0x192>
    36cc:	cf 96       	adiw	r24, 0x3f	; 63
    36ce:	08 2e       	mov	r0, r24
    36d0:	89 2f       	mov	r24, r25
    36d2:	00 0c       	add	r0, r0
    36d4:	88 1f       	adc	r24, r24
    36d6:	99 0b       	sbc	r25, r25
    36d8:	00 0c       	add	r0, r0
    36da:	88 1f       	adc	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	28 0f       	add	r18, r24
    36e0:	39 1f       	adc	r19, r25
    36e2:	80 91 35 01 	lds	r24, 0x0135
    36e6:	90 91 36 01 	lds	r25, 0x0136
    36ea:	82 0f       	add	r24, r18
    36ec:	93 1f       	adc	r25, r19
    36ee:	90 93 36 01 	sts	0x0136, r25
    36f2:	80 93 35 01 	sts	0x0135, r24
			if (l_m>255)
    36f6:	80 91 35 01 	lds	r24, 0x0135
    36fa:	90 91 36 01 	lds	r25, 0x0136
    36fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3700:	91 05       	cpc	r25, r1
    3702:	41 f0       	breq	.+16     	; 0x3714 <__vector_7+0x1d8>
    3704:	3c f0       	brlt	.+14     	; 0x3714 <__vector_7+0x1d8>
			{
				l_m=255;
    3706:	8f ef       	ldi	r24, 0xFF	; 255
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	90 93 36 01 	sts	0x0136, r25
    370e:	80 93 35 01 	sts	0x0135, r24
    3712:	0b c0       	rjmp	.+22     	; 0x372a <__vector_7+0x1ee>
			}
			else if (l_m<1)
    3714:	80 91 35 01 	lds	r24, 0x0135
    3718:	90 91 36 01 	lds	r25, 0x0136
    371c:	18 16       	cp	r1, r24
    371e:	19 06       	cpc	r1, r25
    3720:	24 f0       	brlt	.+8      	; 0x372a <__vector_7+0x1ee>
			{
				l_m=0;
    3722:	10 92 36 01 	sts	0x0136, r1
    3726:	10 92 35 01 	sts	0x0135, r1
			}
			set_left_m(l_m);
    372a:	80 91 35 01 	lds	r24, 0x0135
    372e:	90 91 36 01 	lds	r25, 0x0136
    3732:	8f 3f       	cpi	r24, 0xFF	; 255
    3734:	91 05       	cpc	r25, r1
    3736:	39 f0       	breq	.+14     	; 0x3746 <__vector_7+0x20a>
    3738:	34 f0       	brlt	.+12     	; 0x3746 <__vector_7+0x20a>
    373a:	8c e5       	ldi	r24, 0x5C	; 92
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	2f ef       	ldi	r18, 0xFF	; 255
    3740:	fc 01       	movw	r30, r24
    3742:	20 83       	st	Z, r18
    3744:	08 c0       	rjmp	.+16     	; 0x3756 <__vector_7+0x21a>
    3746:	8c e5       	ldi	r24, 0x5C	; 92
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	20 91 35 01 	lds	r18, 0x0135
    374e:	30 91 36 01 	lds	r19, 0x0136
    3752:	fc 01       	movw	r30, r24
    3754:	20 83       	st	Z, r18
 			if (l_motor.error<0)
    3756:	80 91 8f 01 	lds	r24, 0x018F
    375a:	90 91 90 01 	lds	r25, 0x0190
    375e:	99 23       	and	r25, r25
    3760:	0c f0       	brlt	.+2      	; 0x3764 <__vector_7+0x228>
    3762:	9d c0       	rjmp	.+314    	; 0x389e <__vector_7+0x362>
 			{
 				set_ld();
    3764:	85 e3       	ldi	r24, 0x35	; 53
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	25 e3       	ldi	r18, 0x35	; 53
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	f9 01       	movw	r30, r18
    376e:	20 81       	ld	r18, Z
    3770:	21 60       	ori	r18, 0x01	; 1
    3772:	fc 01       	movw	r30, r24
    3774:	20 83       	st	Z, r18
    3776:	82 e3       	ldi	r24, 0x32	; 50
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	22 e3       	ldi	r18, 0x32	; 50
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	f9 01       	movw	r30, r18
    3780:	20 81       	ld	r18, Z
    3782:	20 61       	ori	r18, 0x10	; 16
    3784:	fc 01       	movw	r30, r24
    3786:	20 83       	st	Z, r18
    3788:	8c e5       	ldi	r24, 0x5C	; 92
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	2f ef       	ldi	r18, 0xFF	; 255
    378e:	fc 01       	movw	r30, r24
    3790:	20 83       	st	Z, r18
    3792:	85 c0       	rjmp	.+266    	; 0x389e <__vector_7+0x362>
 			}
		}
		else
		{
			if (l_motor.do_once&&l_motor.error!=0)
    3794:	80 91 8e 01 	lds	r24, 0x018E
    3798:	88 23       	and	r24, r24
    379a:	b9 f0       	breq	.+46     	; 0x37ca <__vector_7+0x28e>
    379c:	80 91 8f 01 	lds	r24, 0x018F
    37a0:	90 91 90 01 	lds	r25, 0x0190
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	89 f0       	breq	.+34     	; 0x37ca <__vector_7+0x28e>
			{
				l_motor.do_once = false;
    37a8:	10 92 8e 01 	sts	0x018E, r1
				l_motor.breaking = ON;
    37ac:	10 92 91 01 	sts	0x0191, r1
				if (l_motor.finished_corner == true)
    37b0:	80 91 8d 01 	lds	r24, 0x018D
    37b4:	88 23       	and	r24, r24
    37b6:	31 f0       	breq	.+12     	; 0x37c4 <__vector_7+0x288>
				{
					l_motor.finished_corner =false;
    37b8:	10 92 8d 01 	sts	0x018D, r1
					l_motor.break_count = BREAK_COUNT_C;
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	80 93 92 01 	sts	0x0192, r24
    37c2:	03 c0       	rjmp	.+6      	; 0x37ca <__vector_7+0x28e>
				}
				else
				{
					l_motor.break_count = BREAK_COUNT;
    37c4:	84 e1       	ldi	r24, 0x14	; 20
    37c6:	80 93 92 01 	sts	0x0192, r24
				}
			}
			if (l_motor.breaking == ON)
    37ca:	80 91 91 01 	lds	r24, 0x0191
    37ce:	88 23       	and	r24, r24
    37d0:	09 f0       	breq	.+2      	; 0x37d4 <__vector_7+0x298>
    37d2:	3f c0       	rjmp	.+126    	; 0x3852 <__vector_7+0x316>
			{
				if (l_motor.r_dir==FORWARD)
    37d4:	80 91 93 01 	lds	r24, 0x0193
    37d8:	81 30       	cpi	r24, 0x01	; 1
    37da:	b1 f4       	brne	.+44     	; 0x3808 <__vector_7+0x2cc>
				{
					set_lb();
    37dc:	85 e3       	ldi	r24, 0x35	; 53
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	25 e3       	ldi	r18, 0x35	; 53
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	f9 01       	movw	r30, r18
    37e6:	20 81       	ld	r18, Z
    37e8:	21 60       	ori	r18, 0x01	; 1
    37ea:	fc 01       	movw	r30, r24
    37ec:	20 83       	st	Z, r18
    37ee:	82 e3       	ldi	r24, 0x32	; 50
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	22 e3       	ldi	r18, 0x32	; 50
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	f9 01       	movw	r30, r18
    37f8:	20 81       	ld	r18, Z
    37fa:	2f 7e       	andi	r18, 0xEF	; 239
    37fc:	fc 01       	movw	r30, r24
    37fe:	20 83       	st	Z, r18
    3800:	8f ef       	ldi	r24, 0xFF	; 255
    3802:	80 93 94 01 	sts	0x0194, r24
    3806:	15 c0       	rjmp	.+42     	; 0x3832 <__vector_7+0x2f6>
				}
				else
				{
					set_lf();
    3808:	82 e3       	ldi	r24, 0x32	; 50
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	22 e3       	ldi	r18, 0x32	; 50
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	f9 01       	movw	r30, r18
    3812:	20 81       	ld	r18, Z
    3814:	20 61       	ori	r18, 0x10	; 16
    3816:	fc 01       	movw	r30, r24
    3818:	20 83       	st	Z, r18
    381a:	85 e3       	ldi	r24, 0x35	; 53
    381c:	90 e0       	ldi	r25, 0x00	; 0
    381e:	25 e3       	ldi	r18, 0x35	; 53
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	f9 01       	movw	r30, r18
    3824:	20 81       	ld	r18, Z
    3826:	2e 7f       	andi	r18, 0xFE	; 254
    3828:	fc 01       	movw	r30, r24
    382a:	20 83       	st	Z, r18
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	80 93 94 01 	sts	0x0194, r24
				}
				set_left_m(BREAK_FORCE);
    3832:	8c e5       	ldi	r24, 0x5C	; 92
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	2f ef       	ldi	r18, 0xFF	; 255
    3838:	fc 01       	movw	r30, r24
    383a:	20 83       	st	Z, r18
				if (--l_motor.break_count<1)
    383c:	80 91 92 01 	lds	r24, 0x0192
    3840:	81 50       	subi	r24, 0x01	; 1
    3842:	80 93 92 01 	sts	0x0192, r24
    3846:	88 23       	and	r24, r24
    3848:	51 f5       	brne	.+84     	; 0x389e <__vector_7+0x362>
				{
					l_motor.breaking = OFF;
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	80 93 91 01 	sts	0x0191, r24
    3850:	26 c0       	rjmp	.+76     	; 0x389e <__vector_7+0x362>
				}
			}
			else
			{
				set_ls();
    3852:	85 e3       	ldi	r24, 0x35	; 53
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	25 e3       	ldi	r18, 0x35	; 53
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	f9 01       	movw	r30, r18
    385c:	20 81       	ld	r18, Z
    385e:	21 60       	ori	r18, 0x01	; 1
    3860:	fc 01       	movw	r30, r24
    3862:	20 83       	st	Z, r18
    3864:	82 e3       	ldi	r24, 0x32	; 50
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	22 e3       	ldi	r18, 0x32	; 50
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	f9 01       	movw	r30, r18
    386e:	20 81       	ld	r18, Z
    3870:	20 61       	ori	r18, 0x10	; 16
    3872:	fc 01       	movw	r30, r24
    3874:	20 83       	st	Z, r18
    3876:	8c e5       	ldi	r24, 0x5C	; 92
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	fc 01       	movw	r30, r24
    387c:	10 82       	st	Z, r1
				if (l_motor.error!=0)
    387e:	80 91 8f 01 	lds	r24, 0x018F
    3882:	90 91 90 01 	lds	r25, 0x0190
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	31 f0       	breq	.+12     	; 0x3896 <__vector_7+0x35a>
				{
					set_left_m(255);
    388a:	8c e5       	ldi	r24, 0x5C	; 92
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	2f ef       	ldi	r18, 0xFF	; 255
    3890:	fc 01       	movw	r30, r24
    3892:	20 83       	st	Z, r18
    3894:	04 c0       	rjmp	.+8      	; 0x389e <__vector_7+0x362>
				}
				else
				{
					set_left_m(0);
    3896:	8c e5       	ldi	r24, 0x5C	; 92
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	fc 01       	movw	r30, r24
    389c:	10 82       	st	Z, r1
				}
			}
		}
		
		if(r_motor.ref_pulses!=0)
    389e:	80 91 99 01 	lds	r24, 0x0199
    38a2:	88 23       	and	r24, r24
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <__vector_7+0x36c>
    38a6:	bd c0       	rjmp	.+378    	; 0x3a22 <__vector_7+0x4e6>
		{
			r_motor.do_once = true;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	80 93 9f 01 	sts	0x019F, r24
			if (r_motor.r_dir == FORWARD)
    38ae:	80 91 a4 01 	lds	r24, 0x01A4
    38b2:	81 30       	cpi	r24, 0x01	; 1
    38b4:	b1 f4       	brne	.+44     	; 0x38e2 <__vector_7+0x3a6>
			{
				set_rf();
    38b6:	82 e3       	ldi	r24, 0x32	; 50
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	22 e3       	ldi	r18, 0x32	; 50
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	f9 01       	movw	r30, r18
    38c0:	20 81       	ld	r18, Z
    38c2:	20 62       	ori	r18, 0x20	; 32
    38c4:	fc 01       	movw	r30, r24
    38c6:	20 83       	st	Z, r18
    38c8:	82 e3       	ldi	r24, 0x32	; 50
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	22 e3       	ldi	r18, 0x32	; 50
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	f9 01       	movw	r30, r18
    38d2:	20 81       	ld	r18, Z
    38d4:	2f 7b       	andi	r18, 0xBF	; 191
    38d6:	fc 01       	movw	r30, r24
    38d8:	20 83       	st	Z, r18
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	80 93 a5 01 	sts	0x01A5, r24
    38e0:	15 c0       	rjmp	.+42     	; 0x390c <__vector_7+0x3d0>
			}
			else
			{
				set_rb();
    38e2:	82 e3       	ldi	r24, 0x32	; 50
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	22 e3       	ldi	r18, 0x32	; 50
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	f9 01       	movw	r30, r18
    38ec:	20 81       	ld	r18, Z
    38ee:	20 64       	ori	r18, 0x40	; 64
    38f0:	fc 01       	movw	r30, r24
    38f2:	20 83       	st	Z, r18
    38f4:	82 e3       	ldi	r24, 0x32	; 50
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	22 e3       	ldi	r18, 0x32	; 50
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	f9 01       	movw	r30, r18
    38fe:	20 81       	ld	r18, Z
    3900:	2f 7d       	andi	r18, 0xDF	; 223
    3902:	fc 01       	movw	r30, r24
    3904:	20 83       	st	Z, r18
    3906:	8f ef       	ldi	r24, 0xFF	; 255
    3908:	80 93 a5 01 	sts	0x01A5, r24
			}
			r_m+=aplie_Kp(r_motor.error)+aplie_Kd(r_motor.error-r_error);
    390c:	40 91 a0 01 	lds	r20, 0x01A0
    3910:	50 91 a1 01 	lds	r21, 0x01A1
    3914:	80 91 74 00 	lds	r24, 0x0074
    3918:	88 2f       	mov	r24, r24
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	48 9f       	mul	r20, r24
    391e:	90 01       	movw	r18, r0
    3920:	49 9f       	mul	r20, r25
    3922:	30 0d       	add	r19, r0
    3924:	58 9f       	mul	r21, r24
    3926:	30 0d       	add	r19, r0
    3928:	11 24       	eor	r1, r1
    392a:	40 91 a0 01 	lds	r20, 0x01A0
    392e:	50 91 a1 01 	lds	r21, 0x01A1
    3932:	80 91 37 01 	lds	r24, 0x0137
    3936:	90 91 38 01 	lds	r25, 0x0138
    393a:	ba 01       	movw	r22, r20
    393c:	68 1b       	sub	r22, r24
    393e:	79 0b       	sbc	r23, r25
    3940:	80 91 75 00 	lds	r24, 0x0075
    3944:	48 2f       	mov	r20, r24
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	64 9f       	mul	r22, r20
    394a:	c0 01       	movw	r24, r0
    394c:	65 9f       	mul	r22, r21
    394e:	90 0d       	add	r25, r0
    3950:	74 9f       	mul	r23, r20
    3952:	90 0d       	add	r25, r0
    3954:	11 24       	eor	r1, r1
    3956:	99 23       	and	r25, r25
    3958:	0c f4       	brge	.+2      	; 0x395c <__vector_7+0x420>
    395a:	cf 96       	adiw	r24, 0x3f	; 63
    395c:	08 2e       	mov	r0, r24
    395e:	89 2f       	mov	r24, r25
    3960:	00 0c       	add	r0, r0
    3962:	88 1f       	adc	r24, r24
    3964:	99 0b       	sbc	r25, r25
    3966:	00 0c       	add	r0, r0
    3968:	88 1f       	adc	r24, r24
    396a:	99 1f       	adc	r25, r25
    396c:	28 0f       	add	r18, r24
    396e:	39 1f       	adc	r19, r25
    3970:	80 91 39 01 	lds	r24, 0x0139
    3974:	90 91 3a 01 	lds	r25, 0x013A
    3978:	82 0f       	add	r24, r18
    397a:	93 1f       	adc	r25, r19
    397c:	90 93 3a 01 	sts	0x013A, r25
    3980:	80 93 39 01 	sts	0x0139, r24
			if (r_m>255)
    3984:	80 91 39 01 	lds	r24, 0x0139
    3988:	90 91 3a 01 	lds	r25, 0x013A
    398c:	8f 3f       	cpi	r24, 0xFF	; 255
    398e:	91 05       	cpc	r25, r1
    3990:	41 f0       	breq	.+16     	; 0x39a2 <__vector_7+0x466>
    3992:	3c f0       	brlt	.+14     	; 0x39a2 <__vector_7+0x466>
			{
				r_m=255;
    3994:	8f ef       	ldi	r24, 0xFF	; 255
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	90 93 3a 01 	sts	0x013A, r25
    399c:	80 93 39 01 	sts	0x0139, r24
    39a0:	0b c0       	rjmp	.+22     	; 0x39b8 <__vector_7+0x47c>
			}
			else if (r_m<1)
    39a2:	80 91 39 01 	lds	r24, 0x0139
    39a6:	90 91 3a 01 	lds	r25, 0x013A
    39aa:	18 16       	cp	r1, r24
    39ac:	19 06       	cpc	r1, r25
    39ae:	24 f0       	brlt	.+8      	; 0x39b8 <__vector_7+0x47c>
			{
				r_m=0;
    39b0:	10 92 3a 01 	sts	0x013A, r1
    39b4:	10 92 39 01 	sts	0x0139, r1
			}
			set_right_m(r_m);
    39b8:	80 91 39 01 	lds	r24, 0x0139
    39bc:	90 91 3a 01 	lds	r25, 0x013A
    39c0:	8f 3f       	cpi	r24, 0xFF	; 255
    39c2:	91 05       	cpc	r25, r1
    39c4:	39 f0       	breq	.+14     	; 0x39d4 <__vector_7+0x498>
    39c6:	34 f0       	brlt	.+12     	; 0x39d4 <__vector_7+0x498>
    39c8:	83 e4       	ldi	r24, 0x43	; 67
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	2f ef       	ldi	r18, 0xFF	; 255
    39ce:	fc 01       	movw	r30, r24
    39d0:	20 83       	st	Z, r18
    39d2:	08 c0       	rjmp	.+16     	; 0x39e4 <__vector_7+0x4a8>
    39d4:	83 e4       	ldi	r24, 0x43	; 67
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	20 91 39 01 	lds	r18, 0x0139
    39dc:	30 91 3a 01 	lds	r19, 0x013A
    39e0:	fc 01       	movw	r30, r24
    39e2:	20 83       	st	Z, r18
 			if (r_motor.error<0)
    39e4:	80 91 a0 01 	lds	r24, 0x01A0
    39e8:	90 91 a1 01 	lds	r25, 0x01A1
    39ec:	99 23       	and	r25, r25
    39ee:	0c f0       	brlt	.+2      	; 0x39f2 <__vector_7+0x4b6>
    39f0:	9d c0       	rjmp	.+314    	; 0x3b2c <__vector_7+0x5f0>
 			{
 				set_rd();
    39f2:	82 e3       	ldi	r24, 0x32	; 50
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	22 e3       	ldi	r18, 0x32	; 50
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	f9 01       	movw	r30, r18
    39fc:	20 81       	ld	r18, Z
    39fe:	20 62       	ori	r18, 0x20	; 32
    3a00:	fc 01       	movw	r30, r24
    3a02:	20 83       	st	Z, r18
    3a04:	82 e3       	ldi	r24, 0x32	; 50
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	22 e3       	ldi	r18, 0x32	; 50
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	f9 01       	movw	r30, r18
    3a0e:	20 81       	ld	r18, Z
    3a10:	20 64       	ori	r18, 0x40	; 64
    3a12:	fc 01       	movw	r30, r24
    3a14:	20 83       	st	Z, r18
    3a16:	83 e4       	ldi	r24, 0x43	; 67
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	2f ef       	ldi	r18, 0xFF	; 255
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	20 83       	st	Z, r18
    3a20:	85 c0       	rjmp	.+266    	; 0x3b2c <__vector_7+0x5f0>
 			}
		}
		else
		{
			if (r_motor.do_once&&r_motor.error!=0)
    3a22:	80 91 9f 01 	lds	r24, 0x019F
    3a26:	88 23       	and	r24, r24
    3a28:	b9 f0       	breq	.+46     	; 0x3a58 <__vector_7+0x51c>
    3a2a:	80 91 a0 01 	lds	r24, 0x01A0
    3a2e:	90 91 a1 01 	lds	r25, 0x01A1
    3a32:	00 97       	sbiw	r24, 0x00	; 0
    3a34:	89 f0       	breq	.+34     	; 0x3a58 <__vector_7+0x51c>
			{
				r_motor.do_once = false;
    3a36:	10 92 9f 01 	sts	0x019F, r1
				r_motor.breaking = ON;
    3a3a:	10 92 a2 01 	sts	0x01A2, r1
				if (r_motor.finished_corner == true)
    3a3e:	80 91 9e 01 	lds	r24, 0x019E
    3a42:	88 23       	and	r24, r24
    3a44:	31 f0       	breq	.+12     	; 0x3a52 <__vector_7+0x516>
				{
					r_motor.finished_corner =false;
    3a46:	10 92 9e 01 	sts	0x019E, r1
					r_motor.break_count = BREAK_COUNT_C;
    3a4a:	82 e0       	ldi	r24, 0x02	; 2
    3a4c:	80 93 a3 01 	sts	0x01A3, r24
    3a50:	03 c0       	rjmp	.+6      	; 0x3a58 <__vector_7+0x51c>
				}
				else
				{
					r_motor.break_count = BREAK_COUNT;
    3a52:	84 e1       	ldi	r24, 0x14	; 20
    3a54:	80 93 a3 01 	sts	0x01A3, r24
				}
			}
			if (r_motor.breaking == ON)
    3a58:	80 91 a2 01 	lds	r24, 0x01A2
    3a5c:	88 23       	and	r24, r24
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <__vector_7+0x526>
    3a60:	3f c0       	rjmp	.+126    	; 0x3ae0 <__vector_7+0x5a4>
			{
				if (r_motor.r_dir==FORWARD)
    3a62:	80 91 a4 01 	lds	r24, 0x01A4
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	b1 f4       	brne	.+44     	; 0x3a96 <__vector_7+0x55a>
				{
					set_rb();
    3a6a:	82 e3       	ldi	r24, 0x32	; 50
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	22 e3       	ldi	r18, 0x32	; 50
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	f9 01       	movw	r30, r18
    3a74:	20 81       	ld	r18, Z
    3a76:	20 64       	ori	r18, 0x40	; 64
    3a78:	fc 01       	movw	r30, r24
    3a7a:	20 83       	st	Z, r18
    3a7c:	82 e3       	ldi	r24, 0x32	; 50
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	22 e3       	ldi	r18, 0x32	; 50
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	f9 01       	movw	r30, r18
    3a86:	20 81       	ld	r18, Z
    3a88:	2f 7d       	andi	r18, 0xDF	; 223
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	20 83       	st	Z, r18
    3a8e:	8f ef       	ldi	r24, 0xFF	; 255
    3a90:	80 93 a5 01 	sts	0x01A5, r24
    3a94:	15 c0       	rjmp	.+42     	; 0x3ac0 <__vector_7+0x584>
				}
				else
				{
					set_rf();
    3a96:	82 e3       	ldi	r24, 0x32	; 50
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	22 e3       	ldi	r18, 0x32	; 50
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	f9 01       	movw	r30, r18
    3aa0:	20 81       	ld	r18, Z
    3aa2:	20 62       	ori	r18, 0x20	; 32
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	20 83       	st	Z, r18
    3aa8:	82 e3       	ldi	r24, 0x32	; 50
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	22 e3       	ldi	r18, 0x32	; 50
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	f9 01       	movw	r30, r18
    3ab2:	20 81       	ld	r18, Z
    3ab4:	2f 7b       	andi	r18, 0xBF	; 191
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	20 83       	st	Z, r18
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	80 93 a5 01 	sts	0x01A5, r24
				}
				set_right_m(BREAK_FORCE);
    3ac0:	83 e4       	ldi	r24, 0x43	; 67
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	2f ef       	ldi	r18, 0xFF	; 255
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	20 83       	st	Z, r18
				if (--r_motor.break_count<1)
    3aca:	80 91 a3 01 	lds	r24, 0x01A3
    3ace:	81 50       	subi	r24, 0x01	; 1
    3ad0:	80 93 a3 01 	sts	0x01A3, r24
    3ad4:	88 23       	and	r24, r24
    3ad6:	51 f5       	brne	.+84     	; 0x3b2c <__vector_7+0x5f0>
				{
					r_motor.breaking = OFF;
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	80 93 a2 01 	sts	0x01A2, r24
    3ade:	26 c0       	rjmp	.+76     	; 0x3b2c <__vector_7+0x5f0>
				}
			}
			else
			{
				set_rs();
    3ae0:	82 e3       	ldi	r24, 0x32	; 50
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	22 e3       	ldi	r18, 0x32	; 50
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	f9 01       	movw	r30, r18
    3aea:	20 81       	ld	r18, Z
    3aec:	20 62       	ori	r18, 0x20	; 32
    3aee:	fc 01       	movw	r30, r24
    3af0:	20 83       	st	Z, r18
    3af2:	82 e3       	ldi	r24, 0x32	; 50
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	22 e3       	ldi	r18, 0x32	; 50
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	f9 01       	movw	r30, r18
    3afc:	20 81       	ld	r18, Z
    3afe:	20 64       	ori	r18, 0x40	; 64
    3b00:	fc 01       	movw	r30, r24
    3b02:	20 83       	st	Z, r18
    3b04:	83 e4       	ldi	r24, 0x43	; 67
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	fc 01       	movw	r30, r24
    3b0a:	10 82       	st	Z, r1
				if (r_motor.error!=0)
    3b0c:	80 91 a0 01 	lds	r24, 0x01A0
    3b10:	90 91 a1 01 	lds	r25, 0x01A1
    3b14:	00 97       	sbiw	r24, 0x00	; 0
    3b16:	31 f0       	breq	.+12     	; 0x3b24 <__vector_7+0x5e8>
				{
					set_right_m(255);
    3b18:	83 e4       	ldi	r24, 0x43	; 67
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	2f ef       	ldi	r18, 0xFF	; 255
    3b1e:	fc 01       	movw	r30, r24
    3b20:	20 83       	st	Z, r18
    3b22:	04 c0       	rjmp	.+8      	; 0x3b2c <__vector_7+0x5f0>
				}
				else
				{
					set_right_m(0);
    3b24:	83 e4       	ldi	r24, 0x43	; 67
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	fc 01       	movw	r30, r24
    3b2a:	10 82       	st	Z, r1
				}
			}
		}
		l_error = l_motor.error;
    3b2c:	80 91 8f 01 	lds	r24, 0x018F
    3b30:	90 91 90 01 	lds	r25, 0x0190
    3b34:	90 93 34 01 	sts	0x0134, r25
    3b38:	80 93 33 01 	sts	0x0133, r24
		r_error = r_motor.error;
    3b3c:	80 91 a0 01 	lds	r24, 0x01A0
    3b40:	90 91 a1 01 	lds	r25, 0x01A1
    3b44:	90 93 38 01 	sts	0x0138, r25
    3b48:	80 93 37 01 	sts	0x0137, r24
	}
	
	if (++sys_timer>9)
    3b4c:	80 91 3b 01 	lds	r24, 0x013B
    3b50:	8f 5f       	subi	r24, 0xFF	; 255
    3b52:	80 93 3b 01 	sts	0x013B, r24
    3b56:	80 91 3b 01 	lds	r24, 0x013B
    3b5a:	8a 30       	cpi	r24, 0x0A	; 10
    3b5c:	70 f0       	brcs	.+28     	; 0x3b7a <__vector_7+0x63e>
	{
		sys_timer = 0;
    3b5e:	10 92 3b 01 	sts	0x013B, r1
		system_tic = true;
    3b62:	81 e0       	ldi	r24, 0x01	; 1
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	a0 e0       	ldi	r26, 0x00	; 0
    3b68:	b0 e0       	ldi	r27, 0x00	; 0
    3b6a:	80 93 ba 01 	sts	0x01BA, r24
    3b6e:	90 93 bb 01 	sts	0x01BB, r25
    3b72:	a0 93 bc 01 	sts	0x01BC, r26
    3b76:	b0 93 bd 01 	sts	0x01BD, r27
	}
	milliseconds++;
    3b7a:	80 91 c6 03 	lds	r24, 0x03C6
    3b7e:	90 91 c7 03 	lds	r25, 0x03C7
    3b82:	a0 91 c8 03 	lds	r26, 0x03C8
    3b86:	b0 91 c9 03 	lds	r27, 0x03C9
    3b8a:	01 96       	adiw	r24, 0x01	; 1
    3b8c:	a1 1d       	adc	r26, r1
    3b8e:	b1 1d       	adc	r27, r1
    3b90:	80 93 c6 03 	sts	0x03C6, r24
    3b94:	90 93 c7 03 	sts	0x03C7, r25
    3b98:	a0 93 c8 03 	sts	0x03C8, r26
    3b9c:	b0 93 c9 03 	sts	0x03C9, r27
}
    3ba0:	df 91       	pop	r29
    3ba2:	cf 91       	pop	r28
    3ba4:	ff 91       	pop	r31
    3ba6:	ef 91       	pop	r30
    3ba8:	bf 91       	pop	r27
    3baa:	af 91       	pop	r26
    3bac:	9f 91       	pop	r25
    3bae:	8f 91       	pop	r24
    3bb0:	7f 91       	pop	r23
    3bb2:	6f 91       	pop	r22
    3bb4:	5f 91       	pop	r21
    3bb6:	4f 91       	pop	r20
    3bb8:	3f 91       	pop	r19
    3bba:	2f 91       	pop	r18
    3bbc:	0f 90       	pop	r0
    3bbe:	00 92 5f 00 	sts	0x005F, r0
    3bc2:	0f 90       	pop	r0
    3bc4:	1f 90       	pop	r1
    3bc6:	18 95       	reti

00003bc8 <__vector_1>:
*
* \param Vector for the  interrupt.
*
* \return
*/
ISR(INT0_vect){
    3bc8:	1f 92       	push	r1
    3bca:	0f 92       	push	r0
    3bcc:	00 90 5f 00 	lds	r0, 0x005F
    3bd0:	0f 92       	push	r0
    3bd2:	11 24       	eor	r1, r1
    3bd4:	2f 93       	push	r18
    3bd6:	3f 93       	push	r19
    3bd8:	8f 93       	push	r24
    3bda:	9f 93       	push	r25
    3bdc:	ef 93       	push	r30
    3bde:	ff 93       	push	r31
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
	int0_toggle_edge();
    3be8:	85 e5       	ldi	r24, 0x55	; 85
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	25 e5       	ldi	r18, 0x55	; 85
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	f9 01       	movw	r30, r18
    3bf2:	30 81       	ld	r19, Z
    3bf4:	21 e0       	ldi	r18, 0x01	; 1
    3bf6:	23 27       	eor	r18, r19
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	20 83       	st	Z, r18
	p_r++;
    3bfc:	80 91 b8 01 	lds	r24, 0x01B8
    3c00:	90 91 b9 01 	lds	r25, 0x01B9
    3c04:	01 96       	adiw	r24, 0x01	; 1
    3c06:	90 93 b9 01 	sts	0x01B9, r25
    3c0a:	80 93 b8 01 	sts	0x01B8, r24
}
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	ff 91       	pop	r31
    3c14:	ef 91       	pop	r30
    3c16:	9f 91       	pop	r25
    3c18:	8f 91       	pop	r24
    3c1a:	3f 91       	pop	r19
    3c1c:	2f 91       	pop	r18
    3c1e:	0f 90       	pop	r0
    3c20:	00 92 5f 00 	sts	0x005F, r0
    3c24:	0f 90       	pop	r0
    3c26:	1f 90       	pop	r1
    3c28:	18 95       	reti

00003c2a <__vector_2>:
*
* \param Vector for the  interrupt.
*
* \return
*/
ISR(INT1_vect){
    3c2a:	1f 92       	push	r1
    3c2c:	0f 92       	push	r0
    3c2e:	00 90 5f 00 	lds	r0, 0x005F
    3c32:	0f 92       	push	r0
    3c34:	11 24       	eor	r1, r1
    3c36:	2f 93       	push	r18
    3c38:	3f 93       	push	r19
    3c3a:	8f 93       	push	r24
    3c3c:	9f 93       	push	r25
    3c3e:	ef 93       	push	r30
    3c40:	ff 93       	push	r31
    3c42:	cf 93       	push	r28
    3c44:	df 93       	push	r29
    3c46:	cd b7       	in	r28, 0x3d	; 61
    3c48:	de b7       	in	r29, 0x3e	; 62
	int1_toggle_edge();
    3c4a:	85 e5       	ldi	r24, 0x55	; 85
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	25 e5       	ldi	r18, 0x55	; 85
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	f9 01       	movw	r30, r18
    3c54:	30 81       	ld	r19, Z
    3c56:	24 e0       	ldi	r18, 0x04	; 4
    3c58:	23 27       	eor	r18, r19
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	20 83       	st	Z, r18
	p_l++;
    3c5e:	80 91 b6 01 	lds	r24, 0x01B6
    3c62:	90 91 b7 01 	lds	r25, 0x01B7
    3c66:	01 96       	adiw	r24, 0x01	; 1
    3c68:	90 93 b7 01 	sts	0x01B7, r25
    3c6c:	80 93 b6 01 	sts	0x01B6, r24
}
    3c70:	df 91       	pop	r29
    3c72:	cf 91       	pop	r28
    3c74:	ff 91       	pop	r31
    3c76:	ef 91       	pop	r30
    3c78:	9f 91       	pop	r25
    3c7a:	8f 91       	pop	r24
    3c7c:	3f 91       	pop	r19
    3c7e:	2f 91       	pop	r18
    3c80:	0f 90       	pop	r0
    3c82:	00 92 5f 00 	sts	0x005F, r0
    3c86:	0f 90       	pop	r0
    3c88:	1f 90       	pop	r1
    3c8a:	18 95       	reti

00003c8c <__vector_16>:


static u16_union adc_value;
ISR(ADC_vect) {
    3c8c:	1f 92       	push	r1
    3c8e:	0f 92       	push	r0
    3c90:	00 90 5f 00 	lds	r0, 0x005F
    3c94:	0f 92       	push	r0
    3c96:	11 24       	eor	r1, r1
    3c98:	2f 93       	push	r18
    3c9a:	3f 93       	push	r19
    3c9c:	4f 93       	push	r20
    3c9e:	6f 93       	push	r22
    3ca0:	7f 93       	push	r23
    3ca2:	8f 93       	push	r24
    3ca4:	9f 93       	push	r25
    3ca6:	af 93       	push	r26
    3ca8:	bf 93       	push	r27
    3caa:	ef 93       	push	r30
    3cac:	ff 93       	push	r31
    3cae:	cf 93       	push	r28
    3cb0:	df 93       	push	r29
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
	
	get_adc(adc_value);
    3cb6:	84 e2       	ldi	r24, 0x24	; 36
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	fc 01       	movw	r30, r24
    3cbc:	80 81       	ld	r24, Z
    3cbe:	80 93 2c 01 	sts	0x012C, r24
    3cc2:	85 e2       	ldi	r24, 0x25	; 37
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	80 81       	ld	r24, Z
    3cca:	80 93 2d 01 	sts	0x012D, r24
	if (first_channel){
    3cce:	80 91 4d 01 	lds	r24, 0x014D
    3cd2:	88 23       	and	r24, r24
    3cd4:	b9 f1       	breq	.+110    	; 0x3d44 <__vector_16+0xb8>
		result0 = (adc_value.w * VSTEP) / 100;
    3cd6:	20 91 2c 01 	lds	r18, 0x012C
    3cda:	30 91 2d 01 	lds	r19, 0x012D
    3cde:	4a ef       	ldi	r20, 0xFA	; 250
    3ce0:	42 9f       	mul	r20, r18
    3ce2:	c0 01       	movw	r24, r0
    3ce4:	43 9f       	mul	r20, r19
    3ce6:	90 0d       	add	r25, r0
    3ce8:	11 24       	eor	r1, r1
    3cea:	96 95       	lsr	r25
    3cec:	87 95       	ror	r24
    3cee:	96 95       	lsr	r25
    3cf0:	87 95       	ror	r24
    3cf2:	9c 01       	movw	r18, r24
    3cf4:	ab e7       	ldi	r26, 0x7B	; 123
    3cf6:	b4 e1       	ldi	r27, 0x14	; 20
    3cf8:	0e 94 67 23 	call	0x46ce	; 0x46ce <__umulhisi3>
    3cfc:	96 95       	lsr	r25
    3cfe:	87 95       	ror	r24
    3d00:	90 93 51 01 	sts	0x0151, r25
    3d04:	80 93 50 01 	sts	0x0150, r24
		ADMUX&= 0xf8;
    3d08:	87 e2       	ldi	r24, 0x27	; 39
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	27 e2       	ldi	r18, 0x27	; 39
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	f9 01       	movw	r30, r18
    3d12:	20 81       	ld	r18, Z
    3d14:	28 7f       	andi	r18, 0xF8	; 248
    3d16:	fc 01       	movw	r30, r24
    3d18:	20 83       	st	Z, r18
		ADMUX|= 0x07;
    3d1a:	87 e2       	ldi	r24, 0x27	; 39
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	27 e2       	ldi	r18, 0x27	; 39
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	f9 01       	movw	r30, r18
    3d24:	20 81       	ld	r18, Z
    3d26:	27 60       	ori	r18, 0x07	; 7
    3d28:	fc 01       	movw	r30, r24
    3d2a:	20 83       	st	Z, r18
		ADCSRA |= (1<<ADSC);
    3d2c:	86 e2       	ldi	r24, 0x26	; 38
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	26 e2       	ldi	r18, 0x26	; 38
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	f9 01       	movw	r30, r18
    3d36:	20 81       	ld	r18, Z
    3d38:	20 64       	ori	r18, 0x40	; 64
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	20 83       	st	Z, r18
		first_channel=false;
    3d3e:	10 92 4d 01 	sts	0x014D, r1
    3d42:	21 c0       	rjmp	.+66     	; 0x3d86 <__vector_16+0xfa>
		} else {
		result1 = (adc_value.w * VSTEP) / 100;
    3d44:	20 91 2c 01 	lds	r18, 0x012C
    3d48:	30 91 2d 01 	lds	r19, 0x012D
    3d4c:	4a ef       	ldi	r20, 0xFA	; 250
    3d4e:	42 9f       	mul	r20, r18
    3d50:	c0 01       	movw	r24, r0
    3d52:	43 9f       	mul	r20, r19
    3d54:	90 0d       	add	r25, r0
    3d56:	11 24       	eor	r1, r1
    3d58:	96 95       	lsr	r25
    3d5a:	87 95       	ror	r24
    3d5c:	96 95       	lsr	r25
    3d5e:	87 95       	ror	r24
    3d60:	9c 01       	movw	r18, r24
    3d62:	ab e7       	ldi	r26, 0x7B	; 123
    3d64:	b4 e1       	ldi	r27, 0x14	; 20
    3d66:	0e 94 67 23 	call	0x46ce	; 0x46ce <__umulhisi3>
    3d6a:	96 95       	lsr	r25
    3d6c:	87 95       	ror	r24
    3d6e:	90 93 4f 01 	sts	0x014F, r25
    3d72:	80 93 4e 01 	sts	0x014E, r24
		conversionIsInProgress = false;
    3d76:	10 92 4b 01 	sts	0x014B, r1
		new_data_available = true;
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	80 93 4c 01 	sts	0x014C, r24
		new_data_available_to_transmit = true;
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	80 93 5b 01 	sts	0x015B, r24
	}
}
    3d86:	df 91       	pop	r29
    3d88:	cf 91       	pop	r28
    3d8a:	ff 91       	pop	r31
    3d8c:	ef 91       	pop	r30
    3d8e:	bf 91       	pop	r27
    3d90:	af 91       	pop	r26
    3d92:	9f 91       	pop	r25
    3d94:	8f 91       	pop	r24
    3d96:	7f 91       	pop	r23
    3d98:	6f 91       	pop	r22
    3d9a:	4f 91       	pop	r20
    3d9c:	3f 91       	pop	r19
    3d9e:	2f 91       	pop	r18
    3da0:	0f 90       	pop	r0
    3da2:	00 92 5f 00 	sts	0x005F, r0
    3da6:	0f 90       	pop	r0
    3da8:	1f 90       	pop	r1
    3daa:	18 95       	reti

00003dac <take_over_command>:
#include "adc.h"
#include "motor.h"
#include "control_logic.h"


void take_over_command(task_t *task) {
    3dac:	cf 93       	push	r28
    3dae:	df 93       	push	r29
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
    3db4:	64 97       	sbiw	r28, 0x14	; 20
    3db6:	0f b6       	in	r0, 0x3f	; 63
    3db8:	f8 94       	cli
    3dba:	de bf       	out	0x3e, r29	; 62
    3dbc:	0f be       	out	0x3f, r0	; 63
    3dbe:	cd bf       	out	0x3d, r28	; 61
    3dc0:	9c 8b       	std	Y+20, r25	; 0x14
    3dc2:	8b 8b       	std	Y+19, r24	; 0x13
	enable_features.adc = true;
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	80 93 47 01 	sts	0x0147, r24
	enable_features.controller = false;
    3dca:	10 92 4a 01 	sts	0x014A, r1
	enable_features.send_adc_value = true;
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	80 93 48 01 	sts	0x0148, r24
	control = & state_take_over_control_logic;
    3dd4:	8a e6       	ldi	r24, 0x6A	; 106
    3dd6:	9d e0       	ldi	r25, 0x0D	; 13
    3dd8:	90 93 5f 01 	sts	0x015F, r25
    3ddc:	80 93 5e 01 	sts	0x015E, r24
	l_motor.rpm=0;
    3de0:	10 92 96 01 	sts	0x0196, r1
    3de4:	10 92 95 01 	sts	0x0195, r1
	r_motor.rpm=0;
    3de8:	10 92 a7 01 	sts	0x01A7, r1
    3dec:	10 92 a6 01 	sts	0x01A6, r1
	task_t confirm_take_over_task = {.data.command = TAKE_OVER_ACK, .data.timestamp=0, .data.value=0};
    3df0:	81 e5       	ldi	r24, 0x51	; 81
    3df2:	89 83       	std	Y+1, r24	; 0x01
    3df4:	1a 82       	std	Y+2, r1	; 0x02
    3df6:	1b 82       	std	Y+3, r1	; 0x03
    3df8:	1c 82       	std	Y+4, r1	; 0x04
    3dfa:	1d 82       	std	Y+5, r1	; 0x05
    3dfc:	1e 82       	std	Y+6, r1	; 0x06
    3dfe:	1f 82       	std	Y+7, r1	; 0x07
    3e00:	18 86       	std	Y+8, r1	; 0x08
    3e02:	19 86       	std	Y+9, r1	; 0x09
	add_task(&confirm_take_over_task);
    3e04:	ce 01       	movw	r24, r28
    3e06:	01 96       	adiw	r24, 0x01	; 1
    3e08:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
	task_t system_state = {.data.command = STATE_COMMAND, .data.timestamp=0, .data.value=STATE_TAKE_OVER};
    3e0c:	89 e0       	ldi	r24, 0x09	; 9
    3e0e:	ed ef       	ldi	r30, 0xFD	; 253
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	de 01       	movw	r26, r28
    3e14:	1a 96       	adiw	r26, 0x0a	; 10
    3e16:	01 90       	ld	r0, Z+
    3e18:	0d 92       	st	X+, r0
    3e1a:	8a 95       	dec	r24
    3e1c:	e1 f7       	brne	.-8      	; 0x3e16 <take_over_command+0x6a>
	add_task(&system_state);
    3e1e:	ce 01       	movw	r24, r28
    3e20:	0a 96       	adiw	r24, 0x0a	; 10
    3e22:	0e 94 96 20 	call	0x412c	; 0x412c <add_task>
}
    3e26:	64 96       	adiw	r28, 0x14	; 20
    3e28:	0f b6       	in	r0, 0x3f	; 63
    3e2a:	f8 94       	cli
    3e2c:	de bf       	out	0x3e, r29	; 62
    3e2e:	0f be       	out	0x3f, r0	; 63
    3e30:	cd bf       	out	0x3d, r28	; 61
    3e32:	df 91       	pop	r29
    3e34:	cf 91       	pop	r28
    3e36:	08 95       	ret

00003e38 <give_back_control_command>:

void give_back_control_command(task_t *task) {
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <give_back_control_command+0x6>
    3e3e:	1f 92       	push	r1
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	9b 83       	std	Y+3, r25	; 0x03
    3e46:	8a 83       	std	Y+2, r24	; 0x02
	enable_features.adc = false;
    3e48:	10 92 47 01 	sts	0x0147, r1
	enable_features.send_adc_value = false;
    3e4c:	10 92 48 01 	sts	0x0148, r1
	uint8_t state = task->data.u8[0];
    3e50:	8a 81       	ldd	r24, Y+2	; 0x02
    3e52:	9b 81       	ldd	r25, Y+3	; 0x03
    3e54:	fc 01       	movw	r30, r24
    3e56:	85 81       	ldd	r24, Z+5	; 0x05
    3e58:	89 83       	std	Y+1, r24	; 0x01
	switch(state) {
    3e5a:	89 81       	ldd	r24, Y+1	; 0x01
    3e5c:	88 2f       	mov	r24, r24
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	aa 27       	eor	r26, r26
    3e62:	97 fd       	sbrc	r25, 7
    3e64:	a0 95       	com	r26
    3e66:	ba 2f       	mov	r27, r26
    3e68:	40 e0       	ldi	r20, 0x00	; 0
    3e6a:	50 e0       	ldi	r21, 0x00	; 0
    3e6c:	23 e1       	ldi	r18, 0x13	; 19
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	84 1b       	sub	r24, r20
    3e72:	95 0b       	sbc	r25, r21
    3e74:	28 17       	cp	r18, r24
    3e76:	39 07       	cpc	r19, r25
    3e78:	08 f4       	brcc	.+2      	; 0x3e7c <give_back_control_command+0x44>
    3e7a:	b1 c0       	rjmp	.+354    	; 0x3fde <give_back_control_command+0x1a6>
    3e7c:	8b 5b       	subi	r24, 0xBB	; 187
    3e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e80:	fc 01       	movw	r30, r24
    3e82:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__tablejump2__>
		case 0:
		control = &state_idle_control_logic;
    3e86:	8c e4       	ldi	r24, 0x4C	; 76
    3e88:	92 e0       	ldi	r25, 0x02	; 2
    3e8a:	90 93 5f 01 	sts	0x015F, r25
    3e8e:	80 93 5e 01 	sts	0x015E, r24
		break;
    3e92:	ac c0       	rjmp	.+344    	; 0x3fec <give_back_control_command+0x1b4>
		case 1:
		control = &state_find_track_control_logic;
    3e94:	83 e5       	ldi	r24, 0x53	; 83
    3e96:	92 e0       	ldi	r25, 0x02	; 2
    3e98:	90 93 5f 01 	sts	0x015F, r25
    3e9c:	80 93 5e 01 	sts	0x015E, r24
		state_find_track_data.not_first_run=false;
    3ea0:	10 92 81 01 	sts	0x0181, r1
		break;
    3ea4:	a3 c0       	rjmp	.+326    	; 0x3fec <give_back_control_command+0x1b4>
		case 2:
		control = &state_find_track_go_a_bit_more_control_logic;
    3ea6:	82 e0       	ldi	r24, 0x02	; 2
    3ea8:	93 e0       	ldi	r25, 0x03	; 3
    3eaa:	90 93 5f 01 	sts	0x015F, r25
    3eae:	80 93 5e 01 	sts	0x015E, r24
		state_find_track_go_a_bit_more_control_data.not_first_run=false;
    3eb2:	10 92 85 01 	sts	0x0185, r1
		break;
    3eb6:	9a c0       	rjmp	.+308    	; 0x3fec <give_back_control_command+0x1b4>
		case 3:
		control = &state_find_track_turn_left_control_logic;
    3eb8:	83 e8       	ldi	r24, 0x83	; 131
    3eba:	93 e0       	ldi	r25, 0x03	; 3
    3ebc:	90 93 5f 01 	sts	0x015F, r25
    3ec0:	80 93 5e 01 	sts	0x015E, r24
		state_find_track_turn_left_control_data.not_first_run = false;
    3ec4:	10 92 83 01 	sts	0x0183, r1
		break;
    3ec8:	91 c0       	rjmp	.+290    	; 0x3fec <give_back_control_command+0x1b4>
		case 4:
		control = &state_follow_track_1_control_logic;
    3eca:	8a ee       	ldi	r24, 0xEA	; 234
    3ecc:	93 e0       	ldi	r25, 0x03	; 3
    3ece:	90 93 5f 01 	sts	0x015F, r25
    3ed2:	80 93 5e 01 	sts	0x015E, r24
		break;
    3ed6:	8a c0       	rjmp	.+276    	; 0x3fec <give_back_control_command+0x1b4>
		case 5:
		control = &state_y_intersection_control_logic;
    3ed8:	83 e4       	ldi	r24, 0x43	; 67
    3eda:	94 e0       	ldi	r25, 0x04	; 4
    3edc:	90 93 5f 01 	sts	0x015F, r25
    3ee0:	80 93 5e 01 	sts	0x015E, r24
		break;
    3ee4:	83 c0       	rjmp	.+262    	; 0x3fec <give_back_control_command+0x1b4>
		case 6:
		control = &state_follow_track_2_control_logic;
    3ee6:	8a e4       	ldi	r24, 0x4A	; 74
    3ee8:	94 e0       	ldi	r25, 0x04	; 4
    3eea:	90 93 5f 01 	sts	0x015F, r25
    3eee:	80 93 5e 01 	sts	0x015E, r24
		break;
    3ef2:	7c c0       	rjmp	.+248    	; 0x3fec <give_back_control_command+0x1b4>
		case 7:
		state_wait_before_corner_data.not_first_run=false;
    3ef4:	10 92 73 01 	sts	0x0173, r1
		control = &state_wait_before_corner_logic;
    3ef8:	81 e5       	ldi	r24, 0x51	; 81
    3efa:	94 e0       	ldi	r25, 0x04	; 4
    3efc:	90 93 5f 01 	sts	0x015F, r25
    3f00:	80 93 5e 01 	sts	0x015E, r24
		break;
    3f04:	73 c0       	rjmp	.+230    	; 0x3fec <give_back_control_command+0x1b4>
		case 8:
		state_approach_corner_data.not_first_run=false;
    3f06:	10 92 79 01 	sts	0x0179, r1
		control = &state_approach_corner_logic;
    3f0a:	80 ed       	ldi	r24, 0xD0	; 208
    3f0c:	94 e0       	ldi	r25, 0x04	; 4
    3f0e:	90 93 5f 01 	sts	0x015F, r25
    3f12:	80 93 5e 01 	sts	0x015E, r24
		break;
    3f16:	6a c0       	rjmp	.+212    	; 0x3fec <give_back_control_command+0x1b4>
		case 9:
		state_turn_after_found_corner_data.not_first_run=false;
    3f18:	10 92 5c 01 	sts	0x015C, r1
		control = &state_turn_after_found_corner_logic;
    3f1c:	89 e9       	ldi	r24, 0x99	; 153
    3f1e:	95 e0       	ldi	r25, 0x05	; 5
    3f20:	90 93 5f 01 	sts	0x015F, r25
    3f24:	80 93 5e 01 	sts	0x015E, r24
		break;
    3f28:	61 c0       	rjmp	.+194    	; 0x3fec <give_back_control_command+0x1b4>
		case 10:
		state_go_ahead_after_turn_data.not_first_run=false;
    3f2a:	10 92 62 01 	sts	0x0162, r1
		control = &state_go_ahead_after_turn_logic;
    3f2e:	83 e5       	ldi	r24, 0x53	; 83
    3f30:	96 e0       	ldi	r25, 0x06	; 6
    3f32:	90 93 5f 01 	sts	0x015F, r25
    3f36:	80 93 5e 01 	sts	0x015E, r24
		break;
    3f3a:	58 c0       	rjmp	.+176    	; 0x3fec <give_back_control_command+0x1b4>
		case 11:
		state_go_a_bit_more_data.not_first_run=false;
    3f3c:	10 92 7f 01 	sts	0x017F, r1
		control = &state_go_a_bit_more_logic;
    3f40:	83 e1       	ldi	r24, 0x13	; 19
    3f42:	97 e0       	ldi	r25, 0x07	; 7
    3f44:	90 93 5f 01 	sts	0x015F, r25
    3f48:	80 93 5e 01 	sts	0x015E, r24
		break;
    3f4c:	4f c0       	rjmp	.+158    	; 0x3fec <give_back_control_command+0x1b4>
		case 12:
		state_second_left_turn_data.not_first_run=false;
    3f4e:	10 92 7d 01 	sts	0x017D, r1
		control = &state_second_left_turn_logic;
    3f52:	8f ec       	ldi	r24, 0xCF	; 207
    3f54:	97 e0       	ldi	r25, 0x07	; 7
    3f56:	90 93 5f 01 	sts	0x015F, r25
    3f5a:	80 93 5e 01 	sts	0x015E, r24
		break;
    3f5e:	46 c0       	rjmp	.+140    	; 0x3fec <give_back_control_command+0x1b4>
		case 13:
		state_second_go_ahead_data.not_first_run=false;
    3f60:	10 92 7b 01 	sts	0x017B, r1
		control = &state_second_go_ahead_logic;
    3f64:	89 e8       	ldi	r24, 0x89	; 137
    3f66:	98 e0       	ldi	r25, 0x08	; 8
    3f68:	90 93 5f 01 	sts	0x015F, r25
    3f6c:	80 93 5e 01 	sts	0x015E, r24
		break;
    3f70:	3d c0       	rjmp	.+122    	; 0x3fec <give_back_control_command+0x1b4>
		case 14:
		state_second_go_a_bit_more_data.not_first_run=false;
    3f72:	10 92 68 01 	sts	0x0168, r1
		control = &state_second_go_a_bit_more_logic;
    3f76:	85 e4       	ldi	r24, 0x45	; 69
    3f78:	99 e0       	ldi	r25, 0x09	; 9
    3f7a:	90 93 5f 01 	sts	0x015F, r25
    3f7e:	80 93 5e 01 	sts	0x015E, r24
		break;
    3f82:	34 c0       	rjmp	.+104    	; 0x3fec <give_back_control_command+0x1b4>
		case 15:
		state_third_left_turn_data.not_first_run=false;
    3f84:	10 92 60 01 	sts	0x0160, r1
		control = &state_third_left_turn_logic;
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	9a e0       	ldi	r25, 0x0A	; 10
    3f8c:	90 93 5f 01 	sts	0x015F, r25
    3f90:	80 93 5e 01 	sts	0x015E, r24
		break;
    3f94:	2b c0       	rjmp	.+86     	; 0x3fec <give_back_control_command+0x1b4>
		case 16:
		state_third_go_ahead_data.not_first_run=false;
    3f96:	10 92 66 01 	sts	0x0166, r1
		control = &state_third_go_ahead_logic;
    3f9a:	8b eb       	ldi	r24, 0xBB	; 187
    3f9c:	9a e0       	ldi	r25, 0x0A	; 10
    3f9e:	90 93 5f 01 	sts	0x015F, r25
    3fa2:	80 93 5e 01 	sts	0x015E, r24
		break;
    3fa6:	22 c0       	rjmp	.+68     	; 0x3fec <give_back_control_command+0x1b4>
		case 17:
		state_right_turn_data.not_first_run=false;
    3fa8:	10 92 77 01 	sts	0x0177, r1
		control = &state_right_turn_logic;
    3fac:	84 e8       	ldi	r24, 0x84	; 132
    3fae:	9b e0       	ldi	r25, 0x0B	; 11
    3fb0:	90 93 5f 01 	sts	0x015F, r25
    3fb4:	80 93 5e 01 	sts	0x015E, r24
		break;
    3fb8:	19 c0       	rjmp	.+50     	; 0x3fec <give_back_control_command+0x1b4>
		case 18:
		state_last_go_ahead_data.not_first_run=false;
    3fba:	10 92 64 01 	sts	0x0164, r1
		control = &state_last_go_ahead_logic;
    3fbe:	8e e3       	ldi	r24, 0x3E	; 62
    3fc0:	9c e0       	ldi	r25, 0x0C	; 12
    3fc2:	90 93 5f 01 	sts	0x015F, r25
    3fc6:	80 93 5e 01 	sts	0x015E, r24
		break;
    3fca:	10 c0       	rjmp	.+32     	; 0x3fec <give_back_control_command+0x1b4>
		case 19:
		state_finish_data.not_first_run=false;
    3fcc:	10 92 75 01 	sts	0x0175, r1
		control = &state_finish_logic;
    3fd0:	87 e0       	ldi	r24, 0x07	; 7
    3fd2:	9d e0       	ldi	r25, 0x0D	; 13
    3fd4:	90 93 5f 01 	sts	0x015F, r25
    3fd8:	80 93 5e 01 	sts	0x015E, r24
		break;
    3fdc:	07 c0       	rjmp	.+14     	; 0x3fec <give_back_control_command+0x1b4>
		default:
		control = &state_take_over_control_logic;
    3fde:	8a e6       	ldi	r24, 0x6A	; 106
    3fe0:	9d e0       	ldi	r25, 0x0D	; 13
    3fe2:	90 93 5f 01 	sts	0x015F, r25
    3fe6:	80 93 5e 01 	sts	0x015E, r24
		break;
    3fea:	00 00       	nop
		
		enable_features.adc = false;
		enable_features.controller = false;
		enable_features.send_adc_value = false;
	}
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
    3ff2:	df 91       	pop	r29
    3ff4:	cf 91       	pop	r28
    3ff6:	08 95       	ret

00003ff8 <recive_task_init>:
* \param
*
* \return void
*/
void recive_task_init(void)
{
    3ff8:	cf 93       	push	r28
    3ffa:	df 93       	push	r29
    3ffc:	cd b7       	in	r28, 0x3d	; 61
    3ffe:	de b7       	in	r29, 0x3e	; 62
	//do_task[STRING]        = &set_day;
	do_task[INIT_CONN]        = &communication_init;
    4000:	8a e4       	ldi	r24, 0x4A	; 74
    4002:	91 e0       	ldi	r25, 0x01	; 1
    4004:	90 93 c5 01 	sts	0x01C5, r25
    4008:	80 93 c4 01 	sts	0x01C4, r24
	//do_task[PING]			= &ack_ping;
	do_task[STOP_CONN]        = &stop;
    400c:	8a e8       	ldi	r24, 0x8A	; 138
    400e:	91 e0       	ldi	r25, 0x01	; 1
    4010:	90 93 cb 01 	sts	0x01CB, r25
    4014:	80 93 ca 01 	sts	0x01CA, r24
	
	//do_task[SET_SPEED]		= &set_speed; //TODO find referent to it in git hist
	
	do_task[MOTOR_RPM]		= &set_rpm;
    4018:	86 e7       	ldi	r24, 0x76	; 118
    401a:	92 e1       	ldi	r25, 0x12	; 18
    401c:	90 93 f9 01 	sts	0x01F9, r25
    4020:	80 93 f8 01 	sts	0x01F8, r24
	do_task[MOTOR_CORNER]	= &set_movement_task;
    4024:	83 e2       	ldi	r24, 0x23	; 35
    4026:	92 e1       	ldi	r25, 0x12	; 18
    4028:	90 93 fb 01 	sts	0x01FB, r25
    402c:	80 93 fa 01 	sts	0x01FA, r24
	do_task[MOTOR_CIRCLE]	= &start_circle;
    4030:	83 e6       	ldi	r24, 0x63	; 99
    4032:	97 e1       	ldi	r25, 0x17	; 23
    4034:	90 93 fd 01 	sts	0x01FD, r25
    4038:	80 93 fc 01 	sts	0x01FC, r24
	do_task[MOTOR_WALL]	= &start_wall;
    403c:	86 e7       	ldi	r24, 0x76	; 118
    403e:	97 e1       	ldi	r25, 0x17	; 23
    4040:	90 93 03 02 	sts	0x0203, r25
    4044:	80 93 02 02 	sts	0x0202, r24
	do_task[MOTOR_CIRCLE_TIME]	= &set_circle_time;
    4048:	83 e5       	ldi	r24, 0x53	; 83
    404a:	93 e1       	ldi	r25, 0x13	; 19
    404c:	90 93 ff 01 	sts	0x01FF, r25
    4050:	80 93 fe 01 	sts	0x01FE, r24
	do_task[MOTOR_CORNER_TIME]		= &set_corner_time;
    4054:	8f e6       	ldi	r24, 0x6F	; 111
    4056:	93 e1       	ldi	r25, 0x13	; 19
    4058:	90 93 01 02 	sts	0x0201, r25
    405c:	80 93 00 02 	sts	0x0200, r24
	
	do_task[PID_KP]			= &set_Kp;
    4060:	82 e8       	ldi	r24, 0x82	; 130
    4062:	99 e1       	ldi	r25, 0x19	; 25
    4064:	90 93 15 02 	sts	0x0215, r25
    4068:	80 93 14 02 	sts	0x0214, r24
 	do_task[PID_KD]			= &set_Kd;
    406c:	85 eb       	ldi	r24, 0xB5	; 181
    406e:	99 e1       	ldi	r25, 0x19	; 25
    4070:	90 93 17 02 	sts	0x0217, r25
    4074:	80 93 16 02 	sts	0x0216, r24
 	do_task[PID_L_KP]		= &set_l_Kp;
    4078:	8e ec       	ldi	r24, 0xCE	; 206
    407a:	9d e0       	ldi	r25, 0x0D	; 13
    407c:	90 93 19 02 	sts	0x0219, r25
    4080:	80 93 18 02 	sts	0x0218, r24
 	do_task[PID_L_KD]		= &set_l_Kd;
    4084:	80 e4       	ldi	r24, 0x40	; 64
    4086:	9e e0       	ldi	r25, 0x0E	; 14
    4088:	90 93 1d 02 	sts	0x021D, r25
    408c:	80 93 1c 02 	sts	0x021C, r24
 	do_task[PID_L_KI]		= &set_l_Ki;
    4090:	87 e0       	ldi	r24, 0x07	; 7
    4092:	9e e0       	ldi	r25, 0x0E	; 14
    4094:	90 93 1b 02 	sts	0x021B, r25
    4098:	80 93 1a 02 	sts	0x021A, r24
 	do_task[PID_ERR4]		= &set_err4;
    409c:	89 e7       	ldi	r24, 0x79	; 121
    409e:	9e e0       	ldi	r25, 0x0E	; 14
    40a0:	90 93 23 02 	sts	0x0223, r25
    40a4:	80 93 22 02 	sts	0x0222, r24
 	do_task[PID_ERR5]		= &set_err5;
    40a8:	8c ea       	ldi	r24, 0xAC	; 172
    40aa:	9e e0       	ldi	r25, 0x0E	; 14
    40ac:	90 93 25 02 	sts	0x0225, r25
    40b0:	80 93 24 02 	sts	0x0224, r24
 	do_task[PID_ERR6]		= &set_err6;
    40b4:	8f ed       	ldi	r24, 0xDF	; 223
    40b6:	9e e0       	ldi	r25, 0x0E	; 14
    40b8:	90 93 27 02 	sts	0x0227, r25
    40bc:	80 93 26 02 	sts	0x0226, r24
 	do_task[PID_ERRP1]		= &set_err_p1;
    40c0:	82 e1       	ldi	r24, 0x12	; 18
    40c2:	9f e0       	ldi	r25, 0x0F	; 15
    40c4:	90 93 29 02 	sts	0x0229, r25
    40c8:	80 93 28 02 	sts	0x0228, r24
	do_task[PID]			= &set_pid;
    40cc:	8e e7       	ldi	r24, 0x7E	; 126
    40ce:	9f e0       	ldi	r25, 0x0F	; 15
    40d0:	90 93 1f 02 	sts	0x021F, r25
    40d4:	80 93 1e 02 	sts	0x021E, r24
	do_task[PID_INT]		= &set_pid_int;
    40d8:	8e ed       	ldi	r24, 0xDE	; 222
    40da:	97 e1       	ldi	r25, 0x17	; 23
    40dc:	90 93 21 02 	sts	0x0221, r25
    40e0:	80 93 20 02 	sts	0x0220, r24
	
 	do_task[TAKE_OVER]		= &take_over_command;
    40e4:	86 ed       	ldi	r24, 0xD6	; 214
    40e6:	9e e1       	ldi	r25, 0x1E	; 30
    40e8:	90 93 63 02 	sts	0x0263, r25
    40ec:	80 93 62 02 	sts	0x0262, r24
 	do_task[GIVE_BACK_CONTROL] = &give_back_control_command;
    40f0:	8c e1       	ldi	r24, 0x1C	; 28
    40f2:	9f e1       	ldi	r25, 0x1F	; 31
    40f4:	90 93 67 02 	sts	0x0267, r25
    40f8:	80 93 66 02 	sts	0x0266, r24
	do_task[START_LINE]		= &start_line;
    40fc:	81 e7       	ldi	r24, 0x71	; 113
    40fe:	9d e0       	ldi	r25, 0x0D	; 13
    4100:	90 93 41 02 	sts	0x0241, r25
    4104:	80 93 40 02 	sts	0x0240, r24
	//do_task[PID_ERROR]       = &set_year;
//
	//do_task[ADC]     = &set_second;
//
	//do_task[DEBUG]     = &set_minute;
}
    4108:	df 91       	pop	r29
    410a:	cf 91       	pop	r28
    410c:	08 95       	ret

0000410e <get_task_number>:
* \param
*
* \return int Returns the number of task in the queue.
*/
uint32_t get_task_number(void)
{
    410e:	cf 93       	push	r28
    4110:	df 93       	push	r29
    4112:	cd b7       	in	r28, 0x3d	; 61
    4114:	de b7       	in	r29, 0x3e	; 62
	return task_count;
    4116:	80 91 3c 01 	lds	r24, 0x013C
    411a:	88 2f       	mov	r24, r24
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	a0 e0       	ldi	r26, 0x00	; 0
    4120:	b0 e0       	ldi	r27, 0x00	; 0
}
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <add_task>:
* \param task Used to specify a pointer to a task.
*
* \return void
*/
void add_task(task_t *task)
{
    412c:	cf 93       	push	r28
    412e:	df 93       	push	r29
    4130:	00 d0       	rcall	.+0      	; 0x4132 <add_task+0x6>
    4132:	00 d0       	rcall	.+0      	; 0x4134 <add_task+0x8>
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    4138:	9c 83       	std	Y+4, r25	; 0x04
    413a:	8b 83       	std	Y+3, r24	; 0x03
	if(task==NULL) return;
    413c:	8b 81       	ldd	r24, Y+3	; 0x03
    413e:	9c 81       	ldd	r25, Y+4	; 0x04
    4140:	00 97       	sbiw	r24, 0x00	; 0
    4142:	09 f4       	brne	.+2      	; 0x4146 <add_task+0x1a>
    4144:	59 c0       	rjmp	.+178    	; 0x41f8 <add_task+0xcc>
	
	if(task_count>50)
    4146:	80 91 3c 01 	lds	r24, 0x013C
    414a:	83 33       	cpi	r24, 0x33	; 51
    414c:	38 f0       	brcs	.+14     	; 0x415c <add_task+0x30>
	{
		clear_task_fifo();
    414e:	00 00       	nop
    4150:	0e 94 03 21 	call	0x4206	; 0x4206 <delete_task>
    4154:	00 97       	sbiw	r24, 0x00	; 0
    4156:	e1 f7       	brne	.-8      	; 0x4150 <add_task+0x24>
		task_count=0;
    4158:	10 92 3c 01 	sts	0x013C, r1
	}//if new data should be lost return instead of deleting task
	
	struct node *temp_node = malloc(1*sizeof(*temp_node));
    415c:	8b e0       	ldi	r24, 0x0B	; 11
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	0e 94 81 23 	call	0x4702	; 0x4702 <malloc>
    4164:	9a 83       	std	Y+2, r25	; 0x02
    4166:	89 83       	std	Y+1, r24	; 0x01
	//task_t *temp_task = malloc(1*sizeof(*temp_task));

	//temp_task->data.command=task->data.command;
	//temp_task->data.value=task->data.value;

	temp_node->task=*task;
    4168:	89 81       	ldd	r24, Y+1	; 0x01
    416a:	9a 81       	ldd	r25, Y+2	; 0x02
    416c:	2b 81       	ldd	r18, Y+3	; 0x03
    416e:	3c 81       	ldd	r19, Y+4	; 0x04
    4170:	49 e0       	ldi	r20, 0x09	; 9
    4172:	f9 01       	movw	r30, r18
    4174:	dc 01       	movw	r26, r24
    4176:	01 90       	ld	r0, Z+
    4178:	0d 92       	st	X+, r0
    417a:	4a 95       	dec	r20
    417c:	e1 f7       	brne	.-8      	; 0x4176 <add_task+0x4a>
	temp_node->next=NULL;
    417e:	89 81       	ldd	r24, Y+1	; 0x01
    4180:	9a 81       	ldd	r25, Y+2	; 0x02
    4182:	fc 01       	movw	r30, r24
    4184:	12 86       	std	Z+10, r1	; 0x0a
    4186:	11 86       	std	Z+9, r1	; 0x09

	if (head == NULL || tail == NULL)
    4188:	80 91 c4 03 	lds	r24, 0x03C4
    418c:	90 91 c5 03 	lds	r25, 0x03C5
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	31 f0       	breq	.+12     	; 0x41a0 <add_task+0x74>
    4194:	80 91 c2 03 	lds	r24, 0x03C2
    4198:	90 91 c3 03 	lds	r25, 0x03C3
    419c:	00 97       	sbiw	r24, 0x00	; 0
    419e:	c1 f4       	brne	.+48     	; 0x41d0 <add_task+0xa4>
	{
		tail = temp_node;
    41a0:	89 81       	ldd	r24, Y+1	; 0x01
    41a2:	9a 81       	ldd	r25, Y+2	; 0x02
    41a4:	90 93 c3 03 	sts	0x03C3, r25
    41a8:	80 93 c2 03 	sts	0x03C2, r24
		head = temp_node;
    41ac:	89 81       	ldd	r24, Y+1	; 0x01
    41ae:	9a 81       	ldd	r25, Y+2	; 0x02
    41b0:	90 93 c5 03 	sts	0x03C5, r25
    41b4:	80 93 c4 03 	sts	0x03C4, r24
		head->next=tail;
    41b8:	80 91 c4 03 	lds	r24, 0x03C4
    41bc:	90 91 c5 03 	lds	r25, 0x03C5
    41c0:	20 91 c2 03 	lds	r18, 0x03C2
    41c4:	30 91 c3 03 	lds	r19, 0x03C3
    41c8:	fc 01       	movw	r30, r24
    41ca:	32 87       	std	Z+10, r19	; 0x0a
    41cc:	21 87       	std	Z+9, r18	; 0x09
    41ce:	0f c0       	rjmp	.+30     	; 0x41ee <add_task+0xc2>
	}
	else
	{
		tail->next = temp_node;
    41d0:	80 91 c2 03 	lds	r24, 0x03C2
    41d4:	90 91 c3 03 	lds	r25, 0x03C3
    41d8:	29 81       	ldd	r18, Y+1	; 0x01
    41da:	3a 81       	ldd	r19, Y+2	; 0x02
    41dc:	fc 01       	movw	r30, r24
    41de:	32 87       	std	Z+10, r19	; 0x0a
    41e0:	21 87       	std	Z+9, r18	; 0x09
		tail = temp_node;
    41e2:	89 81       	ldd	r24, Y+1	; 0x01
    41e4:	9a 81       	ldd	r25, Y+2	; 0x02
    41e6:	90 93 c3 03 	sts	0x03C3, r25
    41ea:	80 93 c2 03 	sts	0x03C2, r24
	}
	task_count++;
    41ee:	80 91 3c 01 	lds	r24, 0x013C
    41f2:	8f 5f       	subi	r24, 0xFF	; 255
    41f4:	80 93 3c 01 	sts	0x013C, r24
}
    41f8:	0f 90       	pop	r0
    41fa:	0f 90       	pop	r0
    41fc:	0f 90       	pop	r0
    41fe:	0f 90       	pop	r0
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	08 95       	ret

00004206 <delete_task>:
* \param
*
* \return task_t* Returns a pointer the task that was deleted.
*/
task_t* delete_task(void)
{
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	cd b7       	in	r28, 0x3d	; 61
    420c:	de b7       	in	r29, 0x3e	; 62
	static task_t temp_task; //hack
	temp_task.data.command = 0;
    420e:	10 92 3d 01 	sts	0x013D, r1
	temp_task.data.value = 0;
    4212:	10 92 42 01 	sts	0x0142, r1
    4216:	10 92 43 01 	sts	0x0143, r1
    421a:	10 92 44 01 	sts	0x0144, r1
    421e:	10 92 45 01 	sts	0x0145, r1
	
	temp_head = head;
    4222:	80 91 c4 03 	lds	r24, 0x03C4
    4226:	90 91 c5 03 	lds	r25, 0x03C5
    422a:	90 93 c1 03 	sts	0x03C1, r25
    422e:	80 93 c0 03 	sts	0x03C0, r24
	
	if (temp_head == NULL || tail == NULL || task_count == 0)
    4232:	80 91 c0 03 	lds	r24, 0x03C0
    4236:	90 91 c1 03 	lds	r25, 0x03C1
    423a:	00 97       	sbiw	r24, 0x00	; 0
    423c:	51 f0       	breq	.+20     	; 0x4252 <delete_task+0x4c>
    423e:	80 91 c2 03 	lds	r24, 0x03C2
    4242:	90 91 c3 03 	lds	r25, 0x03C3
    4246:	00 97       	sbiw	r24, 0x00	; 0
    4248:	21 f0       	breq	.+8      	; 0x4252 <delete_task+0x4c>
    424a:	80 91 3c 01 	lds	r24, 0x013C
    424e:	88 23       	and	r24, r24
    4250:	19 f4       	brne	.+6      	; 0x4258 <delete_task+0x52>
	{
		return NULL;
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	42 c0       	rjmp	.+132    	; 0x42dc <delete_task+0xd6>
	}
	else
	{
		if (temp_head->next != NULL)
    4258:	80 91 c0 03 	lds	r24, 0x03C0
    425c:	90 91 c1 03 	lds	r25, 0x03C1
    4260:	fc 01       	movw	r30, r24
    4262:	81 85       	ldd	r24, Z+9	; 0x09
    4264:	92 85       	ldd	r25, Z+10	; 0x0a
    4266:	00 97       	sbiw	r24, 0x00	; 0
    4268:	c1 f0       	breq	.+48     	; 0x429a <delete_task+0x94>
		{
			head = head->next;
    426a:	80 91 c4 03 	lds	r24, 0x03C4
    426e:	90 91 c5 03 	lds	r25, 0x03C5
    4272:	fc 01       	movw	r30, r24
    4274:	81 85       	ldd	r24, Z+9	; 0x09
    4276:	92 85       	ldd	r25, Z+10	; 0x0a
    4278:	90 93 c5 03 	sts	0x03C5, r25
    427c:	80 93 c4 03 	sts	0x03C4, r24
			temp_task = temp_head->task;
    4280:	80 91 c0 03 	lds	r24, 0x03C0
    4284:	90 91 c1 03 	lds	r25, 0x03C1
    4288:	29 e0       	ldi	r18, 0x09	; 9
    428a:	fc 01       	movw	r30, r24
    428c:	ad e3       	ldi	r26, 0x3D	; 61
    428e:	b1 e0       	ldi	r27, 0x01	; 1
    4290:	01 90       	ld	r0, Z+
    4292:	0d 92       	st	X+, r0
    4294:	2a 95       	dec	r18
    4296:	e1 f7       	brne	.-8      	; 0x4290 <delete_task+0x8a>
    4298:	14 c0       	rjmp	.+40     	; 0x42c2 <delete_task+0xbc>
		}
		else
		{
			temp_task = temp_head->task;
    429a:	80 91 c0 03 	lds	r24, 0x03C0
    429e:	90 91 c1 03 	lds	r25, 0x03C1
    42a2:	29 e0       	ldi	r18, 0x09	; 9
    42a4:	fc 01       	movw	r30, r24
    42a6:	ad e3       	ldi	r26, 0x3D	; 61
    42a8:	b1 e0       	ldi	r27, 0x01	; 1
    42aa:	01 90       	ld	r0, Z+
    42ac:	0d 92       	st	X+, r0
    42ae:	2a 95       	dec	r18
    42b0:	e1 f7       	brne	.-8      	; 0x42aa <delete_task+0xa4>
			head = NULL;
    42b2:	10 92 c5 03 	sts	0x03C5, r1
    42b6:	10 92 c4 03 	sts	0x03C4, r1
			tail = NULL;
    42ba:	10 92 c3 03 	sts	0x03C3, r1
    42be:	10 92 c2 03 	sts	0x03C2, r1
		}
		task_count--;
    42c2:	80 91 3c 01 	lds	r24, 0x013C
    42c6:	81 50       	subi	r24, 0x01	; 1
    42c8:	80 93 3c 01 	sts	0x013C, r24
		//free(temp_head->task);
		free(temp_head);
    42cc:	80 91 c0 03 	lds	r24, 0x03C0
    42d0:	90 91 c1 03 	lds	r25, 0x03C1
    42d4:	0e 94 19 24 	call	0x4832	; 0x4832 <free>
		return &temp_task;
    42d8:	8d e3       	ldi	r24, 0x3D	; 61
    42da:	91 e0       	ldi	r25, 0x01	; 1
	}
    42dc:	df 91       	pop	r29
    42de:	cf 91       	pop	r28
    42e0:	08 95       	ret

000042e2 <timer1_init>:
 * \param 
 * 
 * \return void
 */
void timer1_init(void)
{
    42e2:	cf 93       	push	r28
    42e4:	df 93       	push	r29
    42e6:	cd b7       	in	r28, 0x3d	; 61
    42e8:	de b7       	in	r29, 0x3e	; 62
	//normal port operation
	TCCR1A= 0;
    42ea:	8f e4       	ldi	r24, 0x4F	; 79
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	fc 01       	movw	r30, r24
    42f0:	10 82       	st	Z, r1
	
	//CS12:0: Clock Select clk/8 From prescaler
	//WGM13:2: CTC mode on OCR1A
	TCCR1B|=(1<<CS11)|(1<<WGM12);
    42f2:	8e e4       	ldi	r24, 0x4E	; 78
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	2e e4       	ldi	r18, 0x4E	; 78
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	f9 01       	movw	r30, r18
    42fc:	20 81       	ld	r18, Z
    42fe:	2a 60       	ori	r18, 0x0A	; 10
    4300:	fc 01       	movw	r30, r24
    4302:	20 83       	st	Z, r18
	
	//interrupt fires every 1millisecond
	//1/(10000000/8)*1250==1millisecond 1250=0x4E2
	OCR1A = 0x4E2;
    4304:	8a e4       	ldi	r24, 0x4A	; 74
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	22 ee       	ldi	r18, 0xE2	; 226
    430a:	34 e0       	ldi	r19, 0x04	; 4
    430c:	fc 01       	movw	r30, r24
    430e:	31 83       	std	Z+1, r19	; 0x01
    4310:	20 83       	st	Z, r18
	
	//OCIE1A: Timer/Counter1, Output Compare A Match Interrupt Enable
	TIMSK|=(1<<OCIE1A);
    4312:	89 e5       	ldi	r24, 0x59	; 89
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	29 e5       	ldi	r18, 0x59	; 89
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	f9 01       	movw	r30, r18
    431c:	20 81       	ld	r18, Z
    431e:	20 61       	ori	r18, 0x10	; 16
    4320:	fc 01       	movw	r30, r24
    4322:	20 83       	st	Z, r18
}
    4324:	df 91       	pop	r29
    4326:	cf 91       	pop	r28
    4328:	08 95       	ret

0000432a <tmr_start>:
* \param delay Used to specify a delay in milliseconds.
*
* \return void
*/
void tmr_start(timer_t *timer, uint32_t delay_in_ms)
{
    432a:	cf 93       	push	r28
    432c:	df 93       	push	r29
    432e:	00 d0       	rcall	.+0      	; 0x4330 <tmr_start+0x6>
    4330:	00 d0       	rcall	.+0      	; 0x4332 <tmr_start+0x8>
    4332:	00 d0       	rcall	.+0      	; 0x4334 <tmr_start+0xa>
    4334:	cd b7       	in	r28, 0x3d	; 61
    4336:	de b7       	in	r29, 0x3e	; 62
    4338:	9a 83       	std	Y+2, r25	; 0x02
    433a:	89 83       	std	Y+1, r24	; 0x01
    433c:	4b 83       	std	Y+3, r20	; 0x03
    433e:	5c 83       	std	Y+4, r21	; 0x04
    4340:	6d 83       	std	Y+5, r22	; 0x05
    4342:	7e 83       	std	Y+6, r23	; 0x06
	timer->timer_start = milliseconds;
    4344:	80 91 c6 03 	lds	r24, 0x03C6
    4348:	90 91 c7 03 	lds	r25, 0x03C7
    434c:	a0 91 c8 03 	lds	r26, 0x03C8
    4350:	b0 91 c9 03 	lds	r27, 0x03C9
    4354:	29 81       	ldd	r18, Y+1	; 0x01
    4356:	3a 81       	ldd	r19, Y+2	; 0x02
    4358:	f9 01       	movw	r30, r18
    435a:	80 83       	st	Z, r24
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	a2 83       	std	Z+2, r26	; 0x02
    4360:	b3 83       	std	Z+3, r27	; 0x03
	timer->timer_expires = milliseconds + delay_in_ms; // (timer wraps around after ~ 50 days)
    4362:	20 91 c6 03 	lds	r18, 0x03C6
    4366:	30 91 c7 03 	lds	r19, 0x03C7
    436a:	40 91 c8 03 	lds	r20, 0x03C8
    436e:	50 91 c9 03 	lds	r21, 0x03C9
    4372:	8b 81       	ldd	r24, Y+3	; 0x03
    4374:	9c 81       	ldd	r25, Y+4	; 0x04
    4376:	ad 81       	ldd	r26, Y+5	; 0x05
    4378:	be 81       	ldd	r27, Y+6	; 0x06
    437a:	82 0f       	add	r24, r18
    437c:	93 1f       	adc	r25, r19
    437e:	a4 1f       	adc	r26, r20
    4380:	b5 1f       	adc	r27, r21
    4382:	29 81       	ldd	r18, Y+1	; 0x01
    4384:	3a 81       	ldd	r19, Y+2	; 0x02
    4386:	f9 01       	movw	r30, r18
    4388:	84 83       	std	Z+4, r24	; 0x04
    438a:	95 83       	std	Z+5, r25	; 0x05
    438c:	a6 83       	std	Z+6, r26	; 0x06
    438e:	b7 83       	std	Z+7, r27	; 0x07
	timer->do_once = false;//TODO refactor to execute on false
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	9a 81       	ldd	r25, Y+2	; 0x02
    4394:	fc 01       	movw	r30, r24
    4396:	10 86       	std	Z+8, r1	; 0x08
}
    4398:	26 96       	adiw	r28, 0x06	; 6
    439a:	0f b6       	in	r0, 0x3f	; 63
    439c:	f8 94       	cli
    439e:	de bf       	out	0x3e, r29	; 62
    43a0:	0f be       	out	0x3f, r0	; 63
    43a2:	cd bf       	out	0x3d, r28	; 61
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	08 95       	ret

000043aa <tmr_exp>:
*   do something;
*
* \return bool Returns true if the delay has passed.
*/
bool tmr_exp(timer_t *timer)
{
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
    43b2:	2a 97       	sbiw	r28, 0x0a	; 10
    43b4:	0f b6       	in	r0, 0x3f	; 63
    43b6:	f8 94       	cli
    43b8:	de bf       	out	0x3e, r29	; 62
    43ba:	0f be       	out	0x3f, r0	; 63
    43bc:	cd bf       	out	0x3d, r28	; 61
    43be:	9a 87       	std	Y+10, r25	; 0x0a
    43c0:	89 87       	std	Y+9, r24	; 0x09
	uint32_t timer_start = timer->timer_start;
    43c2:	89 85       	ldd	r24, Y+9	; 0x09
    43c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c6:	fc 01       	movw	r30, r24
    43c8:	80 81       	ld	r24, Z
    43ca:	91 81       	ldd	r25, Z+1	; 0x01
    43cc:	a2 81       	ldd	r26, Z+2	; 0x02
    43ce:	b3 81       	ldd	r27, Z+3	; 0x03
    43d0:	89 83       	std	Y+1, r24	; 0x01
    43d2:	9a 83       	std	Y+2, r25	; 0x02
    43d4:	ab 83       	std	Y+3, r26	; 0x03
    43d6:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t timer_expires  = timer->timer_expires; // making a copy of the timer var for safety 
    43d8:	89 85       	ldd	r24, Y+9	; 0x09
    43da:	9a 85       	ldd	r25, Y+10	; 0x0a
    43dc:	fc 01       	movw	r30, r24
    43de:	84 81       	ldd	r24, Z+4	; 0x04
    43e0:	95 81       	ldd	r25, Z+5	; 0x05
    43e2:	a6 81       	ldd	r26, Z+6	; 0x06
    43e4:	b7 81       	ldd	r27, Z+7	; 0x07
    43e6:	8d 83       	std	Y+5, r24	; 0x05
    43e8:	9e 83       	std	Y+6, r25	; 0x06
    43ea:	af 83       	std	Y+7, r26	; 0x07
    43ec:	b8 87       	std	Y+8, r27	; 0x08

 	if (timer->do_once == false) //check if the timer has been evaluated is set to false so no initialization of the timer is needed if the timer is global/static
    43ee:	89 85       	ldd	r24, Y+9	; 0x09
    43f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f2:	fc 01       	movw	r30, r24
    43f4:	80 85       	ldd	r24, Z+8	; 0x08
    43f6:	88 23       	and	r24, r24
    43f8:	09 f0       	breq	.+2      	; 0x43fc <tmr_exp+0x52>
    43fa:	77 c0       	rjmp	.+238    	; 0x44ea <tmr_exp+0x140>
 	{		
		if (timer_expires > timer_start) //check if the milliseconds variable has overlapped(once every 50 days)
    43fc:	2d 81       	ldd	r18, Y+5	; 0x05
    43fe:	3e 81       	ldd	r19, Y+6	; 0x06
    4400:	4f 81       	ldd	r20, Y+7	; 0x07
    4402:	58 85       	ldd	r21, Y+8	; 0x08
    4404:	89 81       	ldd	r24, Y+1	; 0x01
    4406:	9a 81       	ldd	r25, Y+2	; 0x02
    4408:	ab 81       	ldd	r26, Y+3	; 0x03
    440a:	bc 81       	ldd	r27, Y+4	; 0x04
    440c:	82 17       	cp	r24, r18
    440e:	93 07       	cpc	r25, r19
    4410:	a4 07       	cpc	r26, r20
    4412:	b5 07       	cpc	r27, r21
    4414:	58 f5       	brcc	.+86     	; 0x446c <tmr_exp+0xc2>
		{//timer didn't overlap
			if((milliseconds >= timer_expires) || (milliseconds < timer_start)) //check timer boundaries 
    4416:	20 91 c6 03 	lds	r18, 0x03C6
    441a:	30 91 c7 03 	lds	r19, 0x03C7
    441e:	40 91 c8 03 	lds	r20, 0x03C8
    4422:	50 91 c9 03 	lds	r21, 0x03C9
    4426:	8d 81       	ldd	r24, Y+5	; 0x05
    4428:	9e 81       	ldd	r25, Y+6	; 0x06
    442a:	af 81       	ldd	r26, Y+7	; 0x07
    442c:	b8 85       	ldd	r27, Y+8	; 0x08
    442e:	28 17       	cp	r18, r24
    4430:	39 07       	cpc	r19, r25
    4432:	4a 07       	cpc	r20, r26
    4434:	5b 07       	cpc	r21, r27
    4436:	88 f4       	brcc	.+34     	; 0x445a <tmr_exp+0xb0>
    4438:	20 91 c6 03 	lds	r18, 0x03C6
    443c:	30 91 c7 03 	lds	r19, 0x03C7
    4440:	40 91 c8 03 	lds	r20, 0x03C8
    4444:	50 91 c9 03 	lds	r21, 0x03C9
    4448:	89 81       	ldd	r24, Y+1	; 0x01
    444a:	9a 81       	ldd	r25, Y+2	; 0x02
    444c:	ab 81       	ldd	r26, Y+3	; 0x03
    444e:	bc 81       	ldd	r27, Y+4	; 0x04
    4450:	28 17       	cp	r18, r24
    4452:	39 07       	cpc	r19, r25
    4454:	4a 07       	cpc	r20, r26
    4456:	5b 07       	cpc	r21, r27
    4458:	38 f4       	brcc	.+14     	; 0x4468 <tmr_exp+0xbe>
			{//  check if milliseconds passed timer limit	     check if milliseconds overlapped		
				timer->do_once=true; //ensure that the timer is evaluated once only
    445a:	89 85       	ldd	r24, Y+9	; 0x09
    445c:	9a 85       	ldd	r25, Y+10	; 0x0a
    445e:	21 e0       	ldi	r18, 0x01	; 1
    4460:	fc 01       	movw	r30, r24
    4462:	20 87       	std	Z+8, r18	; 0x08
				return true;
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	42 c0       	rjmp	.+132    	; 0x44ec <tmr_exp+0x142>
			}
			else
			{
				return false;
    4468:	80 e0       	ldi	r24, 0x00	; 0
    446a:	40 c0       	rjmp	.+128    	; 0x44ec <tmr_exp+0x142>
			}
		}
		else if (timer_expires < timer_start)
    446c:	2d 81       	ldd	r18, Y+5	; 0x05
    446e:	3e 81       	ldd	r19, Y+6	; 0x06
    4470:	4f 81       	ldd	r20, Y+7	; 0x07
    4472:	58 85       	ldd	r21, Y+8	; 0x08
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	9a 81       	ldd	r25, Y+2	; 0x02
    4478:	ab 81       	ldd	r26, Y+3	; 0x03
    447a:	bc 81       	ldd	r27, Y+4	; 0x04
    447c:	28 17       	cp	r18, r24
    447e:	39 07       	cpc	r19, r25
    4480:	4a 07       	cpc	r20, r26
    4482:	5b 07       	cpc	r21, r27
    4484:	58 f5       	brcc	.+86     	; 0x44dc <tmr_exp+0x132>
		{//timer overlapped
			if((milliseconds < timer_start) && (milliseconds >= timer_expires))
    4486:	20 91 c6 03 	lds	r18, 0x03C6
    448a:	30 91 c7 03 	lds	r19, 0x03C7
    448e:	40 91 c8 03 	lds	r20, 0x03C8
    4492:	50 91 c9 03 	lds	r21, 0x03C9
    4496:	89 81       	ldd	r24, Y+1	; 0x01
    4498:	9a 81       	ldd	r25, Y+2	; 0x02
    449a:	ab 81       	ldd	r26, Y+3	; 0x03
    449c:	bc 81       	ldd	r27, Y+4	; 0x04
    449e:	28 17       	cp	r18, r24
    44a0:	39 07       	cpc	r19, r25
    44a2:	4a 07       	cpc	r20, r26
    44a4:	5b 07       	cpc	r21, r27
    44a6:	c0 f4       	brcc	.+48     	; 0x44d8 <tmr_exp+0x12e>
    44a8:	20 91 c6 03 	lds	r18, 0x03C6
    44ac:	30 91 c7 03 	lds	r19, 0x03C7
    44b0:	40 91 c8 03 	lds	r20, 0x03C8
    44b4:	50 91 c9 03 	lds	r21, 0x03C9
    44b8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ba:	9e 81       	ldd	r25, Y+6	; 0x06
    44bc:	af 81       	ldd	r26, Y+7	; 0x07
    44be:	b8 85       	ldd	r27, Y+8	; 0x08
    44c0:	28 17       	cp	r18, r24
    44c2:	39 07       	cpc	r19, r25
    44c4:	4a 07       	cpc	r20, r26
    44c6:	5b 07       	cpc	r21, r27
    44c8:	38 f0       	brcs	.+14     	; 0x44d8 <tmr_exp+0x12e>
			{// 	   check if milliseconds overlapped		 check if milliseconds passed timer limit
				timer->do_once = true;
    44ca:	89 85       	ldd	r24, Y+9	; 0x09
    44cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ce:	21 e0       	ldi	r18, 0x01	; 1
    44d0:	fc 01       	movw	r30, r24
    44d2:	20 87       	std	Z+8, r18	; 0x08
				return true;
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	0a c0       	rjmp	.+20     	; 0x44ec <tmr_exp+0x142>
			}
			else
			{
				return false;
    44d8:	80 e0       	ldi	r24, 0x00	; 0
    44da:	08 c0       	rjmp	.+16     	; 0x44ec <tmr_exp+0x142>
			}
		}
 		else //either the timer_expires == timer_start or both of them are 0 this is the case when the timer_t pointer is not initialised
 		{
     		timer->do_once = true;
    44dc:	89 85       	ldd	r24, Y+9	; 0x09
    44de:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e0:	21 e0       	ldi	r18, 0x01	; 1
    44e2:	fc 01       	movw	r30, r24
    44e4:	20 87       	std	Z+8, r18	; 0x08
 			return true; // timer_expires == timer_start
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	01 c0       	rjmp	.+2      	; 0x44ec <tmr_exp+0x142>
 		}
	}
 	else 
 	{
 		return false;
    44ea:	80 e0       	ldi	r24, 0x00	; 0
 	}
    44ec:	2a 96       	adiw	r28, 0x0a	; 10
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	f8 94       	cli
    44f2:	de bf       	out	0x3e, r29	; 62
    44f4:	0f be       	out	0x3f, r0	; 63
    44f6:	cd bf       	out	0x3d, r28	; 61
    44f8:	df 91       	pop	r29
    44fa:	cf 91       	pop	r28
    44fc:	08 95       	ret

000044fe <USART_init>:
* \author Alexandru
*
* \return void
*/
void USART_init(void)
{
    44fe:	cf 93       	push	r28
    4500:	df 93       	push	r29
    4502:	cd b7       	in	r28, 0x3d	; 61
    4504:	de b7       	in	r29, 0x3e	; 62
	
    
    
    //URSEL: Register Select
    //use data sheet or http://www.wormfood.net/avrbaudcalc.php to calculate
    UBRRH&=~(1<<URSEL);
    4506:	80 e4       	ldi	r24, 0x40	; 64
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	20 e4       	ldi	r18, 0x40	; 64
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	f9 01       	movw	r30, r18
    4510:	20 81       	ld	r18, Z
    4512:	2f 77       	andi	r18, 0x7F	; 127
    4514:	fc 01       	movw	r30, r24
    4516:	20 83       	st	Z, r18
    UBRRL = 129; //baud rate set to 9600bps //fosc/(8*baud)-1
    4518:	89 e2       	ldi	r24, 0x29	; 41
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	21 e8       	ldi	r18, 0x81	; 129
    451e:	fc 01       	movw	r30, r24
    4520:	20 83       	st	Z, r18
    
    //U2X: Double the USART Transmission Speed
    UCSRA =(1<<U2X);
    4522:	8b e2       	ldi	r24, 0x2B	; 43
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	22 e0       	ldi	r18, 0x02	; 2
    4528:	fc 01       	movw	r30, r24
    452a:	20 83       	st	Z, r18
    
    //RXCIE: RX Complete Interrupt Enable
    //UDRIE: USART Data Register Empty Interrupt Enable
    //TXEN: Transmitter Enable
    //RXEN: Receiver Enable
    UCSRB|=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
    452c:	8a e2       	ldi	r24, 0x2A	; 42
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	2a e2       	ldi	r18, 0x2A	; 42
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	f9 01       	movw	r30, r18
    4536:	20 81       	ld	r18, Z
    4538:	28 69       	ori	r18, 0x98	; 152
    453a:	fc 01       	movw	r30, r24
    453c:	20 83       	st	Z, r18
    
    //URSEL: Register Select
    //UCSZ1:0: Character Size 8bit frame size
    UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
    453e:	80 e4       	ldi	r24, 0x40	; 64
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	20 e4       	ldi	r18, 0x40	; 64
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	f9 01       	movw	r30, r18
    4548:	20 81       	ld	r18, Z
    454a:	26 68       	ori	r18, 0x86	; 134
    454c:	fc 01       	movw	r30, r24
    454e:	20 83       	st	Z, r18
	PORTD |= (1<<PD0);
    4550:	82 e3       	ldi	r24, 0x32	; 50
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	22 e3       	ldi	r18, 0x32	; 50
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	f9 01       	movw	r30, r18
    455a:	20 81       	ld	r18, Z
    455c:	21 60       	ori	r18, 0x01	; 1
    455e:	fc 01       	movw	r30, r24
    4560:	20 83       	st	Z, r18
}
    4562:	df 91       	pop	r29
    4564:	cf 91       	pop	r28
    4566:	08 95       	ret

00004568 <USART_transmit_command>:
* \param task Used to specify a pointer to a task, that needs to be transmitted.
*
* \return void
*/
void USART_transmit_command(task_t* task)
{
    4568:	cf 93       	push	r28
    456a:	df 93       	push	r29
    456c:	00 d0       	rcall	.+0      	; 0x456e <USART_transmit_command+0x6>
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	9a 83       	std	Y+2, r25	; 0x02
    4574:	89 83       	std	Y+1, r24	; 0x01
	status.system.sending_task=true;
    4576:	80 91 be 01 	lds	r24, 0x01BE
    457a:	82 60       	ori	r24, 0x02	; 2
    457c:	80 93 be 01 	sts	0x01BE, r24
	task->data.timestamp=get_date_to_int();
    4580:	0e 94 2d 19 	call	0x325a	; 0x325a <get_date_to_int>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	29 81       	ldd	r18, Y+1	; 0x01
    458a:	3a 81       	ldd	r19, Y+2	; 0x02
    458c:	f9 01       	movw	r30, r18
    458e:	81 83       	std	Z+1, r24	; 0x01
    4590:	92 83       	std	Z+2, r25	; 0x02
    4592:	a3 83       	std	Z+3, r26	; 0x03
    4594:	b4 83       	std	Z+4, r27	; 0x04
	task_buffer_copy(usart_tx_task.buffer,task->buffer);
    4596:	89 81       	ldd	r24, Y+1	; 0x01
    4598:	9a 81       	ldd	r25, Y+2	; 0x02
    459a:	fc 01       	movw	r30, r24
    459c:	80 81       	ld	r24, Z
    459e:	80 93 d3 03 	sts	0x03D3, r24
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	9a 81       	ldd	r25, Y+2	; 0x02
    45a6:	fc 01       	movw	r30, r24
    45a8:	81 81       	ldd	r24, Z+1	; 0x01
    45aa:	80 93 d4 03 	sts	0x03D4, r24
    45ae:	89 81       	ldd	r24, Y+1	; 0x01
    45b0:	9a 81       	ldd	r25, Y+2	; 0x02
    45b2:	fc 01       	movw	r30, r24
    45b4:	82 81       	ldd	r24, Z+2	; 0x02
    45b6:	80 93 d5 03 	sts	0x03D5, r24
    45ba:	89 81       	ldd	r24, Y+1	; 0x01
    45bc:	9a 81       	ldd	r25, Y+2	; 0x02
    45be:	fc 01       	movw	r30, r24
    45c0:	83 81       	ldd	r24, Z+3	; 0x03
    45c2:	80 93 d6 03 	sts	0x03D6, r24
    45c6:	89 81       	ldd	r24, Y+1	; 0x01
    45c8:	9a 81       	ldd	r25, Y+2	; 0x02
    45ca:	fc 01       	movw	r30, r24
    45cc:	84 81       	ldd	r24, Z+4	; 0x04
    45ce:	80 93 d7 03 	sts	0x03D7, r24
    45d2:	89 81       	ldd	r24, Y+1	; 0x01
    45d4:	9a 81       	ldd	r25, Y+2	; 0x02
    45d6:	fc 01       	movw	r30, r24
    45d8:	85 81       	ldd	r24, Z+5	; 0x05
    45da:	80 93 d8 03 	sts	0x03D8, r24
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	9a 81       	ldd	r25, Y+2	; 0x02
    45e2:	fc 01       	movw	r30, r24
    45e4:	86 81       	ldd	r24, Z+6	; 0x06
    45e6:	80 93 d9 03 	sts	0x03D9, r24
    45ea:	89 81       	ldd	r24, Y+1	; 0x01
    45ec:	9a 81       	ldd	r25, Y+2	; 0x02
    45ee:	fc 01       	movw	r30, r24
    45f0:	87 81       	ldd	r24, Z+7	; 0x07
    45f2:	80 93 da 03 	sts	0x03DA, r24
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	9a 81       	ldd	r25, Y+2	; 0x02
    45fa:	fc 01       	movw	r30, r24
    45fc:	80 85       	ldd	r24, Z+8	; 0x08
    45fe:	80 93 db 03 	sts	0x03DB, r24
	enable_uart_transmision();
    4602:	8a e2       	ldi	r24, 0x2A	; 42
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	2a e2       	ldi	r18, 0x2A	; 42
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	f9 01       	movw	r30, r18
    460c:	20 81       	ld	r18, Z
    460e:	20 62       	ori	r18, 0x20	; 32
    4610:	fc 01       	movw	r30, r24
    4612:	20 83       	st	Z, r18
}
    4614:	0f 90       	pop	r0
    4616:	0f 90       	pop	r0
    4618:	df 91       	pop	r29
    461a:	cf 91       	pop	r28
    461c:	08 95       	ret

0000461e <USART_transmit_string>:
* \param task Used to specify a pointer to a string, that needs to be transmitted.
*
* \return void
*/
void USART_transmit_string(char* string)
{
    461e:	cf 93       	push	r28
    4620:	df 93       	push	r29
    4622:	cd b7       	in	r28, 0x3d	; 61
    4624:	de b7       	in	r29, 0x3e	; 62
    4626:	2b 97       	sbiw	r28, 0x0b	; 11
    4628:	0f b6       	in	r0, 0x3f	; 63
    462a:	f8 94       	cli
    462c:	de bf       	out	0x3e, r29	; 62
    462e:	0f be       	out	0x3f, r0	; 63
    4630:	cd bf       	out	0x3d, r28	; 61
    4632:	9b 87       	std	Y+11, r25	; 0x0b
    4634:	8a 87       	std	Y+10, r24	; 0x0a
	task_t string_task = {.data.command = STRING, .data.str = string};
    4636:	29 e0       	ldi	r18, 0x09	; 9
    4638:	ce 01       	movw	r24, r28
    463a:	01 96       	adiw	r24, 0x01	; 1
    463c:	fc 01       	movw	r30, r24
    463e:	32 2f       	mov	r19, r18
    4640:	11 92       	st	Z+, r1
    4642:	3a 95       	dec	r19
    4644:	e9 f7       	brne	.-6      	; 0x4640 <USART_transmit_string+0x22>
    4646:	8a 85       	ldd	r24, Y+10	; 0x0a
    4648:	9b 85       	ldd	r25, Y+11	; 0x0b
    464a:	9f 83       	std	Y+7, r25	; 0x07
    464c:	8e 83       	std	Y+6, r24	; 0x06
	status.system.sending_task=true;
    464e:	80 91 be 01 	lds	r24, 0x01BE
    4652:	82 60       	ori	r24, 0x02	; 2
    4654:	80 93 be 01 	sts	0x01BE, r24
	string_task.data.timestamp=get_date_to_int();
    4658:	0e 94 2d 19 	call	0x325a	; 0x325a <get_date_to_int>
    465c:	dc 01       	movw	r26, r24
    465e:	cb 01       	movw	r24, r22
    4660:	8a 83       	std	Y+2, r24	; 0x02
    4662:	9b 83       	std	Y+3, r25	; 0x03
    4664:	ac 83       	std	Y+4, r26	; 0x04
    4666:	bd 83       	std	Y+5, r27	; 0x05
	task_buffer_copy(usart_tx_task.buffer,string_task.buffer);
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	80 93 d3 03 	sts	0x03D3, r24
    466e:	8a 81       	ldd	r24, Y+2	; 0x02
    4670:	80 93 d4 03 	sts	0x03D4, r24
    4674:	8b 81       	ldd	r24, Y+3	; 0x03
    4676:	80 93 d5 03 	sts	0x03D5, r24
    467a:	8c 81       	ldd	r24, Y+4	; 0x04
    467c:	80 93 d6 03 	sts	0x03D6, r24
    4680:	8d 81       	ldd	r24, Y+5	; 0x05
    4682:	80 93 d7 03 	sts	0x03D7, r24
    4686:	8e 81       	ldd	r24, Y+6	; 0x06
    4688:	80 93 d8 03 	sts	0x03D8, r24
    468c:	8f 81       	ldd	r24, Y+7	; 0x07
    468e:	80 93 d9 03 	sts	0x03D9, r24
    4692:	88 85       	ldd	r24, Y+8	; 0x08
    4694:	80 93 da 03 	sts	0x03DA, r24
    4698:	89 85       	ldd	r24, Y+9	; 0x09
    469a:	80 93 db 03 	sts	0x03DB, r24
	enable_uart_transmision();
    469e:	8a e2       	ldi	r24, 0x2A	; 42
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	2a e2       	ldi	r18, 0x2A	; 42
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	f9 01       	movw	r30, r18
    46a8:	20 81       	ld	r18, Z
    46aa:	20 62       	ori	r18, 0x20	; 32
    46ac:	fc 01       	movw	r30, r24
    46ae:	20 83       	st	Z, r18
    46b0:	2b 96       	adiw	r28, 0x0b	; 11
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	f8 94       	cli
    46b6:	de bf       	out	0x3e, r29	; 62
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	cd bf       	out	0x3d, r28	; 61
    46bc:	df 91       	pop	r29
    46be:	cf 91       	pop	r28
    46c0:	08 95       	ret

000046c2 <__tablejump2__>:
    46c2:	ee 0f       	add	r30, r30
    46c4:	ff 1f       	adc	r31, r31

000046c6 <__tablejump__>:
    46c6:	05 90       	lpm	r0, Z+
    46c8:	f4 91       	lpm	r31, Z
    46ca:	e0 2d       	mov	r30, r0
    46cc:	09 94       	ijmp

000046ce <__umulhisi3>:
    46ce:	a2 9f       	mul	r26, r18
    46d0:	b0 01       	movw	r22, r0
    46d2:	b3 9f       	mul	r27, r19
    46d4:	c0 01       	movw	r24, r0
    46d6:	a3 9f       	mul	r26, r19
    46d8:	70 0d       	add	r23, r0
    46da:	81 1d       	adc	r24, r1
    46dc:	11 24       	eor	r1, r1
    46de:	91 1d       	adc	r25, r1
    46e0:	b2 9f       	mul	r27, r18
    46e2:	70 0d       	add	r23, r0
    46e4:	81 1d       	adc	r24, r1
    46e6:	11 24       	eor	r1, r1
    46e8:	91 1d       	adc	r25, r1
    46ea:	08 95       	ret

000046ec <__muluhisi3>:
    46ec:	0e 94 67 23 	call	0x46ce	; 0x46ce <__umulhisi3>
    46f0:	a5 9f       	mul	r26, r21
    46f2:	90 0d       	add	r25, r0
    46f4:	b4 9f       	mul	r27, r20
    46f6:	90 0d       	add	r25, r0
    46f8:	a4 9f       	mul	r26, r20
    46fa:	80 0d       	add	r24, r0
    46fc:	91 1d       	adc	r25, r1
    46fe:	11 24       	eor	r1, r1
    4700:	08 95       	ret

00004702 <malloc>:
    4702:	cf 93       	push	r28
    4704:	df 93       	push	r29
    4706:	82 30       	cpi	r24, 0x02	; 2
    4708:	91 05       	cpc	r25, r1
    470a:	10 f4       	brcc	.+4      	; 0x4710 <malloc+0xe>
    470c:	82 e0       	ldi	r24, 0x02	; 2
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	e0 91 de 03 	lds	r30, 0x03DE
    4714:	f0 91 df 03 	lds	r31, 0x03DF
    4718:	20 e0       	ldi	r18, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	a0 e0       	ldi	r26, 0x00	; 0
    471e:	b0 e0       	ldi	r27, 0x00	; 0
    4720:	30 97       	sbiw	r30, 0x00	; 0
    4722:	39 f1       	breq	.+78     	; 0x4772 <malloc+0x70>
    4724:	40 81       	ld	r20, Z
    4726:	51 81       	ldd	r21, Z+1	; 0x01
    4728:	48 17       	cp	r20, r24
    472a:	59 07       	cpc	r21, r25
    472c:	b8 f0       	brcs	.+46     	; 0x475c <malloc+0x5a>
    472e:	48 17       	cp	r20, r24
    4730:	59 07       	cpc	r21, r25
    4732:	71 f4       	brne	.+28     	; 0x4750 <malloc+0x4e>
    4734:	82 81       	ldd	r24, Z+2	; 0x02
    4736:	93 81       	ldd	r25, Z+3	; 0x03
    4738:	10 97       	sbiw	r26, 0x00	; 0
    473a:	29 f0       	breq	.+10     	; 0x4746 <malloc+0x44>
    473c:	13 96       	adiw	r26, 0x03	; 3
    473e:	9c 93       	st	X, r25
    4740:	8e 93       	st	-X, r24
    4742:	12 97       	sbiw	r26, 0x02	; 2
    4744:	2c c0       	rjmp	.+88     	; 0x479e <malloc+0x9c>
    4746:	90 93 df 03 	sts	0x03DF, r25
    474a:	80 93 de 03 	sts	0x03DE, r24
    474e:	27 c0       	rjmp	.+78     	; 0x479e <malloc+0x9c>
    4750:	21 15       	cp	r18, r1
    4752:	31 05       	cpc	r19, r1
    4754:	31 f0       	breq	.+12     	; 0x4762 <malloc+0x60>
    4756:	42 17       	cp	r20, r18
    4758:	53 07       	cpc	r21, r19
    475a:	18 f0       	brcs	.+6      	; 0x4762 <malloc+0x60>
    475c:	a9 01       	movw	r20, r18
    475e:	db 01       	movw	r26, r22
    4760:	01 c0       	rjmp	.+2      	; 0x4764 <malloc+0x62>
    4762:	ef 01       	movw	r28, r30
    4764:	9a 01       	movw	r18, r20
    4766:	bd 01       	movw	r22, r26
    4768:	df 01       	movw	r26, r30
    476a:	02 80       	ldd	r0, Z+2	; 0x02
    476c:	f3 81       	ldd	r31, Z+3	; 0x03
    476e:	e0 2d       	mov	r30, r0
    4770:	d7 cf       	rjmp	.-82     	; 0x4720 <malloc+0x1e>
    4772:	21 15       	cp	r18, r1
    4774:	31 05       	cpc	r19, r1
    4776:	f9 f0       	breq	.+62     	; 0x47b6 <malloc+0xb4>
    4778:	28 1b       	sub	r18, r24
    477a:	39 0b       	sbc	r19, r25
    477c:	24 30       	cpi	r18, 0x04	; 4
    477e:	31 05       	cpc	r19, r1
    4780:	80 f4       	brcc	.+32     	; 0x47a2 <malloc+0xa0>
    4782:	8a 81       	ldd	r24, Y+2	; 0x02
    4784:	9b 81       	ldd	r25, Y+3	; 0x03
    4786:	61 15       	cp	r22, r1
    4788:	71 05       	cpc	r23, r1
    478a:	21 f0       	breq	.+8      	; 0x4794 <malloc+0x92>
    478c:	fb 01       	movw	r30, r22
    478e:	93 83       	std	Z+3, r25	; 0x03
    4790:	82 83       	std	Z+2, r24	; 0x02
    4792:	04 c0       	rjmp	.+8      	; 0x479c <malloc+0x9a>
    4794:	90 93 df 03 	sts	0x03DF, r25
    4798:	80 93 de 03 	sts	0x03DE, r24
    479c:	fe 01       	movw	r30, r28
    479e:	32 96       	adiw	r30, 0x02	; 2
    47a0:	44 c0       	rjmp	.+136    	; 0x482a <malloc+0x128>
    47a2:	fe 01       	movw	r30, r28
    47a4:	e2 0f       	add	r30, r18
    47a6:	f3 1f       	adc	r31, r19
    47a8:	81 93       	st	Z+, r24
    47aa:	91 93       	st	Z+, r25
    47ac:	22 50       	subi	r18, 0x02	; 2
    47ae:	31 09       	sbc	r19, r1
    47b0:	39 83       	std	Y+1, r19	; 0x01
    47b2:	28 83       	st	Y, r18
    47b4:	3a c0       	rjmp	.+116    	; 0x482a <malloc+0x128>
    47b6:	20 91 dc 03 	lds	r18, 0x03DC
    47ba:	30 91 dd 03 	lds	r19, 0x03DD
    47be:	23 2b       	or	r18, r19
    47c0:	41 f4       	brne	.+16     	; 0x47d2 <malloc+0xd0>
    47c2:	20 91 62 00 	lds	r18, 0x0062
    47c6:	30 91 63 00 	lds	r19, 0x0063
    47ca:	30 93 dd 03 	sts	0x03DD, r19
    47ce:	20 93 dc 03 	sts	0x03DC, r18
    47d2:	20 91 60 00 	lds	r18, 0x0060
    47d6:	30 91 61 00 	lds	r19, 0x0061
    47da:	21 15       	cp	r18, r1
    47dc:	31 05       	cpc	r19, r1
    47de:	41 f4       	brne	.+16     	; 0x47f0 <malloc+0xee>
    47e0:	2d b7       	in	r18, 0x3d	; 61
    47e2:	3e b7       	in	r19, 0x3e	; 62
    47e4:	40 91 64 00 	lds	r20, 0x0064
    47e8:	50 91 65 00 	lds	r21, 0x0065
    47ec:	24 1b       	sub	r18, r20
    47ee:	35 0b       	sbc	r19, r21
    47f0:	e0 91 dc 03 	lds	r30, 0x03DC
    47f4:	f0 91 dd 03 	lds	r31, 0x03DD
    47f8:	e2 17       	cp	r30, r18
    47fa:	f3 07       	cpc	r31, r19
    47fc:	a0 f4       	brcc	.+40     	; 0x4826 <malloc+0x124>
    47fe:	2e 1b       	sub	r18, r30
    4800:	3f 0b       	sbc	r19, r31
    4802:	28 17       	cp	r18, r24
    4804:	39 07       	cpc	r19, r25
    4806:	78 f0       	brcs	.+30     	; 0x4826 <malloc+0x124>
    4808:	ac 01       	movw	r20, r24
    480a:	4e 5f       	subi	r20, 0xFE	; 254
    480c:	5f 4f       	sbci	r21, 0xFF	; 255
    480e:	24 17       	cp	r18, r20
    4810:	35 07       	cpc	r19, r21
    4812:	48 f0       	brcs	.+18     	; 0x4826 <malloc+0x124>
    4814:	4e 0f       	add	r20, r30
    4816:	5f 1f       	adc	r21, r31
    4818:	50 93 dd 03 	sts	0x03DD, r21
    481c:	40 93 dc 03 	sts	0x03DC, r20
    4820:	81 93       	st	Z+, r24
    4822:	91 93       	st	Z+, r25
    4824:	02 c0       	rjmp	.+4      	; 0x482a <malloc+0x128>
    4826:	e0 e0       	ldi	r30, 0x00	; 0
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	cf 01       	movw	r24, r30
    482c:	df 91       	pop	r29
    482e:	cf 91       	pop	r28
    4830:	08 95       	ret

00004832 <free>:
    4832:	cf 93       	push	r28
    4834:	df 93       	push	r29
    4836:	00 97       	sbiw	r24, 0x00	; 0
    4838:	09 f4       	brne	.+2      	; 0x483c <free+0xa>
    483a:	87 c0       	rjmp	.+270    	; 0x494a <free+0x118>
    483c:	fc 01       	movw	r30, r24
    483e:	32 97       	sbiw	r30, 0x02	; 2
    4840:	13 82       	std	Z+3, r1	; 0x03
    4842:	12 82       	std	Z+2, r1	; 0x02
    4844:	c0 91 de 03 	lds	r28, 0x03DE
    4848:	d0 91 df 03 	lds	r29, 0x03DF
    484c:	20 97       	sbiw	r28, 0x00	; 0
    484e:	81 f4       	brne	.+32     	; 0x4870 <free+0x3e>
    4850:	20 81       	ld	r18, Z
    4852:	31 81       	ldd	r19, Z+1	; 0x01
    4854:	28 0f       	add	r18, r24
    4856:	39 1f       	adc	r19, r25
    4858:	80 91 dc 03 	lds	r24, 0x03DC
    485c:	90 91 dd 03 	lds	r25, 0x03DD
    4860:	82 17       	cp	r24, r18
    4862:	93 07       	cpc	r25, r19
    4864:	79 f5       	brne	.+94     	; 0x48c4 <free+0x92>
    4866:	f0 93 dd 03 	sts	0x03DD, r31
    486a:	e0 93 dc 03 	sts	0x03DC, r30
    486e:	6d c0       	rjmp	.+218    	; 0x494a <free+0x118>
    4870:	de 01       	movw	r26, r28
    4872:	20 e0       	ldi	r18, 0x00	; 0
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	ae 17       	cp	r26, r30
    4878:	bf 07       	cpc	r27, r31
    487a:	50 f4       	brcc	.+20     	; 0x4890 <free+0x5e>
    487c:	12 96       	adiw	r26, 0x02	; 2
    487e:	4d 91       	ld	r20, X+
    4880:	5c 91       	ld	r21, X
    4882:	13 97       	sbiw	r26, 0x03	; 3
    4884:	9d 01       	movw	r18, r26
    4886:	41 15       	cp	r20, r1
    4888:	51 05       	cpc	r21, r1
    488a:	09 f1       	breq	.+66     	; 0x48ce <free+0x9c>
    488c:	da 01       	movw	r26, r20
    488e:	f3 cf       	rjmp	.-26     	; 0x4876 <free+0x44>
    4890:	b3 83       	std	Z+3, r27	; 0x03
    4892:	a2 83       	std	Z+2, r26	; 0x02
    4894:	40 81       	ld	r20, Z
    4896:	51 81       	ldd	r21, Z+1	; 0x01
    4898:	84 0f       	add	r24, r20
    489a:	95 1f       	adc	r25, r21
    489c:	8a 17       	cp	r24, r26
    489e:	9b 07       	cpc	r25, r27
    48a0:	71 f4       	brne	.+28     	; 0x48be <free+0x8c>
    48a2:	8d 91       	ld	r24, X+
    48a4:	9c 91       	ld	r25, X
    48a6:	11 97       	sbiw	r26, 0x01	; 1
    48a8:	84 0f       	add	r24, r20
    48aa:	95 1f       	adc	r25, r21
    48ac:	02 96       	adiw	r24, 0x02	; 2
    48ae:	91 83       	std	Z+1, r25	; 0x01
    48b0:	80 83       	st	Z, r24
    48b2:	12 96       	adiw	r26, 0x02	; 2
    48b4:	8d 91       	ld	r24, X+
    48b6:	9c 91       	ld	r25, X
    48b8:	13 97       	sbiw	r26, 0x03	; 3
    48ba:	93 83       	std	Z+3, r25	; 0x03
    48bc:	82 83       	std	Z+2, r24	; 0x02
    48be:	21 15       	cp	r18, r1
    48c0:	31 05       	cpc	r19, r1
    48c2:	29 f4       	brne	.+10     	; 0x48ce <free+0x9c>
    48c4:	f0 93 df 03 	sts	0x03DF, r31
    48c8:	e0 93 de 03 	sts	0x03DE, r30
    48cc:	3e c0       	rjmp	.+124    	; 0x494a <free+0x118>
    48ce:	d9 01       	movw	r26, r18
    48d0:	13 96       	adiw	r26, 0x03	; 3
    48d2:	fc 93       	st	X, r31
    48d4:	ee 93       	st	-X, r30
    48d6:	12 97       	sbiw	r26, 0x02	; 2
    48d8:	4d 91       	ld	r20, X+
    48da:	5d 91       	ld	r21, X+
    48dc:	a4 0f       	add	r26, r20
    48de:	b5 1f       	adc	r27, r21
    48e0:	ea 17       	cp	r30, r26
    48e2:	fb 07       	cpc	r31, r27
    48e4:	79 f4       	brne	.+30     	; 0x4904 <free+0xd2>
    48e6:	80 81       	ld	r24, Z
    48e8:	91 81       	ldd	r25, Z+1	; 0x01
    48ea:	84 0f       	add	r24, r20
    48ec:	95 1f       	adc	r25, r21
    48ee:	02 96       	adiw	r24, 0x02	; 2
    48f0:	d9 01       	movw	r26, r18
    48f2:	11 96       	adiw	r26, 0x01	; 1
    48f4:	9c 93       	st	X, r25
    48f6:	8e 93       	st	-X, r24
    48f8:	82 81       	ldd	r24, Z+2	; 0x02
    48fa:	93 81       	ldd	r25, Z+3	; 0x03
    48fc:	13 96       	adiw	r26, 0x03	; 3
    48fe:	9c 93       	st	X, r25
    4900:	8e 93       	st	-X, r24
    4902:	12 97       	sbiw	r26, 0x02	; 2
    4904:	e0 e0       	ldi	r30, 0x00	; 0
    4906:	f0 e0       	ldi	r31, 0x00	; 0
    4908:	8a 81       	ldd	r24, Y+2	; 0x02
    490a:	9b 81       	ldd	r25, Y+3	; 0x03
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	19 f0       	breq	.+6      	; 0x4916 <free+0xe4>
    4910:	fe 01       	movw	r30, r28
    4912:	ec 01       	movw	r28, r24
    4914:	f9 cf       	rjmp	.-14     	; 0x4908 <free+0xd6>
    4916:	ce 01       	movw	r24, r28
    4918:	02 96       	adiw	r24, 0x02	; 2
    491a:	28 81       	ld	r18, Y
    491c:	39 81       	ldd	r19, Y+1	; 0x01
    491e:	82 0f       	add	r24, r18
    4920:	93 1f       	adc	r25, r19
    4922:	20 91 dc 03 	lds	r18, 0x03DC
    4926:	30 91 dd 03 	lds	r19, 0x03DD
    492a:	28 17       	cp	r18, r24
    492c:	39 07       	cpc	r19, r25
    492e:	69 f4       	brne	.+26     	; 0x494a <free+0x118>
    4930:	30 97       	sbiw	r30, 0x00	; 0
    4932:	29 f4       	brne	.+10     	; 0x493e <free+0x10c>
    4934:	10 92 df 03 	sts	0x03DF, r1
    4938:	10 92 de 03 	sts	0x03DE, r1
    493c:	02 c0       	rjmp	.+4      	; 0x4942 <free+0x110>
    493e:	13 82       	std	Z+3, r1	; 0x03
    4940:	12 82       	std	Z+2, r1	; 0x02
    4942:	d0 93 dd 03 	sts	0x03DD, r29
    4946:	c0 93 dc 03 	sts	0x03DC, r28
    494a:	df 91       	pop	r29
    494c:	cf 91       	pop	r28
    494e:	08 95       	ret

00004950 <_exit>:
    4950:	f8 94       	cli

00004952 <__stop_program>:
    4952:	ff cf       	rjmp	.-2      	; 0x4952 <__stop_program>
